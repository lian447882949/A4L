/* 这份源代码文件已被未注册的SourceFormatX格式化过 */
/* 如果您想不再添加此类信息，请您注册这个共享软件  */
/* 更多相关信息请访问网站: http://cn.textrush.com  */

/******************** (C) COPYRIGHT 2011 APTENON ********************
 * File Name          : canbus.c
 * Author             : miller.tao
 * Version            : V0.0
 * Date               : 07/13/2015
 * Description        : canbus  file.
 *******************************************************************************/
#define _BENZE_BUS_C_
#include "includes.h"
//#include "can_config.h"


static vu8 uPreAction = 0;
static vu8 uPreVal = 0;

/******************************************************************
速度 1000   500  250  125  100  50     20    10
距离 40     130  270  530  620  1300   3300	  6700
CIA推荐值
75% when 波特率 》800K
80% when 波特率 》500K
87.5% when 波特率 < 500K
 *******************************************************************/



const static  CanTxMsg  BENCI_keyTab[]=
{
    /*
            uint32_t StdId;

            uint32_t ExtId;

            uint8_t IDE;

            uint8_t RTR;

            uint8_t DLC;

            uint8_t Data[8];
      */

    {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x02,0x86,0x00,0x00,0x77,0x00}},//konb ok

    {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x20,0x86,0x00,0x00,0x77,0x00}},//konb ok

    {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x80,0x86,0x00,0x00,0x77,0x00}},//konb ok

    {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x08,0x86,0x00,0x00,0x77,0x00}},//konb ok

    {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x01,0x86,0x00,0x00,0x77,0x00}},//konb ok

};




#if LF_CAN_TYPE == BWM5SCAN
void BWM_5S_CanBus_Config(void)
{
    CAN_InitTypeDef CAN_InitStructure;
    CAN_FilterInitTypeDef CAN_FilterInitStructure;
    /* CAN register init */
    // CAN_DeInit();
    /* CAN1 and CAN2 register init */
    CAN_DeInit(CAN1);
    CAN_DeInit(CAN2);


    /* Struct init*/
    CAN_StructInit(&CAN_InitStructure);
	CAN_FilterInit(&CAN_FilterInitStructure); //初始化CAN_FilterInitStructrue结构体变量

    /* CAN cell init */
    CAN_InitStructure.CAN_TTCM = DISABLE; //禁止时间触发通信模式
    CAN_InitStructure.CAN_ABOM = DISABLE;
    CAN_InitStructure.CAN_AWUM = DISABLE;
    CAN_InitStructure.CAN_NART = DISABLE;
    //CAN报文只被发送1次，不管发送的结果如何（成功、出错或仲裁丢失）
    CAN_InitStructure.CAN_RFLM = DISABLE;
    CAN_InitStructure.CAN_TXFP = DISABLE;
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;

    CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
    CAN_InitStructure.CAN_BS1 = CAN_BS1_13tq; //1--16
    CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq; //1--8
    CAN_InitStructure.CAN_Prescaler = 4;
    ////(pclk1/((1+8+7)*16)) = 32Mhz/16/20 = 100Kbits
    //CAN_Init(&CAN_InitStructure);

    /*Initializes the CAN1	and CAN2 */
    CAN_Init(CAN1, &CAN_InitStructure);


    /* CAN cell init */
    CAN_InitStructure.CAN_TTCM = DISABLE; //禁止时间触发通信模式
    CAN_InitStructure.CAN_ABOM = DISABLE;
    CAN_InitStructure.CAN_AWUM = DISABLE;
    CAN_InitStructure.CAN_NART = DISABLE;
    //CAN报文只被发送1次，不管发送的结果如何（成功、出错或仲裁丢失）
    CAN_InitStructure.CAN_RFLM = DISABLE;
    CAN_InitStructure.CAN_TXFP = DISABLE;
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;

    CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
    CAN_InitStructure.CAN_BS1 = CAN_BS1_13tq; //1--16
    CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq; //1--8
    CAN_InitStructure.CAN_Prescaler = 4;//20
    ////(pclk1/((1+8+7)*16)) = 32Mhz/16/20 = 100Kbits
    CAN_Init(CAN2, &CAN_InitStructure);

#if 1
	CAN_FilterInitStructure.CAN_FilterNumber=0;     /* 过滤器0 */
  	CAN_FilterInitStructure.CAN_FilterMode=CAN_FilterMode_IdMask;  /* 屏敝模式 */
  	CAN_FilterInitStructure.CAN_FilterScale=CAN_FilterScale_32bit; /* 32位 */
	CAN_FilterInitStructure.CAN_FilterIdHigh=0x0000;  /* 以下四个都为0, 表明不过滤任何id */
	CAN_FilterInitStructure.CAN_FilterIdLow=0x0000;
	CAN_FilterInitStructure.CAN_FilterMaskIdHigh=0x0000;
	CAN_FilterInitStructure.CAN_FilterMaskIdLow=0x0000;
	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
	CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
	CAN_SlaveStartBank(0);//5,Miller.Tao
#else	



#if 1
    CAN_FilterInitStructure.CAN_FilterNumber = 14; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_STALLS_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
#else
    CAN_FilterInitStructure.CAN_FilterNumber = 14; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = 0 << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

#endif

    CAN_FilterInitStructure.CAN_FilterNumber = 15; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;

    if(gCarTypeCode==0xF1)
        CAN_FilterInitStructure.CAN_FilterIdHigh = BWM2S_CAN_STEERINGANGLE_STD_ID << 5;
    else
        CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_STEERINGANGLE_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数





    CAN_FilterInitStructure.CAN_FilterNumber = 16; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_POWER_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数




    CAN_FilterInitStructure.CAN_FilterNumber = 17; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_RADAR_DISP_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 18; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_STEER_KEY_STD__TYPE1_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 19; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_KNOB_TUNE_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 20; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_KONB_KB_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 21; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_STEER_KEY_STD__TYPE4_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 22; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_STEER_KEY_STD__TYPE2_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 23; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_STEER_KEY_STD__TYPE3_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数


    CAN_FilterInitStructure.CAN_FilterNumber = 24; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_RADAR_VAL_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 25; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_RADAR_VAL_Front_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数


    CAN_FilterInitStructure.CAN_FilterNumber = 26; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_BT_statu_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
    //-------------------------------------------------------------
    CAN_FilterInitStructure.CAN_FilterNumber = 8; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_POWER2_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数



    CAN_FilterInitStructure.CAN_FilterNumber = 9; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_POWER3_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数


    CAN_FilterInitStructure.CAN_FilterNumber = 10; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_CarDoor_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 11; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_CarSpeed_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数



    CAN_FilterInitStructure.CAN_FilterNumber = 12; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_CarSpeed_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 13; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_TIMER_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 7; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_STEER_KEY_STD__TYPE5_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 6; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_POWER4_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
    CAN_FilterInitStructure.CAN_FilterNumber = 5; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_Lock_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
#if 0
    CAN_FilterInitStructure.CAN_FilterNumber = 4; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_LockOp_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
#endif


    CAN_FilterInitStructure.CAN_FilterNumber = 4; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_LeftFrontWin_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

    CAN_FilterInitStructure.CAN_FilterNumber = 27; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_LeftRearWin_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
#if 0
	CAN_FilterInitStructure.CAN_FilterNumber = 28; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_TFT_Status_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

#endif
    CAN_FilterInitStructure.CAN_FilterNumber = 3; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_RightFrontWin_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
    CAN_FilterInitStructure.CAN_FilterNumber = 2; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_RightRearWin_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //

    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
    CAN_FilterInitStructure.CAN_FilterNumber = 1; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BMW5S_CAN_SkyWin_STD_ID << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
#if  _ENABLE_FRONTVIEW //miller.tao20160314//miller.tao20160314
    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
    CAN_FilterInitStructure.CAN_FilterNumber = 0; //选择过滤器7
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    CAN_FilterInitStructure.CAN_FilterIdHigh = BWM5S_CAN_BACK_STATUS_ID2 << 5;
    CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
    CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
#endif
    CAN_SlaveStartBank(0);//5,Miller.Tao
#endif

    /* CAN FIFO0 message pending interrupt enable */
    // CAN_ITConfig(CAN1, CAN_IT_FMP0 | CAN_IT_FF0, DISABLE);
    CAN_ITConfig(CAN1, CAN_IT_FMP0 , ENABLE);
    /* CAN FIFO0 message pending interrupt enable */
    CAN_ITConfig(CAN2, CAN_IT_FMP0, ENABLE);


}


/*
*********************************************************
*fun:void BWM_X1_Can_FetchStallsInfo(CanRxMsg RxMessage)
*description:处理档位信息
*
*
*Author:Miller.Tao,2014-09-10
*
*********************************************************
*/

void BWM_5S_Can_FetchStallsInfo(CanRxMsg RxMessage)
{
    //  static BYTE presource =0;

#if !_ENABLE_FRONTVIEW//miller.tao20160308
    if (!(RxMessage.StdId == BWM5S_CAN_STALLS_STD_ID && RxMessage.DLC == 3))
    {
        return ;
    }
#endif

#if _ENABLE_FRONTVIEW //miller.tao20160308,add for front view function
    if(RxMessage.StdId == BWM5S_CAN_BACK_STATUS_ID2 && RxMessage.DLC == 8)
    {
        if((RxMessage.Data[5]&0x0F)==0x01)//miller.tao20160518
            u8BackCurState_ID2=1;
        else
            u8BackCurState_ID2=0;
    }

    if(Sys.u8can_back_status==CAM_ON_from_can)
    {

        g_stuFrontViewCNTR.ufront_is_on=0;

    }
    else if(u8BackCurState_ID2)
    {
        if((Sys.FS_select.car_rearview_id==0x1)||(Sys.FS_select.car_rearview_id==0x3))
        {
            if(m_CarSpeedInfo.car_speed<=0x80)//
            {
                g_stuFrontViewCNTR.ufront_is_on=1;
            }
            else
            {
                g_stuFrontViewCNTR.ufront_is_on = 0;
            }
        }

    }
    else
    {
        g_stuFrontViewCNTR.ufront_is_on=0;

    }
#endif
    if(RxMessage.StdId == BWM5S_CAN_STALLS_STD_ID && RxMessage.DLC == 3)
    {
        if ((RxMessage.Data[1] & 0x01) == 0x01)
        {
            //back
// #if COMPILE_BACK_BY_STALL

             Sys.u8can_back_status=CAM_ON_from_can;

            g_stuCurPower.wRearOnByCanTimer=2000;
// #endif

        }
        else
        {
// #if COMPILE_BACK_BY_STALL


         //       g_stuPARKCNTR.u8CurState = PARK_OFF;
				Sys.u8back_exit_auto=0;
                Sys.u8can_back_status=CAM_off_id;


// #endif
        }
    }

}

#if 0 //Miller.Tao20150113
void BWM_5S_CanBus_FetchSteerKeyInfo_Type5(CanRxMsg RxMessage)
{
    static vu8 uCKeepFlag = 0;
    static vu8 uRetKeepFlag = 0;
    static vu16 wBounceCnt = 0;
    BYTE i;

    if(g_stuSYSINFO.FS_select.car_type_onoff_id==1)
        return;

    m_BMW_CAN.RxMessage.DLC = RxMessage.DLC;
    if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE5_ID && RxMessage.DLC == 2))
    {
        return ;
    }
    for(i = 0; i < 2; i++)
        m_BMW_CAN.RxMessage.Data[i] = RxMessage.Data[i];
    //initial
    m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
    //
    if (RxMessage.Data[0]==0x01)
        //navi
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED;
    }
    else if (RxMessage.Data[0]==0x04)
        //dvd
    {
        m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_DVD;
    }
    else if (RxMessage.Data[0] == 0x10)
        //vedio
    {
        m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_vedio;
    }
    else if (RxMessage.Data[0] == 0x40)
        //music
    {
        m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_music;
    }
    else if (RxMessage.Data[1] == 0x01)
        //tv
    {
        m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_TV;
    }
    else
    {

        //-------------------------------------------------------
        wBounceCnt++;
        if (wBounceCnt >= 2)
        {
            uCKeepFlag = 0;
            uRetKeepFlag = 0;
            m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
            wBounceCnt = 0;
        }
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;

    }


    switch (m_BMW_CAN.uKeyID2)
    {
    case BENZE_KEY_ALL_BOUNCED:
        uCKeepFlag = 0;
        uRetKeepFlag = 0;
        m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
        wBounceCnt = 0;
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;
        break;
    case BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;
    case BENZE_CMD_KNOB_DVD:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_DVD);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;
    case BENZE_CMD_KNOB_vedio:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_vedio);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;
    case BENZE_CMD_KNOB_music:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_music);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;
    case BENZE_CMD_KNOB_TV:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TV);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;



    default:
        m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;
        break;
    }
}
#endif

void BWM_5S_CanBus_FetchSteerKeyInfo_Type5(CanRxMsg RxMessage)
{
    static vu8 uCKeepFlag = 0;
    static vu8 uRetKeepFlag = 0;
    static vu16 wBounceCnt = 0;
    BYTE i;

    //if((g_stuSYSINFO.FS_select.car_type_onoff_id&0x01)==0x01)//miller.tao 20160625,no need this function
    return;

    m_BMW_CAN.RxMessage.DLC = RxMessage.DLC;
    if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE5_ID && RxMessage.DLC == 2))
    {
        return ;
    }
    for(i = 0; i < 2; i++)
        m_BMW_CAN.RxMessage.Data[i] = RxMessage.Data[i];
    //initial
    m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
    //
    if (RxMessage.Data[0]==0x01)
        //navi
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED;
    }
    else if (RxMessage.Data[0]==0x04)
        //dvd
    {
        m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_DVD;
    }
    else if (RxMessage.Data[0] == 0x10)
        //vedio
    {
        m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_vedio;
    }
    else if (RxMessage.Data[0] == 0x40)
        //music
    {
        m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_music;
    }
    else if (RxMessage.Data[1] == 0x01)
        //tv
    {
        m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_TV;
    }
    else
    {

        //-------------------------------------------------------
        wBounceCnt++;
        if (wBounceCnt >= 2)
        {
            uCKeepFlag = 0;
            uRetKeepFlag = 0;
            m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
            wBounceCnt = 0;
        }
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;

    }


    switch (m_BMW_CAN.uKeyID2)
    {
    case BENZE_KEY_ALL_BOUNCED:
        uCKeepFlag = 0;
        uRetKeepFlag = 0;
        m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
        wBounceCnt = 0;
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;
        break;
    case BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;
    case BENZE_CMD_KNOB_DVD:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_DVD);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;
    case BENZE_CMD_KNOB_vedio:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_vedio);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;
    case BENZE_CMD_KNOB_music:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_music);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;
    case BENZE_CMD_KNOB_TV:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TV);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;



    default:
        m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;
        break;
    }
}
/*
******************************************************
方向盘按键
******************************************************
*/
BYTE gKeySendfg;
void BWM_5S_CanBus_FetchSteerKeyInfo_Type4(CanRxMsg RxMessage)

{
    static vu8 uCKeepFlag = 0;
    static vu8 uRetKeepFlag = 0;
    static vu16 wBounceCnt = 0;


    if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE4_ID && RxMessage.DLC == 6))
    {
        return ;
    }
    //if(gCANBUSCnt)return;

    if(!g_stuCurPower.wOptionTimeout)
        g_stuCurPower.wOptionTimeout = 2000;//3000
    //initial
    m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;

    //
    /**************************FIrst pressed ************************************/

    if ((RxMessage.Data[3]==0x21&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x00)||(RxMessage.Data[3]==0x21&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x22&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
        //knob right
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBRT_PRESSED;
        gCarKeyEvent=1;
    }
    else if ((RxMessage.Data[3]==0x81&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))// X3
    {
        //if(g_stuSYSINFO.FS_select.car_type_onoff_id==0x04)
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBLT_PRESSED;
        gCarKeyEvent=1;
    }
    else if ((RxMessage.Data[3]==0x81&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x00)||(RxMessage.Data[3]==0x82&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBLT_PRESSED;
        gCarKeyEvent=1;
    }
#if 0
#ifdef	LF_X3_turnkey
    else if ((RxMessage.Data[3]==0x81&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))// X3
#else
    else if ((RxMessage.Data[3]==0x81&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x00)||(RxMessage.Data[3]==0x82&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
        //knob left
#endif
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBLT_PRESSED;
    }
#endif
    else if( (RxMessage.Data[3]==0x11&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x12&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
        //knob up
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBUP_PRESSED;
        gCarKeyEvent=1;
    }
    else if ((RxMessage.Data[3]==0x41&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x42&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
        //knob dn
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBDN_PRESSED;
        gCarKeyEvent=1;
    }
    else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xDE&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xDE&&RxMessage.Data[5]==0x01))
        //knob enter
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBENTER_PRESSED;
        gCarKeyEvent=1;
		if(!m_BMW_CAN.wLeftPushTimeout)
		{
			m_BMW_CAN.wLeftPushTimeout = 300;
		}
		LeftPushSendFlag = 1;
		
    }
    else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x04)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x04))
        //option
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_OPTION_PRESSED;
        gCarKeyEvent=1;
    }

    else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x02)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x02))
        //back
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_BACK_PRESSED;
        gCarKeyEvent=1;
    }


    else if( (RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x08)||(RxMessage.Data[3]==0x02&&RxMessage.Data[3]==0xC0&&RxMessage.Data[3]==0x08))
        //radio
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_RADIO_PRESSED;
        gCarKeyEvent=1;
    }
    else if( (RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x10)||(RxMessage.Data[3]==0x02&&RxMessage.Data[3]==0xC0&&RxMessage.Data[3]==0x10))
        //media
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_MEDIA_PRESSED;
        gCarKeyEvent=1;
    }
    else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x01))
        //menu
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_MENU_PRESSED;
        gCarKeyEvent=1;
        uPreVal=0xff;
    }
    else if ((RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x01))
        //menu keep
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_BACK_KEEP;
        gCarKeyEvent=1;
    }

    else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x40)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x40))
        //tel
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_TEL_PRESSED;
        gCarKeyEvent=1;
    }
    else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x20)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x20))
        //map
    {
        m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_MAP_PRESSED;
        gCarKeyEvent=1;
    }

    else
    {

        //-------------------------------------------------------
        wBounceCnt++;
        if (wBounceCnt >= 2)
        {
            uCKeepFlag = 0;
            uRetKeepFlag = 0;
            m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
            wBounceCnt = 0;
        }
        m_BMW_CAN.uKeyKeepCnt = 0;
        m_BMW_CAN.uKeyKeepInDepCnt=0;
        m_BMW_CAN.bKeyKeepOneTime = 0;

    }


    switch (m_BMW_CAN.uKeyID)
    {
    case BENZE_KEY_ALL_BOUNCED:
        uCKeepFlag = 0;
        uRetKeepFlag = 0;
        m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
        wBounceCnt = 0;
        m_BMW_CAN.uKeyKeepCnt = 0;
        m_BMW_CAN.bKeyKeepOneTime = 0;
        if(gKeySendfg)
        {
            gKeySendfg = 0;
            if(Sys.Main_Source==SRC_NAVI)
                LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_Release);//miller.tao20160122
        }

        if(gCarMenuKeyEvent)
        {
            gCarMenuKeyEvent =0;
            //m_BMW_CAN.uAuxSendSn=__SN0_;
        }
        break;
    /********************Process first pressed**********************************/
    case BENZE_KEY_KnobAround_KEY_KNOBRT_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data
            gKeySendfg=1;
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_RIGHT_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            //process keep data

        }
        break;


    case BENZE_KEY_KnobAround_KEY_KNOBLT_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data
            gKeySendfg=1;
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_LEFT_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_KnobAround_KEY_KNOBUP_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data
            gKeySendfg =1;
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_UP_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_KnobAround_KEY_KNOBDN_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data
            gKeySendfg= 1;
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_DN_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            //process keep data
        }
        break;

    case BENZE_KEY_KnobAround_KEY_KNOBENTER_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data
            gKeySendfg= 1;
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_ENTER_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            //process keep data
        }
        break;

    case BENZE_KEY_KnobAround_KEY_OPTION_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_OPT);
            //process first pressed data
            //AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_KnobAround_KEY_BACK_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data
            //AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_RET_PRESSED);
            gKeySendfg= 1;
            if(Sys.Main_Source==SRC_NAVI)
                LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_BACK);
            else
                LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_LEFT_PRESSED);
            // LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 50)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            gKeySendfg= 1;	//长按back键重启安卓
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_BACK_KEEP_ANDROID_REBOOT);
            //process keep data
        }
        break;

    case BENZE_KEY_KnobAround_KEY_BACK_KEEP:
        m_BMW_CAN.uKeyKeepInDepCnt++;
        if (m_BMW_CAN.uKeyKeepInDepCnt == 1)
            //bounce
        {
            //process first pressed data
            gKeySendfg= 1;
            LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_RET_KEEP);

        }
        else if (m_BMW_CAN.uKeyKeepInDepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepInDepCnt = 2;
            //process keep data
        }
        break;

    case BENZE_KEY_KnobAround_KEY_RADIO_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data
            //gKeySendfg= 1;
            LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_KnobAround_KEY_MEDIA_PRESSED: //
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_KnobAround_KEY_MENU_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            ; //process first pressed data
            gKeySendfg= 1;
            if(Sys.Main_Source==SRC_NAVI)
                LF_CanBus_SendControlCmd(BENZE_CMD_MENU_PRESSED);//

        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            gKeySendfg= 1;
            LF_CanBus_SendControlCmd(BENZE_CMD_MENU_PRESSED);//
            m_BMW_CAN.uKeyKeepCnt = 2;
        //    if(g_EMODE_SYSTEM == MODE_SYSTEM_IN_AUX1)
        //        m_RADAR.fDisp_statu=1;
            //process keep data
        }
        break;
    case BENZE_KEY_KnobAround_KEY_TEL_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data
            gKeySendfg= 1;
            //LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
            if(Sys.Main_Source==SRC_NAVI)
                LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CALL_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            gKeySendfg= 1;
            LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CALL_PRESSED);
            //process keep data
        }
        break;
    case BENZE_KEY_KnobAround_KEY_MAP_PRESSED:
        m_BMW_CAN.uKeyKeepCnt++;
        if (m_BMW_CAN.uKeyKeepCnt == 1)
            //bounce
        {
            //process first pressed data

            //if((g_stuSYSINFO.FS_select.car_type_onoff_id&0x02)==0x02)
            if(Sys.NaviType==1)//add on navi
                LF_CanBus_SendControlCmd(BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt = 2;
            //if((g_stuSYSINFO.FS_select.car_type_onoff_id&0x02)==0)
            if(Sys.NaviType==0)//car navi
                LF_CanBus_SendControlCmd(BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED);
            //process keep data
        }
        break;

    /********************Process keep pressed**********************************/

    default:
        m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
        m_BMW_CAN.uKeyKeepCnt = 0;
        m_BMW_CAN.bKeyKeepOneTime = 0;
        break;
    }
}
void BWM_5S_CanBus_FetchSteerKeyInfo_Type3(CanRxMsg RxMessage)
{
    static vu8 uPreAction = 0;
    static vu8 uPreVal = 0;

	
    if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE3_ID && RxMessage.DLC == 6))
    {
        return ;
    }
	if(!g_stuCurPower.wOptionTimeout)
        g_stuCurPower.wOptionTimeout = 2000;//3000
    //initial
    if(uPreAction==RxMessage.Data[2])//no action
    {
        return ;
    }
    //

    if ((RxMessage.Data[3]>uPreVal)||(RxMessage.Data[3]==0x00&&uPreVal==0xFF))
        //add
    {
        LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEINC_PRESSED);
    }
    else if ((RxMessage.Data[3] <uPreVal)||(RxMessage.Data[3]==0xFF&&uPreVal==0x00))
        //sub
    {
        LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEDEC_PRESSED);
    }

    uPreAction=RxMessage.Data[2];
    uPreVal=RxMessage.Data[3];

}

void BWM_5S_CanBus_FetchSteerKeyInfo_Type2(CanRxMsg RxMessage)
{
    if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE2_ID && RxMessage.DLC == 2))
    {
        return ;
    }

    //initial

	if(!g_stuCurPower.wOptionTimeout)
        g_stuCurPower.wOptionTimeout = 2000;//3000
    if (RxMessage.Data[0] ==0x80)
        //tune up
    {
        LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEINC_PRESSED);
    }
    else if (RxMessage.Data[0] ==0x7E)
        //tune dn
    {
        LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEDEC_PRESSED);
    }
    else if (RxMessage.Data[0] ==0x7F)
        //enter
    {
        LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_ENTER_PRESSED);
    }

}

void BWM_5S_CanBus_FetchSteerKeyInfo_Type1(CanRxMsg RxMessage)
{
    static vu8 uCKeepFlag = 0;
    static vu8 uRetKeepFlag = 0;
    static vu16 wBounceCnt = 0;
    BYTE i;

    m_BMW_CAN.RxMessage.DLC = RxMessage.DLC;
    if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE1_ID && RxMessage.DLC == 2))
    {
        return ;
    }
    for(i = 0; i < 2; i++)
        m_BMW_CAN.RxMessage.Data[i] = RxMessage.Data[i];
    //initial
    m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
    //
    if (RxMessage.Data[1] & 0x10)//0x40
        //mode,source
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_MODE_PRESSED;
    }
    else if (RxMessage.Data[1] & 0x01)
        //voice
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_VOICE_PRESSED;
    }
    else if (RxMessage.Data[0] & 0x01)
        //bt
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_BT_PRESSED;
    }

    else
    {

        //-------------------------------------------------------
        wBounceCnt++;
        if (wBounceCnt >= 2)
        {
            uCKeepFlag = 0;
            uRetKeepFlag = 0;
            m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
            wBounceCnt = 0;
        }
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;

    }


    switch (m_BMW_CAN.uKeyID2)
    {
    case BENZE_KEY_ALL_BOUNCED:
        uCKeepFlag = 0;
        uRetKeepFlag = 0;
        m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
        wBounceCnt = 0;
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;
        break;
    case BENZE_KEY_STEERING_RIGHT_KEY_MODE_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data

        }
        break;


    case BENZE_KEY_STEERING_RIGHT_KEY_VOICE_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            //LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
			  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_EJECT_CALL);//miller.tao20160728
		}
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_STEERING_RIGHT_KEY_BT_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            //LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
            LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_ANSWER_CALL);//miller.tao20160728
		}
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data
        }
        break;

    default:
        m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;
        break;
    }
}

/*
********************************************************
方向盘转角
********************************************************
*/
void BWM_5S_CanBus_FetchSteerAngleInfo(CanRxMsg RxMessage)
{

	if (RxMessage.StdId == BWM2S_CAN_STEERINGANGLE_STD_ID && RxMessage.DLC == 7)
        {
            m_BMW_CAN.benze_Steering_angle =(((RxMessage.Data[3] & 0xFF) << 8) | RxMessage.Data[2]); //方向盘角度信息
        }
/*
     if(gCarTypeCode==0xF1)
    {
        if (RxMessage.StdId == BWM2S_CAN_STEERINGANGLE_STD_ID && RxMessage.DLC == 7)
        {
            m_BMW_CAN.benze_Steering_angle =(((RxMessage.Data[3] & 0xFF) << 8) | RxMessage.Data[2]); //方向盘角度信息
        }
    }
    else
    {
        if (RxMessage.StdId == BWM5S_CAN_STEERINGANGLE_STD_ID && RxMessage.DLC == 8)
        {
            m_BMW_CAN.benze_Steering_angle =(((RxMessage.Data[1] & 0xFF) << 8) | RxMessage.Data[0]); //方向盘角度信息
        }
    }
    */
}
/*
***********************************************************
*handle the CMD from CAN BUS
*
***********************************************************
*/

void BWM_5S_CanBus_FetchCmdTask(void)
{
    BYTE action = 0;
    //BYTE event=0;
    //if(g_EMODE_SYSTEM!=MODE_SYSTEM_IN_NORMAL)
    // return;

    if (!m_BMW_CAN.wLoopTimer)
    {
        switch (LF_CanBus_FetchCmd())
        {
        case BENZE_CMD_KNOB_LEFT_PRESSED:
            action |= JOY_SHIFT_LEFT;
            if(Sys.Main_Source==SRC_NAVI)
            {
                if(gGPSInitOk)
                {
                    Panel_Key_Send(ZX_KEY_LEFT_PUSH);
                }
            }
			else if(Sys.Main_Source==SRC_TV)
			{
				if(gGPSInitOk)
				{
                    Panel_Key_Send(ZX_KEY_LEFT_PUSH);
				}
				Can_key_cmd = key_NAVI;
			}
			else
			{
				Can_key_cmd = key_left;
			}
           // else
           //     IPC_SendKeyMessage_MouseAction(action);
            //event=1;
            //Panel_Key_Send(ZX_KEY_LEFT_PUSH);//ZX_KEY_UP,//Miller.tao20160120
            break;
        case BENZE_CMD_KNOB_RIGHT_PRESSED:
            action |= JOY_SHIFT_RIGHT;
            if(Sys.Main_Source==SRC_NAVI)
            {
                if(gGPSInitOk)
                    Panel_Key_Send(ZX_KEY_RIGHT_PUSH);
            }
           // else
          //      IPC_SendKeyMessage_MouseAction(action);
            //event=1;
            //Panel_Key_Send(ZX_KEY_RIGHT_PUSH);//ZX_KEY_UP,Miller.tao20160120
            break;
        case BENZE_CMD_KNOB_TUNEDEC_PRESSED:


            action |= JOY_SHIFT_UP;
         //   IPC_SendKeyMessage_MouseAction(action);
            if(gGPSInitOk && Sys.Main_Source==SRC_NAVI)
                Panel_Key_Send(ZX_KEY_UP);//ZX_KEY_UP,Miller.tao20151126
            //event=1;

            //IPC_SendKeyMessage_ShortCuts(0x01,MSG_ACTION_PRESSED);
			Can_key_cmd= key_down;
            break;
        case BENZE_CMD_KNOB_TUNEINC_PRESSED:


            action |= JOY_SHIFT_DN;
        //    IPC_SendKeyMessage_MouseAction(action);
            if(gGPSInitOk && Sys.Main_Source==SRC_NAVI)
                Panel_Key_Send(ZX_KEY_DOWN);//ZX_KEY_DOWN,Miller.tao20151126
            //event=1;
            //IPC_SendKeyMessage_ShortCuts(0x02,MSG_ACTION_PRESSED);
            Can_key_cmd= key_up;

            break;
        case BENZE_CMD_KNOB_UP_PRESSED:
            action |= JOY_SHIFT_UP;
            //IPC_SendKeyMessage_MouseAction(action);
#if 1//miller.tao20160405
            if(Sys.Main_Source==SRC_NAVI)
            {
                if(gGPSInitOk)
                    Panel_Key_Send(ZX_KEY_DEC);//ZX_KEY_RIGHT_PUSH
            }
#else
            if(g_stuSYSINFO.sys_main.uMainMode==SYSTEM_MODE_IN_NAVI)
                Panel_Key_Send(ZX_KEY_UP);//ZX_KEY_RIGHT_PUSH
#endif
            //else
            //;//IPC_SendKeyMessage_ShortCuts(CMD_KEY_LEFT_UP,MSG_ACTION_PRESSED);
            //event=1;
            break;

        case BENZE_CMD_KNOB_DN_PRESSED:
            action |= JOY_SHIFT_DN;
            //IPC_SendKeyMessage_MouseAction(action);
#if 1//miller.tao20160405
            if(Sys.Main_Source==SRC_NAVI)
            {
                if(gGPSInitOk)
                    Panel_Key_Send(ZX_KEY_INC);//ZX_KEY_RIGHT_PUSH
            }
#else
            if(g_stuSYSINFO.sys_main.uMainMode==SYSTEM_MODE_IN_NAVI)
                Panel_Key_Send(ZX_KEY_DOWN);//ZX_KEY_RIGHT_PUSH
#endif
            //else
            //;//IPC_SendKeyMessage_ShortCuts(CMD_KEY_LEFT_DN,MSG_ACTION_PRESSED);
            //event=1;
            break;

        case BENZE_CMD_KNOB_ENTER_PRESSED:

        //    IPC_SendKeyMessage_ENTER(MSG_ACTION_BOUNCE);
            if(gGPSInitOk && Sys.Main_Source==SRC_NAVI)
            {
                Panel_Key_Send(ZX_KEY_ENTER);//ZX_KEY_ENTER,Miller.tao20151126
            }
			//IPC_SendKeyMessage_ShortCuts(0x05,MSG_ACTION_PRESSED);
            // event=1;
            Can_key_cmd= key_enter;
            break;
        case BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED:

            //if(g_stuSYSINFO.sys_main.uMainMode!=SYSTEM_MODE_IN_CAR_MEDIA)
            //IPC_SendKeyMessage_ShortCuts(0x09,MSG_ACTION_BOUNCE);
        //    IPC_SendKeyMessage_Media(MSG_ACTION_BOUNCE);
       		Can_key_cmd=key_media;
            //event=1;
            break;
        case BENZE_CMD_STEERING_RIGHT_KEY_RET_KEEP:
            if(Sys.Main_Source==SRC_NAVI)
            {
                if(gGPSInitOk)
                    Panel_Key_Send(ZX_KEY_MENU);
            }
            else
            {
               // if(gGPSInitOk)
                 //   IPC_SendKeyMessage_Menu(MSG_ACTION_PRESSED);
            }
            //IPC_SendKeyMessage_Media_Sw(MSG_ACTION_PRESSED);
            //event=1;
            break;
        case BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED:
            if(Sys.Main_Source==SRC_NAVI)
            {
                if(gGPSInitOk)
                {
                    Panel_Key_Send(ZX_KEY_NAVI);
                    gNaviStatus=4;
                }
            }
            else
            {
                if(gGPSInitOk)
                {
                    Panel_Key_Send(ZX_KEY_NAVI);
                    gNaviStatus=4;

         //           IPC_SendKeyMessage_NAVI(MSG_ACTION_PRESSED);
         			Can_key_cmd=key_NAVI;
                }
            }
            //IPC_SendKeyMessage_ShortCuts(0x09,MSG_ACTION_PRESSED);
            //event=1;
            break;

        case BENZE_CMD_MENU_PRESSED:
            //if(g_stuSYSINFO.uOSDMainMode==MAIN_OSD_MODE_IN_DISAPP)
        {
            if(Sys.Main_Source==SRC_NAVI)
            {
                if(gGPSInitOk)
                {
                    if(gCarMenuKeyEvent==0)
                        Panel_Key_Send(ZX_KEY_MENU);

                //    gPIP_Status.PIP_Switch=0;
                    gNaviStatus=0;
                }
            }
			else if(Sys.Main_Source==SRC_TV)
			{
				Can_key_cmd = key_NAVI;
			}
            else
            {
                if(gGPSInitOk)
                {
                    Panel_Key_Send(ZX_KEY_MENU);
                    //gCANBUSCnt=50;
#if 0
                    IPC_SendKeyMessage_NAVI(MSG_ACTION_PRESSED);
#else
                //    gPIP_Status.PIP_Switch=0;
                    gNaviStatus=0;
					Can_key_cmd=key_NAVI;

                //    g_stuSYSSRC.uReqFlag =1;
                    gCarMenuKeyEvent = 1;
                //    g_stuSYSSRC.CurSrc=SYSTEM_MODE_IN_NAVI;//SYSTEM_MODE_IN_CAR_MEDIA;
                    //IPC_SendKeyMessage_Menu(MSG_ACTION_PRESSED);
#endif
                }
            }
            //IPC_SendKeyMessage_ShortCuts(0x8A,MSG_ACTION_PRESSED);
        }
            //event=1;
        break;
        case BENZE_CMD_STEERING_RIGHT_KEY_CALL_PRESSED:
            Panel_Key_Send(ZX_KEY_TEL);//millertao20160412
            //event=1;
            if(Sys.Main_Source!=SRC_NAVI)
            {
                // g_stuSYSSRC.uReqFlag =1;
                //  g_stuSYSSRC.CurSrc=SYSTEM_MODE_IN_NAVI;
                Can_key_cmd=key_NAVI;
            }
            break;
        case BENZE_CMD_KNOB_DVD:
        //    Ipc_Send_SrcReq(SYSTEM_MODE_IN_DVD);
            //event=1;
            break;
        case BENZE_CMD_KNOB_vedio:
       //     Ipc_Send_SrcReq(SYSTEM_MODE_IN_AUX);
            //event=1;
            break;
        case BENZE_CMD_KNOB_music:
       //     Ipc_Send_SrcReq(SYSTEM_MODE_IN_mp5_music);
            //event=1;
            break;
        case BENZE_CMD_KNOB_TV:
       //     Ipc_Send_SrcReq(SYSTEM_MODE_IN_TV);
            //event=1;
            break;

        case BENZE_CMD_KNOB_OPT:
            if(gGPSInitOk)
                Panel_Key_Send(ZX_KEY_OPTION);
            //event=1;
            break;
        case BENZE_CMD_KNOB_BACK:
            if(gNaviStatus!=0) //不在主界面
            {
				if(gGPSInitOk )
				{
	                if(Sys.Main_Source==SRC_NAVI)
	                {
	                    Panel_Key_Send(ZX_KEY_BACK);
	                }
					else if(Sys.Main_Source==SRC_TV)
					{
						if(gGPSInitOk)
						{
		                    Panel_Key_Send(ZX_KEY_BACK);
						}
						Can_key_cmd = key_NAVI;
					}
				}
            }
            //event=1;
            break;
        case BENZE_CMD_KNOB_Release:
            if(gGPSInitOk)
                Panel_Key_Send(ZX_KEY_Invalide);
            break;
		case BENZE_CMD_KNOB_ANSWER_CALL:
            if(gGPSInitOk)
            {
                Sys_BTCall_Send(0);//Panel_Key_Send(ZX_KEY_Invalide);
            }
            break;
        case BENZE_CMD_KNOB_EJECT_CALL:
            if(gGPSInitOk)
            {
                Sys_BTCall_Send(2);//Panel_Key_Send(ZX_KEY_Invalide);
            }

            break;	
		case BENZE_CMD_KNOB_BACK_KEEP_ANDROID_REBOOT:
			BackLight(0);
			SYS_PowerOff();
			Delay_1ms(4000);
			SoftReset();
			break;
        default:
            break;
        }

        if(gCarKeyEvent)
        {
            gCarKeyEvent=0;
#if 1//miller.tao20160317

            if(System_Power_Status==Powerwork)
            {
                if(Sys.bOffScreenSwitch)
                {
                    Sys.bOffScreenSwitch =0;
					if(gGPSInitOk)
                	{
                    	BL_Control_Send(1);
					}
					BackLight(1);
                }
					
            }
#endif
        }
		if(m_BMW_CAN.Car_TFT_flag==1)
		{
			m_BMW_CAN.Car_TFT_flag=0;
            Sys.bOffScreenSwitch =1;
			if(gGPSInitOk)
            {
            	BL_Control_Send(0);
			}
			BackLight(0);
		}
        m_BMW_CAN.wLoopTimer = 10;
    }
}

//工作信息
void BWM_5S_CanBus_work_data_analytic(CanRxMsg RxMessage)
{
    static u8 uPreMediaStatus, uPrePreMediaStatus;
    static u8 uPreAirStatus, uPrePreAirStatus;
    uPreMediaStatus = uPreMediaStatus;
    uPrePreMediaStatus = uPrePreMediaStatus;
    uPreAirStatus = uPreAirStatus;
    uPrePreAirStatus = uPrePreAirStatus;
    if (RxMessage.StdId == BWM5S_CAN_POWER_STD_ID && RxMessage.DLC == 8) //ACC INFO
    {
#if 0 //Miller.Tao20141014
        if(RxMessage.Data[1]&0x01)
        {
            //off

#if 0 //Miller.tao
            m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
            m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_ON;
            m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
            g_stuSYSINFO.wPowerOnByCanTimer=2000;
#else

#endif
        }
        else
#endif
        {
            //on
#if 1 //Miller.tao
            m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
            m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;
            m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
            g_stuCurPower.wPowerOnByCanTimer2=2000;
#else

#endif
        }


    }

    if (RxMessage.StdId == BWM5S_CAN_POWER2_STD_ID && RxMessage.DLC == 8) //ACC INFO
    {
#if 0 //Miller.Tao20141014
        if(RxMessage.Data[1]&0x01)
        {
            //off

#if 0 //Miller.tao
            m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
            m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_ON;
            m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
            g_stuSYSINFO.wPowerOnByCanTimer=2000;
#else

#endif
        }
        else
#endif
        {
            //on
#if 1 //Miller.tao,总开关

            m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;//车上电
            //m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
            g_stuCurPower.wPowerOnByCanTimer=2000;
#else

#endif
        }


    }

#if 0
    if(RxMessage.StdId == BWM5S_CAN_POWER3_STD_ID && RxMessage.DLC == 2)
    {
        if(RxMessage.Data[0]==0)
        {
            if(m_BMW_CAN.AccPwr==SYSTEM_POWER_OFF)
            {
                if(m_BMW_CAN.AudioPwr == SYSTEM_POWER_ON)
                    m_BMW_CAN.AudioPwr =SYSTEM_POWER_OFF;
                else
                    m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
            }
#if 0
            m_BMW_CAN.AudioPwr=SYSTEM_POWER_ON;
            if(m_BMW_CAN.benze_Pwr_acc_Aux == SYSTEM_POWER_ON)//acc on
            {
                //m_BMW_CAN.AccPwr = SYSTEM_POWER_OFF;
                m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_OFF;
            }
            else if(m_BMW_CAN.benze_Pwr_acc_Aux == SYSTEM_POWER_OFF)
            {
                //m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
                m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_ON;
            }

            m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;//车上电
            m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
#endif
            //gSYSOpenMode = 1;
        }

    }
#endif

    if(RxMessage.StdId == BWM5S_CAN_POWER4_STD_ID && RxMessage.DLC == 8)
    {
        if(RxMessage.Data[0]==0x27)
            m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
        else if(RxMessage.Data[0]==0x08)
            m_BMW_CAN.AudioPwr =SYSTEM_POWER_OFF;
#if 0
        m_BMW_CAN.AudioPwr=SYSTEM_POWER_ON;
        if(m_BMW_CAN.benze_Pwr_acc_Aux == SYSTEM_POWER_ON)//acc on
        {
            //m_BMW_CAN.AccPwr = SYSTEM_POWER_OFF;
            m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_OFF;
        }
        else if(m_BMW_CAN.benze_Pwr_acc_Aux == SYSTEM_POWER_OFF)
        {
            //m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
            m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_ON;
        }

        m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;//车上电
        m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
#endif

    }

    if (RxMessage.StdId == BMW5S_CAN_CarDoor_STD_ID && RxMessage.DLC == 8) //radar INFO
    {
#if 0
        m_RADAR.uRear_Left    =(RxMessage.Data[4]>>4)&0x0F;
        m_RADAR.uRear_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
        m_RADAR.uRear_MidRight=(RxMessage.Data[2]>>4)&0x0F;
        m_RADAR.uRear_Right   =(RxMessage.Data[1]>>4)&0x0F;
#else
        m_CarDoorInfo.uFront_Left    =(RxMessage.Data[2]&0x01);
        m_CarDoorInfo.uFront_Right =((RxMessage.Data[2])&0x10)>>4;
        m_CarDoorInfo.uRear_Left=(RxMessage.Data[2]&0x04)>>2;
        m_CarDoorInfo.uRear_Right   =(RxMessage.Data[2]&0x40)>>6;
        m_CarDoorInfo.rear =(RxMessage.Data[4]);
        m_CarDoorInfo.SendFlag = 1;
#endif


    }

    if (RxMessage.StdId == BMW5S_CAN_CarSpeed_STD_ID && RxMessage.DLC == 7) //radar INFO
    {

        m_CarSpeedInfo.Hi_Speed = (RxMessage.Data[3]&0x0F);
        m_CarSpeedInfo.Lo_Speed = RxMessage.Data[2];
        m_CarSpeedInfo.car_speed=m_CarSpeedInfo.Hi_Speed*256+m_CarSpeedInfo.Lo_Speed;
		CarInfo.CarSpeed_5S= m_CarSpeedInfo.car_speed/10;
		m_CarSpeedInfo.SendFlag = 1;
    }
	
	if(RxMessage.StdId == BMW5S_CAN_PC_SPEED_STD_ID&& RxMessage.DLC == 7)
	{
		CarInfo.CARSPEED.CarSpeed = (RxMessage.Data[1]&0x0F)*25.6;
		CarInfo.CARSPEED.CarSpeed += RxMessage.Data[0]*0.1;
	}
	if(RxMessage.StdId == BMW5S_CAN_OilConsumption_STD_ID&& RxMessage.DLC == 7)
	{
		CarInfo.OILCONSUMPTION.OilConsumption = ((RxMessage.Data[1]&0xf0)>>4)*0.1;
		CarInfo.OILCONSUMPTION.OilConsumption += RxMessage.Data[2]*1.6;
	}
	if(RxMessage.StdId == BMW5S_CAN_SURPLLUS_KIL_STD_ID&& RxMessage.DLC == 8)
	{
		CarInfo.SurplusKil = (RxMessage.Data[2])<<8;
		CarInfo.SurplusKil += (RxMessage.Data[1]&0xf0);
		CarInfo.SurplusKil = CarInfo.SurplusKil >>4;
	}
	

    if (RxMessage.StdId == BMW5S_CAN_CarMiles_STD_ID && RxMessage.DLC == 8) //radar INFO
    {
		/*
        m_CarMilesInfo.Mile1Byte = RxMessage.Data[0];
        m_CarMilesInfo.Mile2Byte = RxMessage.Data[1];
        m_CarMilesInfo.Mile3Byte = 0;
        m_CarMilesInfo.Mile4Byte = 0;
        m_CarMilesInfo.SendFlag = 1;
        */
        CarInfo.TotalMil = RxMessage.Data[0];
		CarInfo.TotalMil += RxMessage.Data[1]<<8;
		CarInfo.TotalMil += RxMessage.Data[2]<<16;
	//	CarInfo.TotalMil += RxMessage.Data[3]<<24;
    }

    if (RxMessage.StdId == BWM5S_CAN_RADAR_VAL_STD_ID && RxMessage.DLC == 6) //radar INFO
    {
#if 0
        m_RADAR.uRear_Left    =(RxMessage.Data[4]>>4)&0x0F;
        m_RADAR.uRear_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
        m_RADAR.uRear_MidRight=(RxMessage.Data[2]>>4)&0x0F;
        m_RADAR.uRear_Right   =(RxMessage.Data[1]>>4)&0x0F;
#else
        m_RADAR.uRear_Left    =(RxMessage.Data[4]>>4)&0x0F;
        m_RADAR.uRear_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
        m_RADAR.uRear_MidRight=(RxMessage.Data[2]>>4)&0x0F;
        m_RADAR.uRear_Right   =(RxMessage.Data[1]>>4)&0x0F;

		m_RADAR.uRear_Left = m_RADAR.uRear_MidLeft*16+m_RADAR.uRear_Left;
		m_RADAR.uRear_Right = m_RADAR.uRear_MidRight*16+m_RADAR.uRear_Right;

		if(m_RADAR_Bk.uRear_Left != m_RADAR.uRear_Left)
		{
			m_RADAR_Bk.uRear_Left = m_RADAR.uRear_Left;
			m_RADAR.fDisp = 1;
		}
		
//		m_RADAR.uRear_Right = m_RADAR.uRear_MidRight*15+m_RADAR.uRear_Right;
		if(m_RADAR_Bk.uRear_Right != m_RADAR.uRear_Right)
		{
			m_RADAR_Bk.uRear_Right = m_RADAR.uRear_Right;
			m_RADAR.fDisp = 1;
		}
#endif
    }

    if (RxMessage.StdId == BWM5S_CAN_RADAR_VAL_Front_STD_ID && RxMessage.DLC == 6) //radar INFO
    {
#if 0
        m_RADAR.uRear_Left    =(RxMessage.Data[4]>>4)&0x0F;
        m_RADAR.uRear_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
        m_RADAR.uRear_MidRight=(RxMessage.Data[2]>>4)&0x0F;
        m_RADAR.uRear_Right   =(RxMessage.Data[1]>>4)&0x0F;
#else
        m_RADAR.uFront_Left    =(RxMessage.Data[4]>>4)&0x0F;
        m_RADAR.uFront_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
        m_RADAR.uFront_MidRight=(RxMessage.Data[2]>>4)&0x0F;
        m_RADAR.uFront_Right   =(RxMessage.Data[1]>>4)&0x0F;
		m_RADAR.uFront_Left = m_RADAR.uFront_MidLeft*16+m_RADAR.uFront_Left;
		m_RADAR.uFront_Right = m_RADAR.uFront_MidRight*16+m_RADAR.uFront_Right;

		if(m_RADAR_Bk.uFront_Left != m_RADAR.uFront_Left)
		{
			m_RADAR_Bk.uFront_Left = m_RADAR.uFront_Left;
			m_RADAR.fDisp = 1;
		}
//		m_RADAR.uFront_Right = m_RADAR.uFront_MidRight*15+m_RADAR.uFront_Right;
		if(m_RADAR_Bk.uFront_Right != m_RADAR.uFront_Right)
		{
			m_RADAR_Bk.uFront_Right = m_RADAR.uFront_Right;
			m_RADAR.fDisp = 1;
		}
#endif


    }

#if 1//Miller.Tao2014-09-10
    if (RxMessage.StdId == BWM5S_CAN_RADAR_DISP_STD_ID && RxMessage.DLC == 2)
    {
        //ID:001
        //DCL:
        m_BMW_CAN.RxMessage.Data[0]=RxMessage.Data[0];
        m_BMW_CAN.RxMessage.Data[1]=RxMessage.Data[1];
        m_BMW_CAN.RxMessage.Data[2]=RxMessage.Data[2];
        m_BMW_CAN.RxMessage.Data[3]=RxMessage.Data[3];
        m_BMW_CAN.RxMessage.Data[4]=RxMessage.Data[4];
        m_BMW_CAN.RxMessage.Data[5]=RxMessage.Data[5];
        m_BMW_CAN.RxMessage.Data[6]=RxMessage.Data[6];
        m_BMW_CAN.RxMessage.Data[7]=RxMessage.Data[7];

        if (RxMessage.Data[0] & 0x02)
        {
#if !COMPILE_BACK_BY_STALL
   //         g_stuBACKCNTR.u8CurState = CAM_OFF;
   //         g_stuPARKCNTR.u8CurState = PARK_OFF;
      //      POWER_RearVideoOff();
#endif
          //  m_RADAR.fDisp = 0;
			m_RADAR.power_on_statu=0;

        }
        else
        {
#if !COMPILE_BACK_BY_STALL
   //         g_stuBACKCNTR.u8CurState = CAM_ON;
   //         g_stuPARKCNTR.u8CurState = PARK_OFF;
   //         POWER_RearVideoOn();
#endif
        //    m_RADAR.fDisp = 1;
        	if(m_RADAR.power_on_statu == 0 && Sys.FS_select.car_suit_set_id.autoradar == 1)
        	{
	        	if(Sys.Main_Source!=SRC_CarMedia && Sys.Main_Source!=SRC_CAM)
	            {
	                Can_key_cmd=key_media;
	        	}
        	}
			m_RADAR.power_on_statu=1;

        }



    }
#endif
#if !COMPILE_SYS_TIMER_BY_GPS
    if (RxMessage.StdId == BMW5S_CAN_TIMER_STD_ID && RxMessage.DLC == 8)
    {
        //ID:39F
        //DCL:
        m_BMW_CAN.Year_data   = (RxMessage.Data[5]-0xD0)+2000;
        m_BMW_CAN.Month_data  = RxMessage.Data[4]>>4;  
        m_BMW_CAN.day_data	  = RxMessage.Data[3] ;
		
        m_BMW_CAN.Hour_data = RxMessage.Data[0]; //hour
        m_BMW_CAN.Minute_data = RxMessage.Data[1]; //时间数据
        m_BMW_CAN.Sec_data = RxMessage.Data[2]; //时间数据

    }
#endif
	#if 1
    if (RxMessage.StdId == BWM5S_CAN_BT_statu_ID&& RxMessage.DLC == 8)
    {
        if(RxMessage.Data[0]==0x44 || RxMessage.Data[0]==0x22)//3S=0x22
        {
            if(g_stuSYSSRC.uCarPhoneFlag==0)
            {
				/*
                if(g_stuSYSINFO.sys_main.uMainMode!=SYSTEM_MODE_IN_CAR_MEDIA)
                {
                    g_stuSYSSRC.CurSrc = SYSTEM_MODE_IN_CAR_MEDIA;
                    g_stuSYSSRC.uPreSrc = g_stuSYSINFO.sys_main.uMainMode;
                    g_stuSYSSRC.uReqFlag =1;
                }
                else if(g_stuSYSINFO.sys_main.uMainMode==SYSTEM_MODE_IN_CAR_MEDIA)
                {
                    g_stuSYSSRC.CurSrc = SYSTEM_MODE_IN_CAR_MEDIA;
                    g_stuSYSSRC.uPreSrc = g_stuSYSINFO.sys_main.uMainMode;
                }
                */
                Can_key_cmd=key_media;
            }
            g_stuSYSSRC.uCarPhoneFlag = 1;
        }
        else if(RxMessage.Data[0]==0x11)//蓝牙挂断
        {
            if(g_stuSYSSRC.uCarPhoneFlag)
            {
				/*
                if(g_stuSYSINFO.sys_main.uMainMode==SYSTEM_MODE_IN_CAR_MEDIA)
                {
                    g_stuSYSSRC.CurSrc = g_stuSYSSRC.uPreSrc;
                    if(g_stuSYSSRC.CurSrc!=SYSTEM_MODE_IN_CAR_MEDIA)
                        g_stuSYSSRC.uReqFlag =1;
                }
                */
                if(Sys.Main_Source==SRC_CarMedia)
		        {
		            if(Sys.Pre_Main_Source==SRC_NAVI)
		            {
						Can_key_cmd=key_NAVI;
					}
		        }
            }
            g_stuSYSSRC.uCarPhoneFlag=0;
        }
    }
	#endif

    if (RxMessage.StdId == BMW5S_CAN_LeftFrontWin_STD_ID && RxMessage.DLC == 3) //car win INFO
    {
        if(RxMessage.Data[1]==0xFC)//closed
            Sys_CarWinInfo.FrontLeftWin = 0;
        else
            Sys_CarWinInfo.FrontLeftWin = 1;	//open

        //m_BMW_CAN.WinStateRecvFlag = 0;
        if(m_BMW_CAN.WinStateRecvFlagFL)
            m_BMW_CAN.WinStateRecvFlagFL = 0;
    }

    if (RxMessage.StdId == BMW5S_CAN_LeftRearWin_STD_ID && RxMessage.DLC == 3) //car win INFO
    {
        if(RxMessage.Data[1]==0xF0)//closed
            Sys_CarWinInfo.RearLeftWin = 0;
        else
            Sys_CarWinInfo.RearLeftWin = 1;	//open

        //m_BMW_CAN.WinStateRecvFlag = 0;
        if(m_BMW_CAN.WinStateRecvFlagRL)
            m_BMW_CAN.WinStateRecvFlagRL = 0;
    }

    if (RxMessage.StdId == BMW5S_CAN_RightFrontWin_STD_ID && RxMessage.DLC == 3) //car win INFO
    {
        if(RxMessage.Data[1]==0xFC)//closed
            Sys_CarWinInfo.FrontRightWin = 0;
        else
            Sys_CarWinInfo.FrontRightWin = 1;	//open

        //m_BMW_CAN.WinStateRecvFlag =0;
        if(m_BMW_CAN.WinStateRecvFlagFR)
            m_BMW_CAN.WinStateRecvFlagFR = 0;
    }


    if (RxMessage.StdId == BMW5S_CAN_RightRearWin_STD_ID && RxMessage.DLC == 3) //car win INFO
    {
        if(RxMessage.Data[1]==0xF0)//closed
            Sys_CarWinInfo.RearRightWin = 0;
        else
            Sys_CarWinInfo.RearRightWin = 1;	//open
        //m_BMW_CAN.WinStateRecvFlag = 0;
        if( m_BMW_CAN.WinStateRecvFlagRR)
            m_BMW_CAN.WinStateRecvFlagRR = 0;
    }

    if (RxMessage.StdId == BMW5S_CAN_SkyWin_STD_ID && RxMessage.DLC == 7) //car win INFO
    {
        if(RxMessage.Data[3]==0x00)//closed
            Sys_CarWinInfo.SkyWin = 0;
        else
            Sys_CarWinInfo.SkyWin = 1;	//open

        if(m_BMW_CAN.WinStateRecvFlag)//sky
            m_BMW_CAN.WinStateRecvFlag =0;
    }

    if (RxMessage.StdId == BMW5S_CAN_Lock_STD_ID && RxMessage.DLC == 8) //ACC INFO
    {
        //if(RxMessage.Data[0]==0x22)
        if(RxMessage.Data[2]==0x04)
        {
            //g_stuSYSSRC.carlockflag = 0;
            //if(Sys_CarWinInfo.FrontLeftWin == 1|| Sys_CarWinInfo.RearLeftWin == 1||Sys_CarWinInfo.FrontRightWin==1||Sys_CarWinInfo.RearRightWin == 1||Sys_CarWinInfo.SkyWin==1)
            if(m_CarDoorInfo.uFront_Left==1||m_CarDoorInfo.uFront_Right==1||m_CarDoorInfo.uRear_Left==1||m_CarDoorInfo.uRear_Right==1||m_CarDoorInfo.rear==1)
            {
                m_BMW_CAN.AlarmFlag = 0;
                m_BMW_CAN.AlarmCnt = 0;
            }
            else
            {
                if( m_BMW_CAN.LockState==0)
                {
                    g_stuSYSSRC.carlockflag = 0;
                    m_BMW_CAN.LockState = 1;
                    Sys_CarWinInfo.RetryFlag = 0;
                    m_BMW_CAN.LockAbort = 0;
                    m_BMW_CAN.WinStateRecvFlagRL =1;
                    m_BMW_CAN.WinStateRecvFlagRR =1;
                    m_BMW_CAN.WinStateRecvFlag = 1;
                    //g_stuSYSINFO.wLockWinTimeout = 28000;//28000,18000,12000//bmw5s
                    wLockWinTimeout = 36000;//28000,18000,12000//X3
                }
            }
        }
        else if(RxMessage.Data[2]==0x01)
        {
            //m_BMW_CAN.LockAbort = 1;
            g_stuSYSSRC.carlockflag = 0;
            m_BMW_CAN.LockState=0;
            g_stuSYSSRC.car_keylockflag=1;
        }
    }

    if(g_stuSYSSRC.carlockflag)
    {
        if(Sys_CarWinInfo.FrontLeftWin == 1|| Sys_CarWinInfo.RearLeftWin == 1||Sys_CarWinInfo.FrontRightWin==1||Sys_CarWinInfo.RearRightWin == 1||Sys_CarWinInfo.SkyWin==1)
        {
            if(Sys_CarWinInfo.RetryFlag==0)
            {
                m_BMW_CAN.LockState = 1;
                Sys_CarWinInfo.RetryFlag = 1;
            }
        }
    }
	
    if (RxMessage.StdId == BMW5S_CAN_TFT_Status_STD_ID && RxMessage.DLC == 8)
    {
        if(RxMessage.Data[2]==0x01)
        {
			m_BMW_CAN.UnCarSRC_TFT_flag = 1;
			if(!m_BMW_CAN.wLeftPushTimeout)
			{
				m_BMW_CAN.wLeftPushTimeout = 300;
			}
			if(Sys.bOffScreenSwitch == 0)
			{
				if(Sys.Main_Source==SRC_CarMedia)
		        {
					m_BMW_CAN.Car_TFT_flag=1;
				}
			}
			/*
            if(m_BMW_CAN.Car_TFT_flag == 0)
            {
                m_BMW_CAN.Car_TFT_send_flag=1;
                m_BMW_CAN.Car_TFT_flag=1;

            }
            m_BMW_CAN.Car_TFT_autolight_flag=1;
            */
        }
        else
        {
			m_BMW_CAN.UnCarSRC_TFT_flag = 0;
			/*
            if(m_BMW_CAN.Car_TFT_flag)
            {
                m_BMW_CAN.Car_TFT_send_flag=1;
                if(m_BMW_CAN.Car_TFT_autolight_flag==0)
                {
                    m_BMW_CAN.Car_TFT_flag=0;
                }
            }
			*/
            //m_BMW_CAN.Car_TFT_autolight_flag=1;
        }
    }

	if(RxMessage.StdId == BMW5S_CAN_Turn_LIGHT_STD_ID && RxMessage.DLC == 2)
	{	//左转向 右转向
		if((RxMessage.Data[0]&0x30)==0x10 || (RxMessage.Data[0]&0x30)==0x20)
        {
		}
	}

}	
    void BMW_5S_Power_On(CanRxMsg RxMessage)
    {
        if (RxMessage.StdId == BWM5S_CAN_POWER_STD_ID && RxMessage.DLC == 8)
        {
            m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;
            //m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
            //m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;

        }
        else if (RxMessage.StdId == BWM5S_CAN_POWER2_STD_ID && RxMessage.DLC == 8) //ACC INFO

        {
            m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;
            //m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
            m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;

        }
    }
#endif

#if LF_CAN_TYPE == AudiA4CAN 
void Audi_A4_CanBus_Config(void)
{
    CAN_InitTypeDef CAN_InitStructure;
    CAN_FilterInitTypeDef CAN_FilterInitStructure;
    /* CAN register init */
    // CAN_DeInit();
    /* CAN1 and CAN2 register init */
    CAN_DeInit(CAN1);
    CAN_DeInit(CAN2);


    /* Struct init*/
    CAN_StructInit(&CAN_InitStructure);
    
		/* CAN cell init */
		CAN_InitStructure.CAN_TTCM = DISABLE; //禁止时间触发通信模式
		CAN_InitStructure.CAN_ABOM = DISABLE;
		CAN_InitStructure.CAN_AWUM = DISABLE;
		CAN_InitStructure.CAN_NART = DISABLE;
		//CAN报文只被发送1次，不管发送的结果如何（成功、出错或仲裁丢失）
		CAN_InitStructure.CAN_RFLM = DISABLE;
		CAN_InitStructure.CAN_TXFP = DISABLE;
		CAN_InitStructure.CAN_Mode = CAN_Mode_Silent;
	
		CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
		CAN_InitStructure.CAN_BS1 = CAN_BS1_13tq; //1--16
		CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq; //1--8
		CAN_InitStructure.CAN_Prescaler = 20;
		////(pclk1/((1+8+7)*16)) = 32Mhz/16/20 = 100Kbits
		//CAN_Init(&CAN_InitStructure);
	
		/*Initializes the CAN1	and CAN2 */
		CAN_Init(CAN1, &CAN_InitStructure);
	
	
		/* CAN cell init */
		CAN_InitStructure.CAN_TTCM = DISABLE; //禁止时间触发通信模式
		CAN_InitStructure.CAN_ABOM = DISABLE;
		CAN_InitStructure.CAN_AWUM = DISABLE;
		CAN_InitStructure.CAN_NART = DISABLE;
		//CAN报文只被发送1次，不管发送的结果如何（成功、出错或仲裁丢失）
		CAN_InitStructure.CAN_RFLM = DISABLE;
		CAN_InitStructure.CAN_TXFP = DISABLE;
		CAN_InitStructure.CAN_Mode = CAN_Mode_Silent;
	
		CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
		CAN_InitStructure.CAN_BS1 = CAN_BS1_13tq; //1--16
		CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq; //1--8
		CAN_InitStructure.CAN_Prescaler = 4;
		////(pclk1/((1+8+7)*16)) = 32Mhz/16/4 = 500Kbits
		CAN_Init(CAN2, &CAN_InitStructure);
		
		CAN_FilterInitStructure.CAN_FilterNumber = 1; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_STEER_KEY_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
	
		
		CAN_FilterInitStructure.CAN_FilterNumber = 2; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_POWER_STD3_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
		
		CAN_FilterInitStructure.CAN_FilterNumber = 3; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_POWER_STD2_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
		
		CAN_FilterInitStructure.CAN_FilterNumber = 4; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_POWER_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
		
		CAN_FilterInitStructure.CAN_FilterNumber = 5; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_RADAR_DISP_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
		
		CAN_FilterInitStructure.CAN_FilterNumber = 6; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_AIR_DISP_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
		
		CAN_FilterInitStructure.CAN_FilterNumber = 7; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_RADAR_INFO_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
	
		
		CAN_FilterInitStructure.CAN_FilterNumber = 8; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_TIMER_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
		
		CAN_FilterInitStructure.CAN_FilterNumber = 9; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_SOURCE1_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
		
		CAN_FilterInitStructure.CAN_FilterNumber = 10; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_SOURCE2_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
		
		CAN_FilterInitStructure.CAN_FilterNumber = 11; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_MUTE_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
		
		  
		CAN_FilterInitStructure.CAN_FilterNumber = 14; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_STALLS_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
	
		CAN_FilterInitStructure.CAN_FilterNumber = 15; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_STEERINGANGLE_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数

		CAN_FilterInitStructure.CAN_FilterNumber = 16; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_QUICK_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数		

		CAN_FilterInitStructure.CAN_FilterNumber = 17; //选择过滤器7
		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
		CAN_FilterInitStructure.CAN_FilterIdHigh = AUD_CAN_angle_leftright_STD_ID << 5;
		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
	
		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数				
		//-------------------------------------------------------------
	
		//CAN_SlaveStartBank(10);//Miller.Tao20141029
		
		/* CAN FIFO0 message pending interrupt enable */
		CAN_ITConfig(CAN1, CAN_IT_FMP0 | CAN_IT_FF0, ENABLE);
		/* CAN FIFO0 message pending interrupt enable */
		CAN_ITConfig(CAN2, CAN_IT_FMP0, ENABLE);


}


void AudiCanA4_FetchSteerKeyInfo(CanRxMsg RxMessage)
{
    static vu8 uCKeepFlag = 0;
    static vu8 uRetKeepFlag = 0;
    static vu16 wBounceCnt = 0;
    BYTE i;

    m_BMW_CAN.RxMessage.DLC = RxMessage.DLC;
    if (!(RxMessage.StdId == AUD_CAN_STEER_KEY_STD_ID && RxMessage.DLC == 4))
    {
        return ;
    }
    for(i = 0; i < 4; i++)
        m_BMW_CAN.RxMessage.Data[i] = RxMessage.Data[i];
    //initial
    m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
    //
    if (RxMessage.Data[0] & 0x01)
        //mode
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_LEFT_KEY_MODE_PRESSED;
    }
    else if (RxMessage.Data[0] & 0x10)
        //knob enter
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_LEFT_KEY_KNOB_PRESSED;
    }
    else if ((RxMessage.Data[2] & 0x0F) == 0x01)
        //knob UP
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_LEFT_KEY_KNOBUP_PRESSED;
    }
    else if ((RxMessage.Data[2] & 0x0F) == 0x0F)
        //knob DN
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_LEFT_KEY_KNOBDN_PRESSED;
    }
    else if (RxMessage.Data[1] & 0x01)
        //voice
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_VOICE_PRESSED;
    }
    else if (RxMessage.Data[3] & 0x10)
        //navi
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED;
    }
    else if (RxMessage.Data[1] & 0x10)
        //KNOB enter
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_KNOB_PRESSED;
    }
    else if ((RxMessage.Data[2] & 0xF0) == 0x010)
        //right knob up
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_KNOBUP_PRESSED;
    }
    else if ((RxMessage.Data[2] & 0xF0) == 0xF0)
        //Knob DN
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_KNOBDN_PRESSED;
    }
    else if (RxMessage.Data[0] & 0x04)
        //mode keep
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_LEFT_KEY_MODE_KEEP;

    }
    else if (RxMessage.Data[0] & 0x40)
        //knob enter keep
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_LEFT_KEY_KNOB_KEEP;

    }
    else if (RxMessage.Data[1] & 0x04)
        //voice keep
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_VOICE_KEEP;

    }
    else if (RxMessage.Data[3] & 0x40)
        //navi keep
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_NAVI_KEEP;

    }
    else if (RxMessage.Data[1] & 0x40)
        //right knob enter keep
    {
        m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_KNOB_KEEP;

    }
    else
    {

        //-------------------------------------------------------
        wBounceCnt++;
        if (wBounceCnt >= 1)
        {
            uCKeepFlag = 0;
            uRetKeepFlag = 0;
            m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
            wBounceCnt = 0;
        }
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;

    }


    switch (m_BMW_CAN.uKeyID2)
    {
    case BENZE_KEY_ALL_BOUNCED:
        uCKeepFlag = 0;
        uRetKeepFlag = 0;
        m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
        wBounceCnt = 0;
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;
        break;
    case BENZE_KEY_STEERING_LEFT_KEY_MODE_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_LEFT_KEY_MODE_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_STEERING_LEFT_KEY_KNOB_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_LEFT_KEY_KNOB_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_STEERING_LEFT_KEY_KNOBUP_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_LEFT_KEY_KNOBUP_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_STEERING_LEFT_KEY_KNOBDN_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_LEFT_KEY_KNOBDN_PRESSED);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data
        }
        break;
    case BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            AudiCanBus_SendControlCmd(CMD_KEY_MEDIA_NAVI2);//BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data
        }
        break;

    case BENZE_KEY_STEERING_RIGHT_KEY_VOICE_PRESSED:
        m_BMW_CAN.uKeyKeepCnt2++;
        if (m_BMW_CAN.uKeyKeepCnt2 == 1)
            //bounce
        {
            //process first pressed data
            AudiCanBus_SendControlCmd(CMD_KEY_MEDIA_BT2);
        }
        else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
            //keep
        {
            m_BMW_CAN.uKeyKeepCnt2 = 2;
            //process keep data
        }
        break;

    default:
        m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
        m_BMW_CAN.uKeyKeepCnt2 = 0;
        m_BMW_CAN.bKeyKeepOneTime2 = 0;
        break;
    }
}


void AudiCanA4_FetchStallsInfo(CanRxMsg RxMessage)
{
    if (!(RxMessage.StdId == AUD_CAN_STALLS_STD_ID && RxMessage.DLC == 8))
    {
        return ;
    }

    if ((RxMessage.Data[5] & 0xF0) == 0x60)
        //back
    {

        //g_stuBACKCNTR.u8CurState = CAM_ON;
		
		g_stuBACKCNTR.u8can_back_status=CAM_ON_from_can;
        g_stuPARKCNTR.u8CurState = PARK_OFF;
        POWER_RearVideoOn();
        /*
        if(g_stuSYSINFO.uBootFinished)
        {

            McuSetNaviMuteOn();
        }
        */

    }
    else if ((RxMessage.Data[5] & 0xF0) == 0x70)
        //park
    {

        //g_stuBACKCNTR.u8CurState = CAM_OFF;
		 if(g_stuSYSINFO.FS_select.cam_type_onoff_id!=2)
			 {
		// g_stuBACKCNTR.u8CurState = CAM_OFF;
		 g_stuPARKCNTR.u8CurState = PARK_OFF;
		 
		 g_stuBACKCNTR.u8can_back_status=CAM_off_id;
		 //POWER_RearVideoOff();
			 }

        /*
        if(g_stuSYSINFO.uBootFinished)
        {
            McuSetNaviMuteOff();
        }
        */
    }
    else
    {
		 if(g_stuSYSINFO.FS_select.cam_type_onoff_id!=2)
			 {
		// g_stuBACKCNTR.u8CurState = CAM_OFF;
		 g_stuPARKCNTR.u8CurState = PARK_OFF;
		 
		 g_stuBACKCNTR.u8can_back_status=CAM_off_id;
		// POWER_RearVideoOff();
			 }

        /*
        if(g_stuSYSINFO.uBootFinished)
        {
            McuSetRearOutAudioMuteOff();
        }
        */
    }



}

void AudiA4_CanBus_work_data_analytic(CanRxMsg RxMessage)
{
    static u8 uPreMediaStatus, uPrePreMediaStatus;
    static u8 uPreAirStatus, uPrePreAirStatus;
    uPreMediaStatus = uPreMediaStatus;
    uPrePreMediaStatus = uPrePreMediaStatus;
    uPreAirStatus = uPreAirStatus;
    uPrePreAirStatus = uPrePreAirStatus;

	
	if (RxMessage.StdId == AUD_CAN_STEERINGANGLE_STD_ID && RxMessage.DLC == 8)
	{
		m_BMW_CAN.benze_Steering_angle = (((RxMessage.Data[3] & 0x3F) << 8) | RxMessage.Data[2]); //方向盘角度信息
	}
	
    if (RxMessage.StdId == AUD_CAN_POWER_STD3_ID && RxMessage.DLC == 8) //ACC INFO
    {

        if (RxMessage.Data[0] & 0x04)
        {
            m_BMW_CAN.AccPwr = SYSTEM_POWER_OFF;
			if(g_stuSYSINFO.FS_select.rec_type_onoff_id==2)
			m_RADAR.fDisp=0;

        }
        else
        {
            m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;

        }


    }
    if (RxMessage.StdId == AUD_CAN_POWER_STD2_ID && RxMessage.DLC == 8) //aux power INFO
    {

        if (RxMessage.Data[0] & 0x03)
        {
            m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_ON;

        }
        else
        {
            m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_OFF;
			m_RADAR.fDisp=0;

        }


    }

    if (RxMessage.StdId == AUD_CAN_POWER_STD_ID && RxMessage.DLC == 8)
    {
        //ID:001
        //DCL:
        //if(uPrePreMediaStatus == uPreMediaStatus && uPreMediaStatus == RxMessage.Data[0])
        {
            if ((RxMessage.Data[0] & 0x0F) == 0x03)
            {
                m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;
                m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
				//m_BMW_CAN.AccPwr=SYSTEM_POWER_ON;
            }
            else
            {
				/*
                if(m_BMW_CAN.AccPwr == SYSTEM_POWER_OFF)
                {
                    m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_OFF;
                   // POWER_TFT_LED_Off();



                }*/
                m_BMW_CAN.AudioPwr = SYSTEM_POWER_OFF;
            }


		g_stuSYSINFO.wPowerOnByCanTimer=2000;

        }

        uPrePreMediaStatus = uPreMediaStatus;
        uPreMediaStatus = RxMessage.Data[0];

    }
    if (RxMessage.StdId == AUD_CAN_RADAR_DISP_STD_ID && RxMessage.DLC == 4)
    {
        //ID:001
        //DCL:

        if (RxMessage.Data[2] == 0x01)
        {
#if !COMPILE_BACK_BY_STALL
            g_stuBACKCNTR.u8CurState = CAM_ON;
            g_stuPARKCNTR.u8CurState = PARK_OFF;
            POWER_RearVideoOn();
#endif
            m_RADAR.fDisp = 1;
			if(g_stuSYSINFO.FS_select.rec_type_onoff_id==2)
		g_stuBACKCNTR.u8can_rada_status=CAM_ON_from_can;


        }
        else
        {
#if !COMPILE_BACK_BY_STALL
            g_stuBACKCNTR.u8CurState = CAM_OFF;
            g_stuPARKCNTR.u8CurState = PARK_OFF;
            POWER_RearVideoOff();
#endif
            m_RADAR.fDisp = 0;
			if(g_stuSYSINFO.FS_select.rec_type_onoff_id==2)
		g_stuBACKCNTR.u8can_rada_status=CAM_off_id;

        }



    }
    if (RxMessage.StdId == AUD_CAN_AIR_DISP_STD_ID && RxMessage.DLC == 5)
    {

        //ID:001
        //DCL:


        if ((RxMessage.Data[3] & 0x01) && (RxMessage.Data[3] <= 0x01))
        {

           // m_BMW_CAN.benze_air_Disp = 1;


        }
        else
        {
            //m_BMW_CAN.benze_air_Disp = 0;

        }



    }
    if (RxMessage.StdId == AUD_CAN_AIR_DISP_STD_ID && RxMessage.DLC == 4)
    {
		//空调温度
        //ID:001
        //DCL:
        if(RxMessage.Data[1] == 0x5B&&RxMessage.Data[0] == 0x40)//Light 
        {
            m_BMW_CAN.benze_air_left_temperature = RxMessage.Data[2];
			m_BMW_CAN.air_send_id=1;
			 m_BMW_CAN.benze_air_Disp =3;
        }
		else if(RxMessage.Data[1] == 0x61&&RxMessage.Data[0] == 0x40)//Right
		{
			m_BMW_CAN.benze_air_right_temperature = RxMessage.Data[2];
			m_BMW_CAN.air_send_id=1;
			 m_BMW_CAN.benze_air_Disp =6;
		}
    }
    if (RxMessage.StdId == AUD_CAN_AIR_DISP_STD_ID && RxMessage.DLC == 3)
    {
		//空调风量
		if(RxMessage.Data[1] == 0x5c&&RxMessage.Data[0] == 0x40)
		{
			//if(m_BMW_CAN.benze_air_wind_speed!= RxMessage.Data[2])
			{
            m_BMW_CAN.benze_air_wind_speed = RxMessage.Data[2];
			if(m_BMW_CAN.benze_air_auto!=1)
			{
				 m_BMW_CAN.air_send_id=1;
				 m_BMW_CAN.benze_air_Disp =1;
			}
			}
		}
		else if(RxMessage.Data[1] == 0x62&&RxMessage.Data[0] == 0x40)
		{
			//if(m_BMW_CAN.benze_air_wind_speed!= RxMessage.Data[2])
			{
            m_BMW_CAN.benze_air_right_wind_speed = RxMessage.Data[2];
			if(m_BMW_CAN.benze_air_right_auto!=1)
			{
				 m_BMW_CAN.air_send_id=1;
				 m_BMW_CAN.benze_air_Disp =4;
			}
			}
		}

    }
    if (RxMessage.StdId == AUD_CAN_AIR_DISP_STD_ID && RxMessage.DLC == 6)
    {
		//风向
        //ID:001
        //DCL:
        if(RxMessage.Data[1] == 0x5e&&RxMessage.Data[0] == 0x40)//light
        {
        /*
        static BYTE air_buff[10][6],count_air=0;
		for(int i=0;i<6;i++)
			air_buff[count_air][i]=RxMessage.Data[i];
		count_air++;
		count_air%=10;
		*/
		 m_BMW_CAN.air_send_id=1;
		 m_BMW_CAN.benze_air_Disp =2;
		 m_BMW_CAN.benze_air_auto = 0;
        	if(RxMessage.Data[2]==0&&RxMessage.Data[3]==0&&RxMessage.Data[4]==0&&RxMessage.Data[5]==0x03)
        	{
            	m_BMW_CAN.benze_air_wind_mode = 0;
				m_BMW_CAN.benze_air_auto = 1;
        	}
			else if(RxMessage.Data[2]==0&&RxMessage.Data[3]==0&&RxMessage.Data[4]==0)//&&RxMessage.Data[5]==0x00)
			{
				m_BMW_CAN.benze_air_wind_mode = 0;
				m_BMW_CAN.benze_air_auto = 0;
				m_BMW_CAN.air_send_id=1;
			}
			else if(RxMessage.Data[2]==0&&RxMessage.Data[3]==0&&RxMessage.Data[4]==0)
				m_BMW_CAN.benze_air_wind_mode = 0;
			else if(RxMessage.Data[2]==0x0c&&RxMessage.Data[3]==0x00&&RxMessage.Data[4]==0x0c)
				m_BMW_CAN.benze_air_wind_mode = 1;
			else if(RxMessage.Data[2]==0x0c&&RxMessage.Data[3]==0x00&&RxMessage.Data[4]==0x00)
				m_BMW_CAN.benze_air_wind_mode = 2;
			else if(RxMessage.Data[2]==0x0c&&RxMessage.Data[3]==0x0c&&RxMessage.Data[4]==0x00)
				m_BMW_CAN.benze_air_wind_mode = 3;
			else if(RxMessage.Data[2]==0x00&&RxMessage.Data[3]==0x0c&&RxMessage.Data[4]==0x00)
				m_BMW_CAN.benze_air_wind_mode = 4;
			else if(RxMessage.Data[2]==0x00&&RxMessage.Data[3]==0x0c&&RxMessage.Data[4]==0x0c)
				m_BMW_CAN.benze_air_wind_mode = 5;
			else if(RxMessage.Data[2]==0x00&&RxMessage.Data[3]==0x00&&RxMessage.Data[4]==0x0c)
				m_BMW_CAN.benze_air_wind_mode = 6;
			else if(RxMessage.Data[2]==0x0c&&RxMessage.Data[3]==0x0c&&RxMessage.Data[4]==0x0c)
				m_BMW_CAN.benze_air_wind_mode = 7;
        }
		else if(RxMessage.Data[1] == 0x64&&RxMessage.Data[0] == 0x40)//right
        {
	        /*
	        static BYTE air_buff[10][6],count_air=0;
			for(int i=0;i<6;i++)
				air_buff[count_air][i]=RxMessage.Data[i];
			count_air++;
			count_air%=10;
			*/
			 m_BMW_CAN.air_send_id=1;
			 m_BMW_CAN.benze_air_Disp =5;
			 m_BMW_CAN.benze_air_right_auto = 0;
        	if(RxMessage.Data[2]==0&&RxMessage.Data[3]==0&&RxMessage.Data[4]==0&&RxMessage.Data[5]==0x03)
        	{
            	m_BMW_CAN.benze_air_right_wind_mode = 0;
				m_BMW_CAN.benze_air_right_auto = 1;
        	}
			else if(RxMessage.Data[2]==0&&RxMessage.Data[3]==0&&RxMessage.Data[4]==0)//&&RxMessage.Data[5]==0x00)
			{
				m_BMW_CAN.benze_air_right_wind_mode = 0;
				m_BMW_CAN.benze_air_right_auto = 0;
				m_BMW_CAN.air_send_id=1;
			}
			else if(RxMessage.Data[2]==0&&RxMessage.Data[3]==0&&RxMessage.Data[4]==0)
				m_BMW_CAN.benze_air_right_wind_mode = 0;
			else if(RxMessage.Data[2]==0x0c&&RxMessage.Data[3]==0x00&&RxMessage.Data[4]==0x0c)
				m_BMW_CAN.benze_air_right_wind_mode = 1;
			else if(RxMessage.Data[2]==0x0c&&RxMessage.Data[3]==0x00&&RxMessage.Data[4]==0x00)
				m_BMW_CAN.benze_air_right_wind_mode = 2;
			else if(RxMessage.Data[2]==0x0c&&RxMessage.Data[3]==0x0c&&RxMessage.Data[4]==0x00)
				m_BMW_CAN.benze_air_right_wind_mode = 3;
			else if(RxMessage.Data[2]==0x00&&RxMessage.Data[3]==0x0c&&RxMessage.Data[4]==0x00)
				m_BMW_CAN.benze_air_right_wind_mode = 4;
			else if(RxMessage.Data[2]==0x00&&RxMessage.Data[3]==0x0c&&RxMessage.Data[4]==0x0c)
				m_BMW_CAN.benze_air_right_wind_mode = 5;
			else if(RxMessage.Data[2]==0x00&&RxMessage.Data[3]==0x00&&RxMessage.Data[4]==0x0c)
				m_BMW_CAN.benze_air_right_wind_mode = 6;
			else if(RxMessage.Data[2]==0x0c&&RxMessage.Data[3]==0x0c&&RxMessage.Data[4]==0x0c)
				m_BMW_CAN.benze_air_right_wind_mode = 7;
        }

    }

		
    if (RxMessage.StdId == AUD_CAN_RADAR_INFO_STD_ID && RxMessage.DLC == 6)
    {
        //ID:001
        //DCL:


        if (RxMessage.Data[1] == 0x92)
        {
            m_RADAR.uFront_Left = (RxMessage.Data[2] >> 4) & 0xFF;
            m_RADAR.uFront_MidLeft = (RxMessage.Data[3] >> 4) & 0xFF;
            m_RADAR.uFront_MidRight = (RxMessage.Data[4] >> 4) & 0xFF;
            m_RADAR.uFront_Right = (RxMessage.Data[5] >> 4) & 0xFF;

        }
        else if (RxMessage.Data[1] == 0x93)
        {
            m_RADAR.uRear_Left = (RxMessage.Data[2] >> 4) & 0xFF;
            m_RADAR.uRear_MidLeft = (RxMessage.Data[3] >> 4) & 0xFF;
            m_RADAR.uRear_MidRight = (RxMessage.Data[4] >> 4) & 0xFF;
            m_RADAR.uRear_Right = (RxMessage.Data[5] >> 4) & 0xFF;

        }



    }

    if (RxMessage.StdId == AUD_CAN_TIMER_STD_ID)
    {
        //ID:39F
        //DCL:
        m_BMW_CAN.Hour_data = RxMessage.Data[2]; //hour
        m_BMW_CAN.Minute_data = RxMessage.Data[3]; //时间数据
        m_BMW_CAN.Sec_data = RxMessage.Data[4]; //时间数据

    }

    if (RxMessage.StdId == AUD_CAN_MUTE_STD_ID)
    {
        //ID:39F
        //DCL:


    }
			if(g_stuSYSINFO.FS_select.rec_type_onoff_id==2)
    {
	if(RxMessage.StdId==AUD_CAN_QUICK_STD_ID&& RxMessage.DLC == 8)
	{
		m_BMW_CAN.Carquick=RxMessage.Data[5]<<8|RxMessage.Data[4];
	}


	if(RxMessage.StdId==AUD_CAN_angle_leftright_STD_ID&& RxMessage.DLC == 4)
	{
		if(RxMessage.Data[1]==0x02||RxMessage.Data[1]==0x0a)
			{
			if(m_BMW_CAN.Car_angle_light!=2)
				{
			m_BMW_CAN.Car_angle_light=2;
			m_BMW_CAN.Car_angle_light_updata_id=3;
				}
			}
		else if(RxMessage.Data[1]==0x01||RxMessage.Data[1]==0x09)
			{
				if(m_BMW_CAN.Car_angle_light!=1)
				{
				m_BMW_CAN.Car_angle_light=1;
				m_BMW_CAN.Car_angle_light_updata_id=3;
				}
			}
		else if(RxMessage.Data[1]==0x00)
			{
				if(m_BMW_CAN.Car_angle_light!=0)
					{
			m_BMW_CAN.Car_angle_light=0;
			m_BMW_CAN.Car_angle_light_updata_id=3;
					}
			}
	}
    }





}

void AudiA4_CanBus_InputSource_data_analytic(CanRxMsg RxMessage)
{
    static vu8 uTxtInfoBuf[30];
    static vu8 uTxtIndex = 0;
    BYTE i;



    if (RxMessage.StdId == AUD_CAN_SOURCE2_STD_ID && RxMessage.DLC == 1) //list info
    {
        uTxtIndex = 0;
        //------------------------------------------------------------------
        if(uTxtInfoBuf[5] == 'A' && uTxtInfoBuf[6] == 'U' && uTxtInfoBuf[7] == 'X')
        {
            m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_AUX;

        }
        else if(uTxtInfoBuf[5] == 'E' && uTxtInfoBuf[6] == 'x' && uTxtInfoBuf[7] == 't')
        {
            m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_AUX;

        }
        //-------------------------------------------------------------------
        if(uTxtInfoBuf[5] == 'F' && uTxtInfoBuf[6] == 'M')
        {
            m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_RAD;

        }
        else if(uTxtInfoBuf[5] == 'R' && uTxtInfoBuf[6] == 'a' && uTxtInfoBuf[7] == 'd')
        {
            m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_RAD;

        }
        else if(uTxtInfoBuf[5] == 'A' && uTxtInfoBuf[6] == 'M')
        {
            m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_RAD;

        }
        else if(uTxtInfoBuf[5] == 'C' && uTxtInfoBuf[6] == 'D')
        {
            m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_CD;

        }
        else if(uTxtInfoBuf[5] == 'S' && uTxtInfoBuf[6] == 'D')
        {
            m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_CD;

        }
        else if(uTxtInfoBuf[5] == 'T' && uTxtInfoBuf[6] == 'r' && uTxtInfoBuf[7] == 'a')
        {
            m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_CD;

        }
        //--------------------------------------------------------------------


			if(m_BMW_CAN.CarAudioSoure == CAR_MEDIA_SYSTEM_IN_RAD||m_BMW_CAN.CarAudioSoure == CAR_MEDIA_SYSTEM_IN_CD)
				work_first_on=0;



    }
    if (RxMessage.StdId == AUD_CAN_SOURCE1_STD_ID)//txt info
    {
        for(i = 0; i < RxMessage.DLC; i++)
        {
            uTxtInfoBuf[uTxtIndex%30] = RxMessage.Data[i];
            uTxtIndex++;
            if(uTxtIndex >= 30)
                uTxtIndex = 29;
        }
    }


}


void AudiCanBusA4_FetchCmdTask(void)
{
    BYTE action = 0;

    if (!m_BMW_CAN.wLoopTimer)
    {
    
#if 0
		if(m_BMW_CAN.air_send_id)
		{
			m_BMW_CAN.air_send_id=0;
			//if(m_BMW_CAN.CarAudioSoure == CAR_MEDIA_SYSTEM_IN_AUX)
			if(!((g_stuSYSINFO.sys_main.uMainMode==SYSTEM_MODE_IN_CAR_MEDIA)&&(g_stuSYSINFO.uOSDMainMode==MAIN_OSD_MODE_IN_CAR_AUX)))
			Ipc_Send_Car_Air(m_BMW_CAN.benze_air_Disp,m_BMW_CAN.benze_air_wind_speed,m_BMW_CAN.benze_air_wind_mode,m_BMW_CAN.benze_air_left_temperature,m_BMW_CAN.benze_air_right_wind_speed,m_BMW_CAN.benze_air_right_wind_mode,m_BMW_CAN.benze_air_right_temperature,0);
		}
#endif
        switch (AudiCan_FetchCmd())
        {
        case BENZE_CMD_STEERING_LEFT_KEY_KNOBUP_PRESSED:






            break;
        case BENZE_CMD_STEERING_LEFT_KEY_KNOBDN_PRESSED:



            break;

        case BENZE_CMD_STEERING_LEFT_KEY_KNOB_PRESSED:


            break;
        case BENZE_CMD_STEERING_LEFT_KEY_MODE_PRESSED:
 
            break;
        case BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED:

            break;
        case BENZE_CMD_STEERING_RIGHT_KEY_VOICE_PRESSED:

            break;
        case BENZE_CMD_STEERING_RIGHT_KEY_NAVI_KEEP:

            break;
        case BENZE_CMD_STEERING_RIGHT_KEY_VOICE_KEEP:
           
            break;

        case BENZE_CMD_STEERING_LEFT_KEY_MODE_KEEP://
            
            break;


			break;

        default:
            break;
        }
        m_BMW_CAN.wLoopTimer = 10;
    }
}


void AudiCanBus_SendControlCmd(BYTE cmd)
{
    m_BMW_CAN.uCanSendCmdIndex++;
    if (m_BMW_CAN.uCanSendCmdIndex >= BENZE_CAN_CNTR_BUF_MAX)
    {
        m_BMW_CAN.uCanSendCmdIndex = 0;
    }
    m_BMW_CAN.uCanSendCmdBuf[m_BMW_CAN.uCanSendCmdIndex] = cmd;
}

/**************************************************************************/
/*                                                                        */
/**************************************************************************/

static BYTE AudiCan_FetchCmd(void)
{
    BYTE temp;
    if (m_BMW_CAN.uCanFetchCmdIndex != m_BMW_CAN.uCanSendCmdIndex)
    {

        m_BMW_CAN.uCanFetchCmdIndex++;
        if (m_BMW_CAN.uCanFetchCmdIndex >= BENZE_CAN_CNTR_BUF_MAX)
        {
            m_BMW_CAN.uCanFetchCmdIndex = 0;
        }
        temp = m_BMW_CAN.uCanFetchCmdIndex;

        return m_BMW_CAN.uCanSendCmdBuf[temp];


    }
    else
    {
        return BENZE_CMD_NULL;
    }
}

#endif


#if 1 //Miller.Tao,2014-09-09
    /*define unity API for All CAN function*/

    /*
    ========================
    initial can varibale
    ========================
    */
    void LF_CanBus_InitVar(void)
    {
        m_BMW_CAN.benze_Steering_angle = 0;

        m_RADAR.uRear_Left    =0;
        m_RADAR.uRear_MidLeft =0;
        m_RADAR.uRear_MidRight=0;
        m_RADAR.uRear_Right   =0;

        m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
        m_RADAR.fDisp=0;

        can_door_last_statu=0x50;
        door_index=0;
        m_CarDoorInfo.show_id=0;

    }

    void LF_CanBus_SendControlCmd(BYTE cmd)
    {
        m_BMW_CAN.uCanSendCmdIndex++;
        if (m_BMW_CAN.uCanSendCmdIndex >= BENZE_CAN_CNTR_BUF_MAX)
        {
            m_BMW_CAN.uCanSendCmdIndex = 0;
        }
        m_BMW_CAN.uCanSendCmdBuf[m_BMW_CAN.uCanSendCmdIndex] = cmd;
    }

    BYTE LF_CanBus_FetchCmd(void)
    {
        BYTE temp;
        if (m_BMW_CAN.uCanFetchCmdIndex != m_BMW_CAN.uCanSendCmdIndex)
        {

            m_BMW_CAN.uCanFetchCmdIndex++;
            if (m_BMW_CAN.uCanFetchCmdIndex >= BENZE_CAN_CNTR_BUF_MAX)
            {
                m_BMW_CAN.uCanFetchCmdIndex = 0;
            }
            temp = m_BMW_CAN.uCanFetchCmdIndex;

            return m_BMW_CAN.uCanSendCmdBuf[temp];


        }
        else
        {
            return BENZE_CMD_NULL;
        }
    }
//define a function to config can module
    void LF_CanBus_Config(void)
    {
#if LF_CAN_TYPE == BWMX1CAN
        // BWM_X1_CanBus_Config();
#endif

#if LF_CAN_TYPE == AudiQ3CAN
        //Audi_Q3_CanBus_Config();
#endif

#if LF_CAN_TYPE == BWM5SCAN
        BWM_5S_CanBus_Config();
#endif

#if LF_CAN_TYPE == Benci_newC
        Benci_newC_CanBus_Config();
#endif
    }

//工作信息
    void LF_CanBus_work_data_analytic(CanRxMsg RxMessage)
    {
#if LF_CAN_TYPE == BWMX1CAN
        //工作信息
        //BWM_X1_CanBus_work_data_analytic(RxMessage);
#endif

#if LF_CAN_TYPE == AudiQ3CAN
        //工作信息
        //Audi_Q3_CanBus_work_data_analytic(RxMessage);
#endif
#if LF_CAN_TYPE == BWM5SCAN
        //工作信息
        BWM_5S_CanBus_work_data_analytic(RxMessage);
#endif

#if LF_CAN_TYPE == Benci_newC
        //工作信息
        Benci_newC_CanBus_work_data_analytic(RxMessage);
#endif
    }

//方控按键处理
    void LF_CanBus_SteerKey_Task(CanRxMsg RxMessage)
    {
#if LF_CAN_TYPE == BWMX1CAN
        //BWM_X1_CanBus_FetchSteerKeyInfo_Type1(RxMessage);
#endif
#if LF_CAN_TYPE == AudiQ3CAN
        // Audi_Q3_CanBus_FetchSteerKeyInfo_Type1(RxMessage);
#endif
#if LF_CAN_TYPE == BWM5SCAN
        BWM_5S_CanBus_FetchSteerKeyInfo_Type1(RxMessage);
        BWM_5S_CanBus_FetchSteerKeyInfo_Type2(RxMessage);
        BWM_5S_CanBus_FetchSteerKeyInfo_Type3(RxMessage);
        BWM_5S_CanBus_FetchSteerKeyInfo_Type4(RxMessage);
        // BWM_5S_CanBus_FetchSteerKeyInfo_Type5(RxMessage);
#endif

#if LF_CAN_TYPE == Benci_newC
        //工作信息
        Benci_newC_CanBus_FetchSteerKeyInfo_Type1(RxMessage);
#endif
    }
//档位处理
    void LF_CANBus_Stalls_Task(CanRxMsg RxMessage)
    {
#if LF_CAN_TYPE == BWMX1CAN
        //BWM_X1_Can_FetchStallsInfo(RxMessage);
#endif
#if LF_CAN_TYPE == AudiQ3CAN
        //Audi_Q3_Can_FetchStallsInfo(RxMessage);
#endif

#if LF_CAN_TYPE == BWM5SCAN
        BWM_5S_Can_FetchStallsInfo(RxMessage);
#endif

#if LF_CAN_TYPE == Benci_newC
        Benci_newC_Can_FetchStallsInfo(RxMessage);
#endif
    }
//圆形手柄和按键处理
    void LF_CANBus_Knob_Task(CanRxMsg RxMessage)
    {
#if LF_CAN_TYPE == BWMX1CAN

#endif
    }
//对应,AudiCan_FetchCmd
    void LF_CanBus_FetchCmdTask(void)
    {
#if LF_CAN_TYPE == BWMX1CAN
        // BWM_X1_CanBus_FetchCmdTask();
#endif

#if LF_CAN_TYPE == AudiQ3CAN
        // Audi_Q3_CanBus_FetchCmdTask();
#endif

#if LF_CAN_TYPE == BWM5SCAN
        BWM_5S_CanBus_FetchCmdTask();
#endif

#if LF_CAN_TYPE == Benci_newC
        Benci_newC_CanBus_FetchCmdTask();
#endif
    }

    void LF_CanBus_PowerOn(CanRxMsg RxMessage)
    {
#if LF_CAN_TYPE == BWM5SCAN

        BMW_5S_Power_On(RxMessage);

#endif
#if LF_CAN_TYPE == AudiQ3CAN
        // Audi_Q3_Power_On(RxMessage);

#endif

#if LF_CAN_TYPE == Benci_newC

        Benci_newC_Power_On(RxMessage);

#endif
    }
//MCU 往CAN BUS上发送数据
    void LF_CanBus_Contrl_Task(void)
    {

    }
//////////////the 2 following functions is for CAN1,CAN2 ISR ///////////////////////
    /*==========================================
    *Func:CAN1_USER_HANDLER
    *description:handle user's application code of CAN1,a unity interface
    *Author:Miller.Tao
    *date:20140818
    =============================================*/
    void CAN1_USER_HANDLER(CanRxMsg RxMessage)
    {
#if LF_CAN_TYPE == AudiQ3CAN


#endif


    }


    /*==========================================
    *Func:CAN2_USER_HANDLER
    *description:handle user's application code of CAN2,a unity interface
    *Author:Miller.Tao
    *date:20140818
    =============================================*/

    void CAN2_USER_HANDLER(CanRxMsg RxMessage)
    {
#if LF_CAN_TYPE == BWMX1CAN
        LF_CANBus_Stalls_Task(RxMessage);
        LF_CanBus_SteerKey_Task(RxMessage);
        LF_CanBus_work_data_analytic(RxMessage);
        //BWM_X1_CanBus_FetchSteerAngleInfo(RxMessage);
#endif


#if LF_CAN_TYPE == AudiQ3CAN
        LF_CANBus_Stalls_Task(RxMessage);
        LF_CanBus_SteerKey_Task(RxMessage);
        LF_CanBus_work_data_analytic(RxMessage);
        //Audi_Q3_CanBus_FetchSteerAngleInfo(RxMessage);
#endif

#if LF_CAN_TYPE == BWM5SCAN
        LF_CANBus_Stalls_Task(RxMessage);
        LF_CanBus_SteerKey_Task(RxMessage);
        LF_CanBus_work_data_analytic(RxMessage);
        BWM_5S_CanBus_FetchSteerAngleInfo(RxMessage);
#endif

#if LF_CAN_TYPE == Benci_newC
        LF_CANBus_Stalls_Task(RxMessage);
        LF_CanBus_SteerKey_Task(RxMessage);
        LF_CanBus_work_data_analytic(RxMessage);
        Benci_newC_CanBus_FetchSteerAngleInfo(RxMessage);
        Benci_newC_CanBus_mid_control_key_fun(RxMessage);
        Benci_newC_CanBus_mid_control_key2_fun(RxMessage);
        Benci_newC_CanBus_FetchSteerKeyInfo_Type2(RxMessage);
#endif
    }

#endif


    /**************************************************************************/
    /*                                                                        */
    /**************************************************************************/
#undef _BENZE_BUS_C_
