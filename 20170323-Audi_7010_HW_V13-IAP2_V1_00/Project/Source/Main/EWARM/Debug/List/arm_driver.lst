###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Jun/2016  13:18:42 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\ARM\arm_driver.c                     #
#    Command line =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\ARM\arm_driver.c -D                  #
#                    USE_STDPERIPH_DRIVER -D USE_STM32100B_EVAL -D            #
#                    STM32F10X_CL -lc F:\软件工程\平台正式代码001\Benze_MainB #
#                    oard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph #
#                    _Template\EWARM\Debug\List\ -lA                          #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\ -o F:\软件工程\平台正式代码001\Benze_MainBoar #
#                    d\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Te #
#                    mplate\EWARM\Debug\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I F:\软件工程\平台正式代码001\Benze_MainBoard\ba #
#                    oma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Templa #
#                    te\EWARM\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\ -I F:\软件工程\平台正式代码001\Benze_Mai #
#                    nBoard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeri #
#                    ph_Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph #
#                    _Driver\inc\ -I F:\软件工程\平台正式代码001\Benze_MainBo #
#                    ard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_ #
#                    Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph_Dr #
#                    iver\src\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\..\..\Project/Common\ -I                  #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/TW8836\ -I F:\软件工程\平台正式代码001\B #
#                    enze_MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x #
#                    _StdPeriph_Template\EWARM\..\..\..\Project/CAN\ -I       #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/FM\ -I F:\软件工程\平台正式代码001\Benze #
#                    _MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x_Std #
#                    Periph_Template\EWARM\..\..\..\Project/ARM\ -I           #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\  #
#                    -On -I "C:\Program Files\IAR Systems\Embedded Workbench  #
#                    6.0_2\arm\CMSIS\Include\"                                #
#    List file    =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\arm_driver.lst                                 #
#    Object file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\Obj\arm_driver.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\benci_newC_V45\Project\ARM\arm_driver.c
      1          
      2          #define _ARM_DRIVER_C_
      3          #define EnReSendFunc
      4          #include "compile.h"
      5          #include "stm32f10x_conf.h"
      6          #include "port.h"
      7          #include "main.h"
      8          #include "libr.h"
      9          #include "arm.h"
     10          #include "arm_driver.h"
     11          
     12          void Init_ARM_Variables(void)
     13          {
     14          	Byte i;
     15          
     16          	for(i=0;i<ARM_Receive_index_max;i++)
     17          		ARM_Rec_buffer[i][ARM_Receive_Cnt_max-1]=ARM_Receive_Free;
     18          	ARM_Receive_Cnt=0;
     19          	ARM_Receive_index=0;
     20          	ARM_Done_index=0;
     21          	ARM_Max_Time_Cnt=0;//接受超时退出
     22          	ARM_Receive_OK=0; //=1接受完成
     23          	ARM_Receive_length=0; //长度	
     24          	ARM_Receive_ack=0;
     25          	ARM_USART1_Status=1;//USART initial state: off
     26          	ARM_send_id=0;
     27          	ARM_ack_request=0;
     28          	WINCA_ProtocolFlag=0;//initial 0:OS protocol
     29          	#ifdef YCFunction_EN //tao-2013-03-16
     30          	ycSaveIndex = 0;
     31          	ycGetIndex = 0;
     32          	#endif
     33          	#ifdef EnReSendFunc //TSH,2013-03-02
     34          	 _CmdCnt=0;
     35          	 _CmdTimeOut=0;
     36          	#endif
     37          }
     38          #ifdef YCFunction_EN //tao-2013-03-16
     39          
     40          void YcReceiveArmData(void)
     41          {
     42          	u8 maxlen,tempindex,commandlen;
     43          	u8 i;
     44          	
     45          	if (ycSaveIndex == ycGetIndex)		return;
     46          
     47          	if (ycSaveIndex > ycGetIndex)		maxlen = (u8)(ycSaveIndex - ycGetIndex);
     48          	else								maxlen = (u8)(256 - ycGetIndex + ycSaveIndex);
     49          
     50          	if (maxlen < 4)						return;
     51          
     52          	tempindex = ycGetIndex;
     53          	if (ycReceiveBuff[tempindex] == 0x02)
     54          	{
     55          		tempindex++;
     56          		if ((ycReceiveBuff[tempindex] == COM_ARM_ID) || (ycReceiveBuff[tempindex] == APP_ARM_ID))
     57          		{
     58          			tempindex += 2;
     59          			commandlen = (u8)(ycReceiveBuff[tempindex] + 5);
     60          			
     61          			if (maxlen >= commandlen)
     62          			{
     63          				tempindex = ycGetIndex;
     64          				for (i = 0; i < commandlen; i++)
     65          				{
     66          					yctempBuff[i] = ycReceiveBuff[tempindex++];
     67          				}
     68          				YcProcessArmData();
     69          				ycGetIndex++;
     70          			}
     71          			else
     72          				return;
     73          		}
     74          		else
     75          			ycGetIndex++;
     76          	}
     77          	else
     78          	{
     79          		ycGetIndex++;
     80          
     81          	}
     82          }
     83          
     84          void YcProcessArmData(void)
     85          {
     86          	//u8 i;
     87          	
     88          	if (yctempBuff[1] == COM_ARM_ID)		//os command
     89          	{
     90          		switch(yctempBuff[2])
     91          		{
     92          			case 0x01:
     93          				break;
     94          			case 0x02:
     95          				break;
     96          			case 0x03:
     97          				break;
     98          			case 0x04:
     99          				break;
    100          			default:
    101          				break;
    102          		}
    103          	}
    104          	else if (yctempBuff[1] == APP_ARM_ID)		//App command
    105          	{
    106          		switch(yctempBuff[2])
    107          		{
    108          			case 0xA0:				//握手
    109          				ReportHandshake();
    110          				break;
    111          			case 0xA2:
    112          				break;
    113          			case 0xA4:
    114          				break;
    115          		}
    116          	}
    117          }
    118          
    119          void YcSendCommand(u8 *p,u8 len)
    120          {
    121          	u8 i;
    122          
    123          	for (i=0; i < len; i++)
    124          		ARM_Uart_Char(*p++);
    125          }
    126          
    127          
    128          void ReportHandshake(void)
    129          {
    130          	u8 index,check;
    131          	u8 tempbuff[40];
    132          
    133          	index = 0; 
    134          	check = 0;
    135          
    136          	tempbuff[index++] = 0x02;
    137          	tempbuff[index] = APP_ARM_ID;	check ^= tempbuff[index++];
    138          	tempbuff[index] = Cmd_HandShake;check ^= tempbuff[index++];
    139          	tempbuff[index] = 0x01;			check ^= tempbuff[index++];
    140          	tempbuff[index] = ERR_SUCCESS; 	check ^= tempbuff[index++];
    141          	tempbuff[index++] = check;
    142          
    143          	YcSendCommand(tempbuff,index);
    144          }
    145          #endif
    146          
    147          void ARM_Data_Receive(void)
    148          {
    149          	Byte i,check_sum=0;
    150          	
    151          	if(ARM_Receive_Cnt>=ARM_Receive_Cnt_max)
    152          		ARM_Receive_Cnt=0;      
    153          	ARM_Rec_temp[ARM_Receive_Cnt]= USART_ReceiveData(USART2);	
    154          	ARM_Max_Time_Cnt=10;////2MS没有收到数据，就重新接受	
    155          
    156          	if(ARM_Receive_Cnt==0)
    157          	{
    158          			if((ARM_Rec_temp[ARM_Receive_Cnt]==0x02)||(ARM_Rec_temp[ARM_Receive_Cnt]==0x2e))//第一次
    159          				ARM_Receive_Cnt=1;//test
    160          			else 
    161          			{
    162          				switch(ARM_Rec_temp[ARM_Receive_Cnt])
    163          				{
    164          					case 0xff:
    165          							ARM_Receive_OK=1;
    166          							ARM_Receive_ack=ARM_Receive_Check_ok;						
    167          							break;
    168          					case 0xf0:
    169          							ARM_Receive_OK=1;
    170          							ARM_Receive_ack=ARM_Receive_Check_error;						
    171          						break;
    172          					case 0xf3:
    173          							ARM_Receive_OK=1;
    174          							ARM_Receive_ack=ARM_Receive_Check_notsupport;						
    175          						break;
    176          					case 0xfc:
    177          							ARM_Receive_OK=1;
    178          							ARM_Receive_ack=ARM_Receive_Check_busy;						
    179          						break;
    180          						
    181          				}
    182          				ARM_Max_Time_Cnt=0;////2MS没有收到数据，就重新接受	
    183          			}	
    184          	}
    185          	else
    186          	{	
    187          		{
    188          			if(ARM_Receive_Cnt==1)
    189          			{
    190          					
    191          				if((ARM_Rec_temp[1]!=COM_ARM_ID)&&(ARM_Rec_temp[1]!=APP_ARM_ID))
    192          				{
    193          					if(ARM_send_id==1)
    194          					{
    195          						ARM_ack_request=ARM_Receive_Check_notsupport;
    196          					}
    197          					else
    198          					{	
    199          					  if(WINCA_ProtocolFlag)
    200          					  	{
    201          					  		ARM_Receive_ACK(ARM_Receive_Check_notsupport);//应答
    202          						}
    203          					}
    204          					ARM_Receive_Cnt=0;
    205          					ARM_Max_Time_Cnt=0;
    206          					return;
    207          				}
    208          			}
    209          			else if(ARM_Receive_Cnt==3)
    210          			{
    211          				ARM_Receive_length=ARM_Rec_temp[3];
    212          				if(ARM_Receive_length>(ARM_Receive_Cnt_max-3))
    213          					ARM_Receive_length=0;
    214          			}
    215          			else if(ARM_Receive_Cnt>3)
    216          			{
    217          				if(ARM_Receive_Cnt>=(ARM_Receive_length+4))
    218          				{//-----接受完成
    219          					/*==========BCC,start=============*/
    220          					check_sum=ARM_Rec_temp[1];
    221          					for(i=2;i<=(ARM_Receive_length+3);i++)	
    222          						check_sum=check_sum^ARM_Rec_temp[i];//校验和
    223          					/*==========BCC,end=============*/
    224          					if(check_sum==(ARM_Rec_temp[ARM_Receive_length+4]))
    225          					{//----------校验正确-------------------------------------------
    226          						ARM_Receive_Cnt=0;
    227          						ARM_Max_Time_Cnt=0;	
    228          						ARM_Receive_OK=1;
    229          						ARM_USART1_Status=0;//mean the USART of ARM is working now,TSH,20130125
    230          						#if 1 //handle handshake with ARM,,TSH,20130108
    231          						if((ARM_Rec_temp[1]==APP_ARM_ID)&&(ARM_Rec_temp[2]==0x00))//handshake
    232          						{
    233          							//ARM_MCU_HandShake_ACK();
    234          							ARM_Receive_ACK(ARM_Receive_Check_ok);
    235          							WINCA_ProtocolFlag = 1;//切换协议
    236          						}
    237          						#endif
    238          
    239          						//#if 1 //ack dealing
    240          						/*	if(ARM_send_id==1)
    241          							{
    242          								//if(((ARM_Send_length)==(ARM_Receive_length))||((ARM_Send_length)==(ARM_Receive_length-1)))
    243          								{
    244          									if((ARM_Send_temp[2]==ARM_Rec_temp[2]))
    245          									{
    246          										ARM_Receive_ack=ARM_Receive_Check_ok;//TSH,2013-01-08
    247          									}
    248          								}
    249          							}*/
    250          						//#endif
    251          
    252          						if(ARM_Rec_buffer[ARM_Receive_index][ARM_Receive_Cnt_max-1]!=ARM_Receive_Busy)		
    253          						{
    254          							for(i=0;i<(ARM_Receive_Cnt_max-1);i++)
    255          								ARM_Rec_buffer[ARM_Receive_index][i]=ARM_Rec_temp[i];
    256          							ARM_Rec_buffer[ARM_Receive_index][ARM_Receive_Cnt_max-1]=ARM_Receive_Busy;
    257          
    258          							if(ARM_send_id==1)
    259          							{
    260          								ARM_ack_request=ARM_Receive_Check_ok;
    261          							}
    262          							else
    263          							{
    264          							  if(WINCA_ProtocolFlag)
    265          							  	 ARM_Receive_ACK(ARM_Receive_Check_ok);//应答
    266          							}
    267          							
    268          							if(ARM_Receive_index<(ARM_Receive_index_max-1))
    269          								ARM_Receive_index++;
    270          							else
    271          								ARM_Receive_index=0;			
    272          
    273          							if(ARM_Rec_temp[1]==COM_ARM_ID)
    274          							{
    275          								switch(ARM_Rec_temp[2])
    276          								{
    277          									case 0x0://ARM9 开启串口
    278          										//System_openlogo_init_ok=1;
    279          										break;
    280          									default:
    281          										break;
    282          								}                                                          ;
    283          							}
    284          							else //APP_ARM_ID
    285          							{
    286          								switch(ARM_Rec_temp[2])
    287          								{
    288          									case ARM_rec_start_type:
    289          										System_init_ok=1;
    290          										break;
    291          									case ARM_rec_save_type:
    292          										System_save_ok=1;
    293          										break;
    294          									default:
    295          										break;
    296          								}
    297          							}
    298          						}
    299          						else
    300          						{
    301          							
    302          							if(ARM_send_id==1)
    303          							{
    304          								ARM_ack_request=ARM_Receive_Check_busy;
    305          							}
    306          							else
    307          							{	
    308          								if(WINCA_ProtocolFlag)
    309          									ARM_Receive_ACK(ARM_Receive_Check_busy);//应答
    310          
    311          							}
    312          						}
    313          
    314          						return;
    315          					}
    316          					else
    317          					{//出错
    318          						if(ARM_send_id==1)
    319          						{
    320          							ARM_ack_request=ARM_Receive_Check_error;
    321          						}
    322          						else
    323          						{	
    324          							if(WINCA_ProtocolFlag)
    325          								ARM_Receive_ACK(ARM_Receive_Check_error);//应答
    326          
    327          						}
    328          						ARM_Receive_Cnt=0;
    329          						ARM_Max_Time_Cnt=0;
    330          						return;
    331          					}
    332          				}
    333          			}		
    334          			ARM_Receive_Cnt++;
    335          
    336          		}
    337          		
    338          	}
    339          
    340           }
    341          #ifndef EnReSendFunc //TSH,2013-03-02
    342          BYTE ARM_data_Send_data(Byte *data)
    343          {
    344          	WORD length,i;
    345          
    346          	length=*(data+3);
    347          	ARM_send_id=1;
    348          	for(i=0;i<=(length+4);i++)
    349          	{
    350          		ARM_Uart_Char(*(data+i));
    351          
    352          	}	
    353          	ARM_send_id=0;	
    354          	
    355                for(i=2000;i;i--)
    356                {
    357          		if(ARM_Receive_ack==ARM_Receive_Check_ok)
    358          			return TRUE;
    359          		if(ARM_Receive_ack==ARM_Receive_Check_busy)
    360          			return FALSE;
    361          			//i=50000;//繁忙的话，等待500
    362          		delay_10us();
    363          		/*if(ARM_ack_request!=0)
    364          		{
    365          			ARM_Receive_ACK(ARM_ack_request);
    366          			ARM_ack_request=0;		
    367          		}*/		
    368                }
    369          	return FALSE;
    370            
    371          }
    372          
    373          void ARM_data_Send(Byte *data)
    374          {
    375          	//BYTE length,i;
    376          
    377          	ARM_Receive_ack=0;
    378          	if(ARM_data_Send_data(data)==FALSE)
    379          	{
    380          		if(ARM_data_Send_data(data)==FALSE)
    381          			ARM_data_Send_data(data);
    382          	}
    383          	/*if(ARM_ack_request!=0)
    384          	{
    385          		ARM_Receive_ACK(ARM_ack_request);
    386          		ARM_ack_request=0;		
    387          	}*/
    388          }
    389          #endif
    390          
    391          #ifdef EnReSendFunc //TSH,2013-03-02
    392          
    393          /*======================================
    394          *FUNC:void ARM_data_Send2(Byte *data)
    395          *description:handl data send to ARM
    396          *Param:		  
    397          *Note:
    398          *writer:TSH
    399          *Date:2013-01-21
    400          ======================================*/
    401          
    402          BYTE USART2ARMStatus;//状态机
    403          #define CheckIdle 0
    404          #define SendStatus 1
    405          #define CheckAckStatus 2
    406          #define HandleERR 3
    407          
    408          BYTE ARM_SEND_BUF[10][40];
    409          BYTE bSaveIndex;
    410          BYTE bCheckIndex;
    411          BYTE bComTimeOut;
    412          
    413          
    414          
    415          void ARM_SendDataSave(BYTE * data)
    416          {	
    417          	BYTE i;
    418          	BYTE length;
    419          	if(bSaveIndex>10)bSaveIndex=0;
    420          	length = *(data+3);
    421          	for(i=0;i<=(length+4);i++)
    422          	{
    423          		ARM_SEND_BUF[bSaveIndex][i]=*(data+i);
    424          	}
    425          
    426          	i=length+5;
    427          	ARM_SEND_BUF[bSaveIndex][i]=3;//set flag
    428          	
    429          	//wTrayCount=50;//time out
    430          	bCheckIndex=bSaveIndex;//check the status of sending
    431          	bSaveIndex++;
    432          	
    433          }
    434          #if 0
    435          BYTE ARM_data_Send_data(Byte *data)
    436          {
    437          	WORD length,i;
    438          
    439          	length=*(data+3);
    440          	ARM_send_id=1;
    441          	for(i=0;i<=(length+4);i++)
    442          	{
    443          		ARM_Uart_Char(*(data+i));
    444          
    445          	}	
    446          	ARM_send_id=0;
    447          	return TRUE;  
    448          }
    449          #endif
    450          #if 1
    451          BYTE ARM_data_Send_data(Byte *data,Byte retry)
    452          {
    453          	WORD length,i;
    454          
    455          	length=*(data+3);
    456          
    457          	ARM_send_id=1;
    458          	for(i=0;i<=(length+4);i++)
    459          	{
    460          		if(i==1)
    461          		{	if(*(data+i)==COM_MCU_ID)
    462          			{
    463          				ARM_Uart_Char(*(data+i));
    464          			}
    465          			else//APP
    466          			{
    467          				if(retry==1)
    468          					ARM_Uart_Char(0x55);
    469          				else if(retry==2)
    470          					ARM_Uart_Char(0x56);
    471          				else 
    472          					ARM_Uart_Char(0x57);
    473          			}
    474          		}
    475          		else
    476          			ARM_Uart_Char(*(data+i));
    477          
    478          	}	
    479          	ARM_send_id=0;	
    480          
    481          	return TRUE;  
    482          }
    483          #endif
    484          
    485          
    486          //BYTE _CmdCnt,_CmdTimeOut;
    487          
    488          
    489          void ARM_data_Send(Byte *data)
    490          {
    491          	BYTE length;
    492          	BYTE i;
    493          	BYTE playerstatus;
    494          	BYTE resendCnt;
    495          	ARM_Receive_ack=0;
    496          	resendCnt=1;
    497          	playerstatus=CheckAckStatus;
    498          	length=*(data+3);
    499          	for(i=0;i<length+4;i++)
    500          		ARM_Send_temp[i]=*(data+i);
    501          		
    502          	ARM_data_Send_data(data,resendCnt);
    503          	_CmdCnt=100;//30;//time out
    504          	_CmdTimeOut=300;//200;
    505          	do{
    506          			switch(playerstatus)
    507          			{
    508          				
    509          				case SendStatus:
    510          						playerstatus=CheckAckStatus;
    511          						_CmdCnt=30;//time out
    512          						resendCnt++;
    513          						if(resendCnt>=2)playerstatus=HandleERR;//tiger 0617
    514          						ARM_data_Send_data(data,resendCnt);
    515          						
    516          					 break;
    517          				case CheckAckStatus:
    518          						if(_CmdCnt)
    519          						{
    520          							if((ARM_Receive_ack==ARM_Receive_Check_ok)||(ARM_Receive_ack==ARM_Receive_Check_notsupport))
    521          								playerstatus=CheckIdle;
    522          							else if(ARM_Receive_ack==ARM_Receive_Check_busy)
    523          								playerstatus=HandleERR;
    524          								//playerstatus=SendStatus;
    525          							else if(ARM_Receive_ack==ARM_Receive_Check_error)
    526          								playerstatus=HandleERR;
    527          							else if(ARM_Receive_ack==0x00);//CheckAckStatus
    528          						}
    529          						else
    530          						{
    531          							playerstatus=SendStatus;//HandleERR;//tiger 0617
    532          						}
    533          						 break;
    534          				case HandleERR:
    535          						playerstatus=CheckIdle;
    536          						_CmdCnt=0;//clear
    537          						break;
    538          				default:
    539          						playerstatus=CheckIdle;
    540          						break;
    541          			}
    542          			if((playerstatus==CheckIdle)||(playerstatus==HandleERR))break;
    543          
    544          	}while(_CmdTimeOut);
    545          	
    546          	
    547          	
    548          }
    549          #endif
    550          
    551          
    552          
    553          
    554          void ARM_Uart_Char(Byte char_Temp)
    555          {
    556          	BYTE TimeCnt;	
    557          	
    558          	USART_SendData(USART2, char_Temp);
    559          	TimeCnt=200;
    560          	while((USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)&&(--TimeCnt!=0))
    561          	{
    562          		delay_5us();
    563          	}
    564          }	
    565          void ARM_Receive_ACK(Byte send_type)
    566          {	
    567          	switch(send_type)
    568          	{
    569          		case  ARM_Receive_Check_ok:
    570          			ARM_Uart_ACK(ARM_Receive_Check_ok);
    571          			break;
    572          		case  ARM_Receive_Check_error:
    573          			ARM_Uart_ACK(ARM_Receive_Check_error);
    574          			break;
    575          		case  ARM_Receive_Check_notsupport:
    576          			ARM_Uart_ACK(ARM_Receive_Check_notsupport);
    577          			break;
    578          		case  ARM_Receive_Check_busy:
    579          			ARM_Uart_ACK(ARM_Receive_Check_busy);
    580          			break;
    581          	}
    582          }
    583          void ARM_Uart_ACK(Byte char_Temp)
    584          {
    585          	Byte TimeCnt=200;
    586          
    587          		USART_SendData(USART2, char_Temp);
    588          		TimeCnt=200;
    589          		while((USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET)&&(--TimeCnt!=0))
    590          		{
    591          			delay_5us();
    592          		}
    593          }
    594          /*======================================
    595          *FUNC:void ARM_MCU_HandShake_ACK(void)
    596          *description:ack the handshake Cmd
    597          *Param:		  
    598          *Note:
    599          *writer:TSH
    600          *Date:2013-01-08
    601          ======================================*/
    602          
    603          void ARM_MCU_HandShake_ACK(void)
    604          {
    605          	WORD length,i;
    606          	BYTE buff[20],checksum;
    607          	length=0;
    608          	buff[0]=0x02;
    609          	buff[1]=COM_ARM_ID;
    610          	buff[2]=Cmd_HandShake;
    611          	buff[3]=0;
    612          	checksum=buff[1];
    613          	
    614          	for(i=2;i<=(buff[3]+3);i++)	
    615          		checksum^=buff[i];//BCC校验和
    616          	buff[buff[3]+4]=checksum;
    617          	
    618          	for(i=0;i<=(length+4);i++)
    619          	{
    620          		ARM_Uart_Char(*(buff+i));
    621          
    622          	}
    623          
    624          }
    625          /*======================================
    626          *FUNC:void ARM_Receive_ACK2(Byte send_type)
    627          *description:ack the  Cmd come from ARM
    628          *Param:		  
    629          *Note:
    630          *writer:TSH
    631          *Date:2013-01-08
    632          ======================================*/
    633          
    634          void ARM_Receive_ACK2(Byte send_type)
    635          {	BYTE buff[40];
    636              BYTE i,checksum;
    637          	buff[0]=0x02;
    638          	buff[1]=COM_ARM_ID;
    639          	buff[2]=ARM_Rec_temp[2];
    640          	buff[3]=ARM_Rec_temp[3]+1;
    641          	switch(send_type)
    642          	{
    643          		case  ARM_Receive_Check_ok:
    644          			//ARM_Uart_ACK(ARM_Receive_Check_ok);
    645          			buff[4]=ARM_Receive_Check_ok;
    646          			break;
    647          		case  ARM_Receive_Check_error:
    648          			buff[4]=ARM_Receive_Check_error;
    649          			break;
    650          		case  ARM_Receive_Check_notsupport:
    651          			buff[4]=ARM_Receive_Check_notsupport;
    652          			break;
    653          		case  ARM_Receive_Check_busy:
    654          			buff[4]=ARM_Receive_Check_busy;
    655          			break;
    656          	}
    657          	
    658          	for(i=5;i<buff[3]+4;i++)
    659          		buff[i]=ARM_Rec_temp[i-1];
    660          
    661          	checksum=buff[1];
    662          	for(i=2;i<=(buff[3]+3);i++)	
    663          		checksum^=buff[i];//BCC校验和
    664          	buff[buff[3]+4]=checksum;
    665          
    666          	for(i=0;i<=buff[3]+4;i++)
    667          		ARM_Uart_Char(*(buff+i));
    668          
    669          	
    670          }
    671          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  ARM_Data_Receive
             16 -> ARM_Receive_ACK
             16 -> USART_ReceiveData
       40  ARM_MCU_HandShake_ACK
             40 -> ARM_Uart_Char
        8  ARM_Receive_ACK
              8 -> ARM_Uart_ACK
       56  ARM_Receive_ACK2
             56 -> ARM_Uart_Char
        8  ARM_SendDataSave
       16  ARM_Uart_ACK
             16 -> USART_GetFlagStatus
             16 -> USART_SendData
             16 -> delay_5us
       16  ARM_Uart_Char
             16 -> USART_GetFlagStatus
             16 -> USART_SendData
             16 -> delay_5us
       24  ARM_data_Send
             24 -> ARM_data_Send_data
       24  ARM_data_Send_data
             24 -> ARM_Uart_Char
        0  Init_ARM_Variables


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_10
       4  ??DataTable7_11
       4  ??DataTable7_12
       4  ??DataTable7_13
       4  ??DataTable7_14
       4  ??DataTable7_15
       4  ??DataTable7_16
       4  ??DataTable7_17
       4  ??DataTable7_18
       4  ??DataTable7_19
       4  ??DataTable7_2
       4  ??DataTable7_20
       4  ??DataTable7_21
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
       4  ??DataTable7_8
       4  ??DataTable7_9
     828  ARM_Data_Receive
      98  ARM_MCU_HandShake_ACK
      56  ARM_Receive_ACK
     200  ARM_Receive_ACK2
     400  ARM_SEND_BUF
     122  ARM_SendDataSave
      52  ARM_Uart_ACK
      50  ARM_Uart_Char
     240  ARM_data_Send
     100  ARM_data_Send_data
     138  Init_ARM_Variables
       1  USART2ARMStatus
       4  _CmdCnt
       4  _CmdTimeOut
       1  bCheckIndex
       1  bComTimeOut
       1  bSaveIndex

 
   412 bytes in section .bss
 1 972 bytes in section .text
 
 1 972 bytes of CODE memory
   412 bytes of DATA memory

Errors: none
Warnings: none
