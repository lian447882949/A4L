###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Jun/2016  13:18:42 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\CAN\canbus.c                         #
#    Command line =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\CAN\canbus.c -D                      #
#                    USE_STDPERIPH_DRIVER -D USE_STM32100B_EVAL -D            #
#                    STM32F10X_CL -lc F:\软件工程\平台正式代码001\Benze_MainB #
#                    oard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph #
#                    _Template\EWARM\Debug\List\ -lA                          #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\ -o F:\软件工程\平台正式代码001\Benze_MainBoar #
#                    d\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Te #
#                    mplate\EWARM\Debug\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I F:\软件工程\平台正式代码001\Benze_MainBoard\ba #
#                    oma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Templa #
#                    te\EWARM\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\ -I F:\软件工程\平台正式代码001\Benze_Mai #
#                    nBoard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeri #
#                    ph_Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph #
#                    _Driver\inc\ -I F:\软件工程\平台正式代码001\Benze_MainBo #
#                    ard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_ #
#                    Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph_Dr #
#                    iver\src\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\..\..\Project/Common\ -I                  #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/TW8836\ -I F:\软件工程\平台正式代码001\B #
#                    enze_MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x #
#                    _StdPeriph_Template\EWARM\..\..\..\Project/CAN\ -I       #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/FM\ -I F:\软件工程\平台正式代码001\Benze #
#                    _MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x_Std #
#                    Periph_Template\EWARM\..\..\..\Project/ARM\ -I           #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\  #
#                    -On -I "C:\Program Files\IAR Systems\Embedded Workbench  #
#                    6.0_2\arm\CMSIS\Include\"                                #
#    List file    =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\canbus.lst                                     #
#    Object file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\Obj\canbus.o                                        #
#                                                                             #
#                                                                             #
###############################################################################

F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\benci_newC_V45\Project\CAN\canbus.c
      1          /* 这份源代码文件已被未注册的SourceFormatX格式化过 */
      2          /* 如果您想不再添加此类信息，请您注册这个共享软件  */
      3          /* 更多相关信息请访问网站: http://cn.textrush.com  */
      4          
      5          /******************** (C) COPYRIGHT 2011 APTENON ********************
      6           * File Name          : canbus.c
      7           * Author             : miller.tao
      8           * Version            : V0.0
      9           * Date               : 07/13/2015
     10           * Description        : canbus  file.
     11           *******************************************************************************/
     12          #define _BENZE_BUS_C_
     13          #include "includes.h"
     14          //#include "can_config.h"
     15          
     16          /******************************************************************
     17          速度 1000   500  250  125  100  50     20    10
     18          距离 40     130  270  530  620  1300   3300	  6700
     19          CIA推荐值
     20          75% when 波特率 》800K
     21          80% when 波特率 》500K
     22          87.5% when 波特率 < 500K
     23           *******************************************************************/
     24          
     25          const static  CanTxMsg  BENCI_keyTab[]=
     26          {
     27          /*
     28                  uint32_t StdId;  
     29          
     30                  uint32_t ExtId;  
     31          
     32                  uint8_t IDE;     
     33          
     34                  uint8_t RTR;     
     35          
     36                  uint8_t DLC;     
     37          
     38                  uint8_t Data[8];
     39            */
     40            
     41          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x02,0x86,0x00,0x00,0x77,0x00}},//konb ok
     42          	
     43          {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x20,0x86,0x00,0x00,0x77,0x00}},//konb ok
     44          
     45          {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x80,0x86,0x00,0x00,0x77,0x00}},//konb ok
     46          
     47          {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x08,0x86,0x00,0x00,0x77,0x00}},//konb ok
     48          
     49          {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x01,0x86,0x00,0x00,0x77,0x00}},//konb ok
     50          
     51          };
     52          #if 1 //Miller.Tao20150123,kang's
     53          const static  CanTxMsg  KnobCntrTab2[]=
     54          {
     55          /*
     56                  uint32_t StdId;  
     57          
     58                  uint32_t ExtId;  
     59          
     60                  uint8_t IDE;     
     61          
     62                  uint8_t RTR;     
     63          
     64                  uint8_t DLC;     
     65          
     66                  uint8_t Data[8];
     67            */
     68            
     69          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x10,0x00,0x00,0x86,0x00,0x00,0xf7,0x00}},//konb ok
     70          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x80,0xa6,0x00,0x00,0xf7,0x00}},//konb ok
     71          	
     72          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x08,0xa6,0x00,0x00,0xf7,0x00}},//konb ok
     73          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x02,0xa6,0x00,0x00,0xf7,0x00}},//konb ok
     74          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x20,0xa6,0x00,0x00,0xf7,0x00}},//konb ok
     75          };
     76          const static  CanTxMsg  KnobCntrTab[]=
     77          {
     78          /*
     79                  uint32_t StdId;  
     80          
     81                  uint32_t ExtId;  
     82          
     83                  uint8_t IDE;     
     84          
     85                  uint8_t RTR;     
     86          
     87                  uint8_t DLC;     
     88          
     89                  uint8_t Data[8];
     90            */
     91            
     92          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x10,0x00,0x00,0x86,0x00,0x00,0xf7,0x00}},//konb ok
     93          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x00,0xa6,0x00,0x00,0xf7,0x00}},//konb ok
     94          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x80,0x00,0x00,0x86,0x00,0x00,0xf7,0x00}},//konb ok
     95          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x00,0xa6,0x00,0x00,0xf7,0x00}},//konb ok
     96            
     97            {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x00,0xb6,0x00,0x00,0x77,0x00}},//konb ok
     98            
     99            {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x00,0xa6,0x00,0x00,0x77,0x00}},//konb ok
    100            {0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x00,0x96,0x00,0x00,0x77,0x00}},//konb ok
    101            
    102          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x00,0x86,0x00,0x00,0x77,0x00}},//konb ok
    103          	{0x01f3,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x00,0x00,0x00,0x86,0x00,0x00,0x77,0x00}},//konb ok
    104            
    105            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x10}},//Syn Sn1
    106            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x10}},//Syn Sn0
    107            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x10}},//Syn Sn1
    108            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x10}},//Syn Sn2
    109            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x10}},//Syn Sn3
    110            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x10}},//Syn Sn4
    111            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x10}},//Syn Sn5
    112            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x10}},//Syn Sn6
    113            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE4,0x00,0xC0,0x01}},//Syn Sn7
    114            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7D,0x00,0x80,0x1E}},//Syn Sn8
    115            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7E,0x04,0x80,0x1E}},//Syn Sn9
    116            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7F,0x03,0x80,0x1E}},//Syn Sn10
    117            
    118            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xDE,0x01}},//Syn Sn11
    119            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xDE,0x01}},//Syn Sn12
    120            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xDE,0x01}},//Syn Sn13
    121            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xDE,0x01}},//17,Syn Sn14
    122            
    123            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x04}},//option pressed
    124            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x04}},//option pressed
    125            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x04}},//option bounce
    126            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x04}},//option bounce
    127            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7C,0x00,0x80,0x1E}},//Syn Sn8
    128            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7D,0x01,0x80,0x1E}},//Syn Sn9
    129            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7E,0x02,0x80,0x1E}},//Syn Sn9
    130          };
    131          #else
    132          const static  CanTxMsg  KnobCntrTab[]=
    133          {
    134          /*
    135                  uint32_t StdId;  
    136          
    137                  uint32_t ExtId;  
    138          
    139                  uint8_t IDE;     
    140          
    141                  uint8_t RTR;     
    142          
    143                  uint8_t DLC;     
    144          
    145                  uint8_t Data[8];
    146            */
    147            {0x0273,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x1D,0xE1,0x00,0xF0,0xFF,0x7F,0xDE,0x30}},//konb ok
    148            {0x0273,0x0000,CAN_Id_Standard,CAN_RTR_Data,8,{0x1D,0xE1,0x01,0xF0,0x00,0x00,0xDE,0x30}},//knob fail
    149            
    150            
    151            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x10}},//Syn Sn1
    152            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x00,0xC0,0x10}},//Syn Sn0
    153            
    154            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x10}},//Syn Sn1
    155            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x10}},//Syn Sn2
    156            
    157            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x10}},//Syn Sn3
    158            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x00,0xC0,0x10}},//Syn Sn4
    159            
    160            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x10}},//Syn Sn5
    161            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x10}},//Syn Sn6
    162            
    163            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE4,0x00,0xC0,0x01}},//Syn Sn7
    164            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7C,0x00,0x80,0x1E}},//Syn Sn8
    165            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7D,0x01,0x80,0x1E}},//Syn Sn9
    166            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7E,0x02,0x80,0x1E}},//Syn Sn10
    167            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7F,0x03,0x80,0x1E}},//Syn Sn10
    168            
    169            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xDE,0x01}},//Syn Sn11
    170            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xDE,0x01}},//Syn Sn13
    171             
    172            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x81,0xDD,0x01}},//Syn Sn11
    173            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x81,0xDD,0x01}},//Syn Sn11,//////////////
    174            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xDD,0x01}},//Syn Sn11
    175            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xDD,0x01}},//Syn Sn11///////////////
    176          
    177          
    178            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7C,0x03,0x80,0x1E}},//Syn Sn8
    179            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7D,0x02,0x80,0x1E}},//Syn Sn9
    180            
    181            
    182          
    183            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xDE,0x01}},//Syn Sn12
    184           
    185            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xDE,0x01}},//Syn Sn14
    186          
    187            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7C,0x00,0x80,0x1E}},//Syn Sn8
    188            {0x0264,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0x7D,0x01,0x80,0x1E}},//Syn Sn9
    189            
    190            
    191          
    192            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xDE,0x01}},//Syn Sn12
    193           
    194            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xDE,0x01}},//Syn Sn14
    195            
    196            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x04}},//option pressed
    197            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x04}},//option pressed
    198            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x04}},//option bounce
    199            {0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE6,0x00,0xC0,0x04}},//option bounce
    200            
    201            
    202          };
    203          
    204          #endif
    205          
    206          
    207          /**************************************************************************/
    208          /*                                                                        */
    209          /**************************************************************************/
    210          
    211          void Can_Tx(CAN_TypeDef *CANx, CanTxMsg *TxMessage)
    212          {
    213          #if 0
    214              U32 i;
    215              u8 TransmitMailbox;
    216              
    217          
    218              //---------------------------------------
    219              TransmitMailbox = CAN_Transmit(CANx, TxMessage);
    220              i = 0;
    221              while((CAN_TransmitStatus(CANx, TransmitMailbox) != CANTXOK) && (i != 0xFFFF))
    222              {
    223                  i++;
    224              }
    225          #endif
    226              CAN_Transmit(CANx, TxMessage);
    227          }
    228          void BMW_KnobContrl(BYTE bEn)
    229          {
    230            CanTxMsg gTxMessage;
    231            static BYTE IndexCntr=0;
                               ^
Warning[Pe177]: variable "IndexCntr" was declared but never referenced
    232            switch(bEn)
    233            {
    234            case 1:
    235             gTxMessage.DLC=KnobCntrTab2[0].DLC;
    236             gTxMessage.StdId=KnobCntrTab2[0].StdId;
    237             gTxMessage.IDE=KnobCntrTab2[0].IDE;
    238             gTxMessage.RTR=KnobCntrTab2[0].RTR;
    239             gTxMessage.Data[0]=KnobCntrTab2[0].Data[0];
    240             gTxMessage.Data[1]=KnobCntrTab2[0].Data[1];
    241             gTxMessage.Data[2]=KnobCntrTab2[0].Data[2];
    242             gTxMessage.Data[3]=KnobCntrTab2[0].Data[3];
    243             gTxMessage.Data[4]=KnobCntrTab2[0].Data[4];
    244             gTxMessage.Data[5]=KnobCntrTab2[0].Data[5];
    245             gTxMessage.Data[6]=KnobCntrTab2[0].Data[6];
    246             gTxMessage.Data[7]=KnobCntrTab2[0].Data[7];
    247             
    248             Can_Tx(CAN2, &gTxMessage);
    249             //m_BMW_CAN.uAuxSendSn=__SN_END_;
    250             break;
    251          case 2:
    252          	gTxMessage.DLC=KnobCntrTab2[1].DLC;
    253             gTxMessage.StdId=KnobCntrTab2[1].StdId;
    254             gTxMessage.IDE=KnobCntrTab2[1].IDE;
    255             gTxMessage.RTR=KnobCntrTab2[1].RTR;
    256             gTxMessage.Data[0]=KnobCntrTab2[1].Data[0];
    257             gTxMessage.Data[1]=KnobCntrTab2[1].Data[1];
    258             gTxMessage.Data[2]=KnobCntrTab2[1].Data[2];
    259             gTxMessage.Data[3]=KnobCntrTab2[1].Data[3];
    260             gTxMessage.Data[4]=KnobCntrTab2[1].Data[4];
    261             gTxMessage.Data[5]=KnobCntrTab2[1].Data[5];
    262             gTxMessage.Data[6]=KnobCntrTab2[1].Data[6];
    263             gTxMessage.Data[7]=KnobCntrTab2[1].Data[7];
    264             Can_Tx(CAN2, &gTxMessage);
    265          	break;
    266          case 3:
    267          	gTxMessage.DLC=KnobCntrTab2[2].DLC;
    268             gTxMessage.StdId=KnobCntrTab2[2].StdId;
    269             gTxMessage.IDE=KnobCntrTab2[2].IDE;
    270             gTxMessage.RTR=KnobCntrTab2[2].RTR;
    271             gTxMessage.Data[0]=KnobCntrTab2[2].Data[0];
    272             gTxMessage.Data[1]=KnobCntrTab2[2].Data[1];
    273             gTxMessage.Data[2]=KnobCntrTab2[2].Data[2];
    274             gTxMessage.Data[3]=KnobCntrTab2[2].Data[3];
    275             gTxMessage.Data[4]=KnobCntrTab2[2].Data[4];
    276             gTxMessage.Data[5]=KnobCntrTab2[2].Data[5];
    277             gTxMessage.Data[6]=KnobCntrTab2[2].Data[6];
    278             gTxMessage.Data[7]=KnobCntrTab2[2].Data[7];
    279             Can_Tx(CAN2, &gTxMessage);
    280          	break;	
    281          case 4:
    282          	gTxMessage.DLC=KnobCntrTab2[3].DLC;
    283             gTxMessage.StdId=KnobCntrTab2[3].StdId;
    284             gTxMessage.IDE=KnobCntrTab2[3].IDE;
    285             gTxMessage.RTR=KnobCntrTab2[3].RTR;
    286             gTxMessage.Data[0]=KnobCntrTab2[3].Data[0];
    287             gTxMessage.Data[1]=KnobCntrTab2[3].Data[1];
    288             gTxMessage.Data[2]=KnobCntrTab2[3].Data[2];
    289             gTxMessage.Data[3]=KnobCntrTab2[3].Data[3];
    290             gTxMessage.Data[4]=KnobCntrTab2[3].Data[4];
    291             gTxMessage.Data[5]=KnobCntrTab2[3].Data[5];
    292             gTxMessage.Data[6]=KnobCntrTab2[3].Data[6];
    293             gTxMessage.Data[7]=KnobCntrTab2[3].Data[7];
    294             Can_Tx(CAN2, &gTxMessage);
    295          	break;	
    296          case 5:
    297          	gTxMessage.DLC=KnobCntrTab2[4].DLC;
    298             gTxMessage.StdId=KnobCntrTab2[4].StdId;
    299             gTxMessage.IDE=KnobCntrTab2[4].IDE;
    300             gTxMessage.RTR=KnobCntrTab2[4].RTR;
    301             gTxMessage.Data[0]=KnobCntrTab2[4].Data[0];
    302             gTxMessage.Data[1]=KnobCntrTab2[4].Data[1];
    303             gTxMessage.Data[2]=KnobCntrTab2[4].Data[2];
    304             gTxMessage.Data[3]=KnobCntrTab2[4].Data[3];
    305             gTxMessage.Data[4]=KnobCntrTab2[4].Data[4];
    306             gTxMessage.Data[5]=KnobCntrTab2[4].Data[5];
    307             gTxMessage.Data[6]=KnobCntrTab2[4].Data[6];
    308             gTxMessage.Data[7]=KnobCntrTab2[4].Data[7];
    309             Can_Tx(CAN2, &gTxMessage);
    310          	break;		
    311            	}
    312          }
    313          /*=======================
    314          Function:
    315          
    316          
    317          ========================*/
    318          const static  CanTxMsg	FrontCntrTab[]=
    319          {
    320                {0,0x12345680,CAN_Id_Extended,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x00}},
    321          	  	//{0x0267,0x0000,CAN_Id_Standard,CAN_RTR_Data,6,{0xE1,0xFD,0xE5,0x01,0xC0,0x10}},
    322          };//===17330A10===
    323          
    324          void LF_FrontContrl(BYTE cantype,BYTE state,WORD x,WORD y)
    325          {
    326            CanTxMsg gTxMessage;
    327          
    328          
    329             gTxMessage.DLC=FrontCntrTab[0].DLC;
    330             gTxMessage.StdId=FrontCntrTab[0].StdId;
    331             gTxMessage.ExtId=FrontCntrTab[0].ExtId;
    332             gTxMessage.IDE=FrontCntrTab[0].IDE;
    333             gTxMessage.RTR=FrontCntrTab[0].RTR;
    334             gTxMessage.Data[0]=state;//FrontCntrTab[0].Data[0];
    335             gTxMessage.Data[1]=x>>8;//FrontCntrTab[0].Data[1];
    336             gTxMessage.Data[2]=x;//FrontCntrTab[0].Data[2];
    337             gTxMessage.Data[3]=y>>8;//KnobCntrTab[0].Data[3];
    338             gTxMessage.Data[4]=y;//FrontCntrTab[0].Data[4];
    339             gTxMessage.Data[5]=FrontCntrTab[0].Data[5];
    340             //gTxMessage.Data[6]=FrontCntrTab[0].Data[6];
    341             //gTxMessage.Data[7]=FrontCntrTab[0].Data[7];
    342            if(cantype)
    343            {
    344          
    345                  Can_Tx(CAN2, &gTxMessage);
    346            }
    347            else
    348            {
    349          
    350                  Can_Tx(CAN1, &gTxMessage);
    351            }
    352          }
    353          
    354          void LF_BENCI_KEY_SEND_FUN(CAN_TypeDef *cantype,BYTE statu)
    355          {
    356          	switch(statu)
    357          	{
    358          		case benci_send_key_up:
    359          			LF_BENCI_SEND_FUN(cantype,BENCI_keyTab[0]);
    360          			break;
    361          		case benci_send_key_down:
    362          			LF_BENCI_SEND_FUN(cantype,BENCI_keyTab[1]);
    363          			break;
    364          		case benci_send_key_left:
    365          			LF_BENCI_SEND_FUN(cantype,BENCI_keyTab[2]);
    366          			break;
    367          		case benci_send_key_right:
    368          			LF_BENCI_SEND_FUN(cantype,BENCI_keyTab[3]);
    369          			break;	
    370          		case benci_send_key_enter:
    371          			LF_BENCI_SEND_FUN(cantype,BENCI_keyTab[4]);
    372          			break;				
    373          			
    374          	}
    375          }
    376          
    377          
    378          void LF_BENCI_SEND_FUN(CAN_TypeDef *cantype,CanTxMsg buff)//,Byte statu)
    379          {
    380            //CanTxMsg gTxMessage;
    381          
    382          
    383          
    384            if(cantype)
    385            {
    386          
    387                  Can_Tx(CAN2, &buff);
    388            }
    389            else
    390            {
    391          
    392                  Can_Tx(CAN1, &buff);
    393            }
    394          }
    395          
    396          
    397          #if 1 //kang's function
    398          void BMW_AuxContrl_Task(void)
    399          {
    400            CanTxMsg gTxMessage;
    401            
    402            switch(m_BMW_CAN.uAuxSendSn)
    403            {
    404            case __SN0_:
    405             gTxMessage.DLC=KnobCntrTab[2].DLC;
    406             gTxMessage.StdId=KnobCntrTab[2].StdId;
    407             gTxMessage.IDE=KnobCntrTab[2].IDE;
    408             gTxMessage.RTR=KnobCntrTab[2].RTR;
    409             gTxMessage.Data[0]=KnobCntrTab[2].Data[0];
    410             gTxMessage.Data[1]=KnobCntrTab[2].Data[1];
    411             gTxMessage.Data[2]=KnobCntrTab[2].Data[2];
    412             gTxMessage.Data[3]=KnobCntrTab[2].Data[3];
    413             gTxMessage.Data[4]=KnobCntrTab[2].Data[4];
    414             gTxMessage.Data[5]=KnobCntrTab[2].Data[5];
    415             gTxMessage.Data[6]=KnobCntrTab[2].Data[6];
    416             gTxMessage.Data[7]=KnobCntrTab[2].Data[7];
    417               
    418             Can_Tx(CAN2, &gTxMessage);
    419             m_BMW_CAN.uAuxSendSn=__SN1_;
    420              break;
    421            case __SN1_:
    422              gTxMessage.DLC=KnobCntrTab[3].DLC;
    423             gTxMessage.StdId=KnobCntrTab[3].StdId;
    424             gTxMessage.IDE=KnobCntrTab[3].IDE;
    425             gTxMessage.RTR=KnobCntrTab[3].RTR;
    426             gTxMessage.Data[0]=KnobCntrTab[3].Data[0];
    427             gTxMessage.Data[1]=KnobCntrTab[3].Data[1];
    428             gTxMessage.Data[2]=KnobCntrTab[3].Data[2];
    429             gTxMessage.Data[3]=KnobCntrTab[3].Data[3];
    430             gTxMessage.Data[4]=KnobCntrTab[3].Data[4];
    431             gTxMessage.Data[5]=KnobCntrTab[3].Data[5];
    432             gTxMessage.Data[6]=KnobCntrTab[3].Data[6];
    433             gTxMessage.Data[7]=KnobCntrTab[3].Data[7];
    434              Can_Tx(CAN2, &gTxMessage);
    435             m_BMW_CAN.uAuxSendSn=__SN2_;
    436              break;
    437            case __SN2_:
    438             gTxMessage.DLC=KnobCntrTab[4].DLC;
    439             gTxMessage.StdId=KnobCntrTab[4].StdId;
    440             gTxMessage.IDE=KnobCntrTab[4].IDE;
    441             gTxMessage.RTR=KnobCntrTab[4].RTR;
    442             gTxMessage.Data[0]=KnobCntrTab[4].Data[0];
    443             gTxMessage.Data[1]=KnobCntrTab[4].Data[1];
    444             gTxMessage.Data[2]=KnobCntrTab[4].Data[2];
    445             gTxMessage.Data[3]=KnobCntrTab[4].Data[3];
    446             gTxMessage.Data[4]=KnobCntrTab[4].Data[4];
    447             gTxMessage.Data[5]=KnobCntrTab[4].Data[5];
    448             gTxMessage.Data[6]=KnobCntrTab[4].Data[6];
    449             gTxMessage.Data[7]=KnobCntrTab[4].Data[7];
    450               
    451             Can_Tx(CAN2, &gTxMessage);
    452             m_BMW_CAN.uAuxSendSn=__SN3_;
    453              break;
    454            case __SN3_:
    455             gTxMessage.DLC=KnobCntrTab[5].DLC;
    456             gTxMessage.StdId=KnobCntrTab[5].StdId;
    457             gTxMessage.IDE=KnobCntrTab[5].IDE;
    458             gTxMessage.RTR=KnobCntrTab[5].RTR;
    459             gTxMessage.Data[0]=KnobCntrTab[5].Data[0];
    460             gTxMessage.Data[1]=KnobCntrTab[5].Data[1];
    461             gTxMessage.Data[2]=KnobCntrTab[5].Data[2];
    462             gTxMessage.Data[3]=KnobCntrTab[5].Data[3];
    463             gTxMessage.Data[4]=KnobCntrTab[5].Data[4];
    464             gTxMessage.Data[5]=KnobCntrTab[5].Data[5];
    465             gTxMessage.Data[6]=KnobCntrTab[5].Data[6];
    466             gTxMessage.Data[7]=KnobCntrTab[5].Data[7];
    467               
    468             Can_Tx(CAN2, &gTxMessage);
    469             m_BMW_CAN.uAuxSendSn=__SN4_;
    470              break;
    471            case __SN4_:
    472             gTxMessage.DLC=KnobCntrTab[6].DLC;
    473             gTxMessage.StdId=KnobCntrTab[6].StdId;
    474             gTxMessage.IDE=KnobCntrTab[6].IDE;
    475             gTxMessage.RTR=KnobCntrTab[6].RTR;
    476             gTxMessage.Data[0]=KnobCntrTab[6].Data[0];
    477             gTxMessage.Data[1]=KnobCntrTab[6].Data[1];
    478             gTxMessage.Data[2]=KnobCntrTab[6].Data[2];
    479             gTxMessage.Data[3]=KnobCntrTab[6].Data[3];
    480             gTxMessage.Data[4]=KnobCntrTab[6].Data[4];
    481             gTxMessage.Data[5]=KnobCntrTab[6].Data[5];
    482             gTxMessage.Data[6]=KnobCntrTab[6].Data[6];
    483             gTxMessage.Data[7]=KnobCntrTab[6].Data[7];
    484               
    485             Can_Tx(CAN2, &gTxMessage);
    486             m_BMW_CAN.uAuxSendSn=__SN_END_;
    487              break;
    488          	#if 0
    489            case __SN5_:
    490             gTxMessage.DLC=KnobCntrTab[7].DLC;
    491             gTxMessage.StdId=KnobCntrTab[7].StdId;
    492             gTxMessage.IDE=KnobCntrTab[7].IDE;
    493             gTxMessage.RTR=KnobCntrTab[7].RTR;
    494             gTxMessage.Data[0]=KnobCntrTab[7].Data[0];
    495             gTxMessage.Data[1]=KnobCntrTab[7].Data[1];
    496             gTxMessage.Data[2]=KnobCntrTab[7].Data[2];
    497             gTxMessage.Data[3]=KnobCntrTab[7].Data[3];
    498             gTxMessage.Data[4]=KnobCntrTab[7].Data[4];
    499             gTxMessage.Data[5]=KnobCntrTab[7].Data[5];
    500             gTxMessage.Data[6]=KnobCntrTab[7].Data[6];
    501             gTxMessage.Data[7]=KnobCntrTab[7].Data[7];
    502               
    503             Can_Tx(CAN2, &gTxMessage);
    504             m_BMW_CAN.uAuxSendSn=__SN6_;
    505              break;
    506            case __SN6_:
    507             gTxMessage.DLC=KnobCntrTab[8].DLC;
    508             gTxMessage.StdId=KnobCntrTab[8].StdId;
    509             gTxMessage.IDE=KnobCntrTab[8].IDE;
    510             gTxMessage.RTR=KnobCntrTab[8].RTR;
    511             gTxMessage.Data[0]=KnobCntrTab[8].Data[0];
    512             gTxMessage.Data[1]=KnobCntrTab[8].Data[1];
    513             gTxMessage.Data[2]=KnobCntrTab[8].Data[2];
    514             gTxMessage.Data[3]=KnobCntrTab[8].Data[3];
    515             gTxMessage.Data[4]=KnobCntrTab[8].Data[4];
    516             gTxMessage.Data[5]=KnobCntrTab[8].Data[5];
    517             gTxMessage.Data[6]=KnobCntrTab[8].Data[6];
    518             gTxMessage.Data[7]=KnobCntrTab[8].Data[7];
    519               
    520             Can_Tx(CAN2, &gTxMessage);
    521             m_BMW_CAN.uAuxSendSn=__SN7_;
    522              break;
    523            case __SN7_:
    524             gTxMessage.DLC=KnobCntrTab[9].DLC;
    525             gTxMessage.StdId=KnobCntrTab[9].StdId;
    526             gTxMessage.IDE=KnobCntrTab[9].IDE;
    527             gTxMessage.RTR=KnobCntrTab[9].RTR;
    528             gTxMessage.Data[0]=KnobCntrTab[9].Data[0];
    529             gTxMessage.Data[1]=KnobCntrTab[9].Data[1];
    530             gTxMessage.Data[2]=KnobCntrTab[9].Data[2];
    531             gTxMessage.Data[3]=KnobCntrTab[9].Data[3];
    532             gTxMessage.Data[4]=KnobCntrTab[9].Data[4];
    533             gTxMessage.Data[5]=KnobCntrTab[9].Data[5];
    534             gTxMessage.Data[6]=KnobCntrTab[9].Data[6];
    535             gTxMessage.Data[7]=KnobCntrTab[9].Data[7];
    536               
    537             Can_Tx(CAN2, &gTxMessage);
    538             m_BMW_CAN.uAuxSendSn=__SN8_;
    539              break;
    540            case __SN8_:
    541             gTxMessage.DLC=KnobCntrTab[10].DLC;
    542             gTxMessage.StdId=KnobCntrTab[10].StdId;
    543             gTxMessage.IDE=KnobCntrTab[10].IDE;
    544             gTxMessage.RTR=KnobCntrTab[10].RTR;
    545             gTxMessage.Data[0]=KnobCntrTab[10].Data[0];
    546             gTxMessage.Data[1]=KnobCntrTab[10].Data[1];
    547             gTxMessage.Data[2]=KnobCntrTab[10].Data[2];
    548             gTxMessage.Data[3]=KnobCntrTab[10].Data[3];
    549             gTxMessage.Data[4]=KnobCntrTab[10].Data[4];
    550             gTxMessage.Data[5]=KnobCntrTab[10].Data[5];
    551             gTxMessage.Data[6]=KnobCntrTab[10].Data[6];
    552             gTxMessage.Data[7]=KnobCntrTab[10].Data[7];
    553               
    554             Can_Tx(CAN2, &gTxMessage);
    555             m_BMW_CAN.uAuxSendSn=__SN9_;
    556              break;
    557            case __SN9_:
    558             gTxMessage.DLC=KnobCntrTab[11].DLC;
    559             gTxMessage.StdId=KnobCntrTab[11].StdId;
    560             gTxMessage.IDE=KnobCntrTab[11].IDE;
    561             gTxMessage.RTR=KnobCntrTab[11].RTR;
    562             gTxMessage.Data[0]=KnobCntrTab[11].Data[0];
    563             gTxMessage.Data[1]=KnobCntrTab[11].Data[1];
    564             gTxMessage.Data[2]=KnobCntrTab[11].Data[2];
    565             gTxMessage.Data[3]=KnobCntrTab[11].Data[3];
    566             gTxMessage.Data[4]=KnobCntrTab[11].Data[4];
    567             gTxMessage.Data[5]=KnobCntrTab[11].Data[5];
    568             gTxMessage.Data[6]=KnobCntrTab[11].Data[6];
    569             gTxMessage.Data[7]=KnobCntrTab[11].Data[7];
    570               
    571             Can_Tx(CAN2, &gTxMessage);
    572             m_BMW_CAN.uAuxSendSn=__SN10_;
    573              break;
    574            case __SN10_:
    575             gTxMessage.DLC=KnobCntrTab[12].DLC;
    576             gTxMessage.StdId=KnobCntrTab[12].StdId;
    577             gTxMessage.IDE=KnobCntrTab[12].IDE;
    578             gTxMessage.RTR=KnobCntrTab[12].RTR;
    579             gTxMessage.Data[0]=KnobCntrTab[12].Data[0];
    580             gTxMessage.Data[1]=KnobCntrTab[12].Data[1];
    581             gTxMessage.Data[2]=KnobCntrTab[12].Data[2];
    582             gTxMessage.Data[3]=KnobCntrTab[12].Data[3];
    583             gTxMessage.Data[4]=KnobCntrTab[12].Data[4];
    584             gTxMessage.Data[5]=KnobCntrTab[12].Data[5];
    585             gTxMessage.Data[6]=KnobCntrTab[12].Data[6];
    586             gTxMessage.Data[7]=KnobCntrTab[12].Data[7];
    587               
    588             Can_Tx(CAN2, &gTxMessage);
    589             m_BMW_CAN.uAuxSendSn=__SN11_;
    590              break;
    591            case __SN11_:
    592             gTxMessage.DLC=KnobCntrTab[13].DLC;
    593             gTxMessage.StdId=KnobCntrTab[13].StdId;
    594             gTxMessage.IDE=KnobCntrTab[13].IDE;
    595             gTxMessage.RTR=KnobCntrTab[13].RTR;
    596             gTxMessage.Data[0]=KnobCntrTab[13].Data[0];
    597             gTxMessage.Data[1]=KnobCntrTab[13].Data[1];
    598             gTxMessage.Data[2]=KnobCntrTab[13].Data[2];
    599             gTxMessage.Data[3]=KnobCntrTab[13].Data[3];
    600             gTxMessage.Data[4]=KnobCntrTab[13].Data[4];
    601             gTxMessage.Data[5]=KnobCntrTab[13].Data[5];
    602             gTxMessage.Data[6]=KnobCntrTab[13].Data[6];
    603             gTxMessage.Data[7]=KnobCntrTab[13].Data[7];
    604               
    605             Can_Tx(CAN2, &gTxMessage);
    606             m_BMW_CAN.uAuxSendSn=__SN12_;
    607              break;
    608          
    609            case __SN12_:
    610             gTxMessage.DLC=KnobCntrTab[14].DLC;
    611             gTxMessage.StdId=KnobCntrTab[14].StdId;
    612             gTxMessage.IDE=KnobCntrTab[14].IDE;
    613             gTxMessage.RTR=KnobCntrTab[14].RTR;
    614             gTxMessage.Data[0]=KnobCntrTab[14].Data[0];
    615             gTxMessage.Data[1]=KnobCntrTab[14].Data[1];
    616             gTxMessage.Data[2]=KnobCntrTab[14].Data[2];
    617             gTxMessage.Data[3]=KnobCntrTab[14].Data[3];
    618             gTxMessage.Data[4]=KnobCntrTab[14].Data[4];
    619             gTxMessage.Data[5]=KnobCntrTab[14].Data[5];
    620             gTxMessage.Data[6]=KnobCntrTab[14].Data[6];
    621             gTxMessage.Data[7]=KnobCntrTab[14].Data[7];
    622               
    623             Can_Tx(CAN2, &gTxMessage);
    624             m_BMW_CAN.uAuxSendSn=__SN13_;
    625              break;
    626            case __SN13_:
    627             gTxMessage.DLC=KnobCntrTab[15].DLC;
    628             gTxMessage.StdId=KnobCntrTab[15].StdId;
    629             gTxMessage.IDE=KnobCntrTab[15].IDE;
    630             gTxMessage.RTR=KnobCntrTab[15].RTR;
    631             gTxMessage.Data[0]=KnobCntrTab[15].Data[0];
    632             gTxMessage.Data[1]=KnobCntrTab[15].Data[1];
    633             gTxMessage.Data[2]=KnobCntrTab[15].Data[2];
    634             gTxMessage.Data[3]=KnobCntrTab[15].Data[3];
    635             gTxMessage.Data[4]=KnobCntrTab[15].Data[4];
    636             gTxMessage.Data[5]=KnobCntrTab[15].Data[5];
    637             gTxMessage.Data[6]=KnobCntrTab[15].Data[6];
    638             gTxMessage.Data[7]=KnobCntrTab[15].Data[7];
    639               
    640             Can_Tx(CAN2, &gTxMessage);
    641             m_BMW_CAN.uAuxSendSn=__SN14_;
    642              break;
    643            case __SN14_:
    644             gTxMessage.DLC=KnobCntrTab[16].DLC;
    645             gTxMessage.StdId=KnobCntrTab[16].StdId;
    646             gTxMessage.IDE=KnobCntrTab[16].IDE;
    647             gTxMessage.RTR=KnobCntrTab[16].RTR;
    648             gTxMessage.Data[0]=KnobCntrTab[16].Data[0];
    649             gTxMessage.Data[1]=KnobCntrTab[16].Data[1];
    650             gTxMessage.Data[2]=KnobCntrTab[16].Data[2];
    651             gTxMessage.Data[3]=KnobCntrTab[16].Data[3];
    652             gTxMessage.Data[4]=KnobCntrTab[16].Data[4];
    653             gTxMessage.Data[5]=KnobCntrTab[16].Data[5];
    654             gTxMessage.Data[6]=KnobCntrTab[16].Data[6];
    655             gTxMessage.Data[7]=KnobCntrTab[16].Data[7];
    656               
    657             Can_Tx(CAN2, &gTxMessage);
    658             m_BMW_CAN.uAuxSendSn=__SN15_;
    659              break;
    660            case __SN15_:
    661             gTxMessage.DLC=KnobCntrTab[17].DLC;
    662             gTxMessage.StdId=KnobCntrTab[17].StdId;
    663             gTxMessage.IDE=KnobCntrTab[17].IDE;
    664             gTxMessage.RTR=KnobCntrTab[17].RTR;
    665             gTxMessage.Data[0]=KnobCntrTab[17].Data[0];
    666             gTxMessage.Data[1]=KnobCntrTab[17].Data[1];
    667             gTxMessage.Data[2]=KnobCntrTab[17].Data[2];
    668             gTxMessage.Data[3]=KnobCntrTab[17].Data[3];
    669             gTxMessage.Data[4]=KnobCntrTab[17].Data[4];
    670             gTxMessage.Data[5]=KnobCntrTab[17].Data[5];
    671             gTxMessage.Data[6]=KnobCntrTab[17].Data[6];
    672             gTxMessage.Data[7]=KnobCntrTab[17].Data[7];
    673               
    674             Can_Tx(CAN2, &gTxMessage);
    675             m_BMW_CAN.uAuxSendSn=__SN16_;
    676              break;
    677             case __SN16_:
    678             gTxMessage.DLC=KnobCntrTab[22].DLC;
    679             gTxMessage.StdId=KnobCntrTab[22].StdId;
    680             gTxMessage.IDE=KnobCntrTab[22].IDE;
    681             gTxMessage.RTR=KnobCntrTab[22].RTR;
    682             gTxMessage.Data[0]=KnobCntrTab[22].Data[0];
    683             gTxMessage.Data[1]=KnobCntrTab[22].Data[1];
    684             gTxMessage.Data[2]=KnobCntrTab[22].Data[2];
    685             gTxMessage.Data[3]=KnobCntrTab[22].Data[3];
    686             gTxMessage.Data[4]=KnobCntrTab[22].Data[4];
    687             gTxMessage.Data[5]=KnobCntrTab[22].Data[5];
    688             gTxMessage.Data[6]=KnobCntrTab[22].Data[6];
    689             gTxMessage.Data[7]=KnobCntrTab[22].Data[7];
    690               
    691             Can_Tx(CAN2, &gTxMessage);
    692             m_BMW_CAN.uAuxSendSn=__SN17_;
    693              break;
    694           case __SN17_:
    695             gTxMessage.DLC=KnobCntrTab[23].DLC;
    696             gTxMessage.StdId=KnobCntrTab[23].StdId;
    697             gTxMessage.IDE=KnobCntrTab[23].IDE;
    698             gTxMessage.RTR=KnobCntrTab[23].RTR;
    699             gTxMessage.Data[0]=KnobCntrTab[23].Data[0];
    700             gTxMessage.Data[1]=KnobCntrTab[23].Data[1];
    701             gTxMessage.Data[2]=KnobCntrTab[23].Data[2];
    702             gTxMessage.Data[3]=KnobCntrTab[23].Data[3];
    703             gTxMessage.Data[4]=KnobCntrTab[23].Data[4];
    704             gTxMessage.Data[5]=KnobCntrTab[23].Data[5];
    705             gTxMessage.Data[6]=KnobCntrTab[23].Data[6];
    706             gTxMessage.Data[7]=KnobCntrTab[23].Data[7];
    707               
    708             Can_Tx(CAN2, &gTxMessage);
    709             m_BMW_CAN.uAuxSendSn=__SN18_;
    710              break;  
    711          case __SN18_:
    712          	gTxMessage.DLC=KnobCntrTab[24].DLC;
    713          	gTxMessage.StdId=KnobCntrTab[24].StdId;
    714          	gTxMessage.IDE=KnobCntrTab[24].IDE;
    715          	gTxMessage.RTR=KnobCntrTab[24].RTR;
    716          	gTxMessage.Data[0]=KnobCntrTab[24].Data[0];
    717          	gTxMessage.Data[1]=KnobCntrTab[24].Data[1];
    718          	gTxMessage.Data[2]=KnobCntrTab[24].Data[2];
    719          	gTxMessage.Data[3]=KnobCntrTab[24].Data[3];
    720          	gTxMessage.Data[4]=KnobCntrTab[24].Data[4];
    721          	gTxMessage.Data[5]=KnobCntrTab[24].Data[5];
    722          	gTxMessage.Data[6]=KnobCntrTab[24].Data[6];
    723          	gTxMessage.Data[7]=KnobCntrTab[24].Data[7];
    724          	  
    725          	Can_Tx(CAN2, &gTxMessage);
    726          	m_BMW_CAN.uAuxSendSn=__SN19_;
    727          	 break; 
    728          
    729          case __SN19_:
    730             gTxMessage.DLC=KnobCntrTab[14].DLC;
    731             gTxMessage.StdId=KnobCntrTab[14].StdId;
    732             gTxMessage.IDE=KnobCntrTab[14].IDE;
    733             gTxMessage.RTR=KnobCntrTab[14].RTR;
    734             gTxMessage.Data[0]=KnobCntrTab[14].Data[0];
    735             gTxMessage.Data[1]=KnobCntrTab[14].Data[1];
    736             gTxMessage.Data[2]=KnobCntrTab[14].Data[2];
    737             gTxMessage.Data[3]=KnobCntrTab[14].Data[3];
    738             gTxMessage.Data[4]=KnobCntrTab[14].Data[4];
    739             gTxMessage.Data[5]=KnobCntrTab[14].Data[5];
    740             gTxMessage.Data[6]=KnobCntrTab[14].Data[6];
    741             gTxMessage.Data[7]=KnobCntrTab[14].Data[7];
    742               
    743             Can_Tx(CAN2, &gTxMessage);
    744             m_BMW_CAN.uAuxSendSn=__SN20_;
    745              break;
    746            case __SN20_:
    747             gTxMessage.DLC=KnobCntrTab[14].DLC;
    748             gTxMessage.StdId=KnobCntrTab[14].StdId;
    749             gTxMessage.IDE=KnobCntrTab[14].IDE;
    750             gTxMessage.RTR=KnobCntrTab[14].RTR;
    751             gTxMessage.Data[0]=KnobCntrTab[14].Data[0];
    752             gTxMessage.Data[1]=KnobCntrTab[14].Data[1];
    753             gTxMessage.Data[2]=KnobCntrTab[14].Data[2];
    754             gTxMessage.Data[3]=KnobCntrTab[14].Data[3];
    755             gTxMessage.Data[4]=KnobCntrTab[14].Data[4];
    756             gTxMessage.Data[5]=KnobCntrTab[14].Data[5];
    757             gTxMessage.Data[6]=KnobCntrTab[14].Data[6];
    758             gTxMessage.Data[7]=KnobCntrTab[14].Data[7];
    759               
    760             Can_Tx(CAN2, &gTxMessage);
    761             m_BMW_CAN.uAuxSendSn=__SN21_;
    762              break;
    763            case __SN21_:
    764          	  gTxMessage.DLC=KnobCntrTab[16].DLC;
    765          	  gTxMessage.StdId=KnobCntrTab[16].StdId;
    766          	  gTxMessage.IDE=KnobCntrTab[16].IDE;
    767          	  gTxMessage.RTR=KnobCntrTab[16].RTR;
    768          	  gTxMessage.Data[0]=KnobCntrTab[16].Data[0];
    769          	  gTxMessage.Data[1]=KnobCntrTab[16].Data[1];
    770          	  gTxMessage.Data[2]=KnobCntrTab[16].Data[2];
    771          	  gTxMessage.Data[3]=KnobCntrTab[16].Data[3];
    772          	  gTxMessage.Data[4]=KnobCntrTab[16].Data[4];
    773          	  gTxMessage.Data[5]=KnobCntrTab[16].Data[5];
    774          	  gTxMessage.Data[6]=KnobCntrTab[16].Data[6];
    775          	  gTxMessage.Data[7]=KnobCntrTab[16].Data[7];
    776          
    777               
    778             Can_Tx(CAN2, &gTxMessage);
    779             m_BMW_CAN.uAuxSendSn=__SN22_;
    780              break;
    781            case __SN22_:
    782          	  gTxMessage.DLC=KnobCntrTab[16].DLC;
    783          	  gTxMessage.StdId=KnobCntrTab[16].StdId;
    784          	  gTxMessage.IDE=KnobCntrTab[16].IDE;
    785          	  gTxMessage.RTR=KnobCntrTab[16].RTR;
    786          	  gTxMessage.Data[0]=KnobCntrTab[16].Data[0];
    787          	  gTxMessage.Data[1]=KnobCntrTab[16].Data[1];
    788          	  gTxMessage.Data[2]=KnobCntrTab[16].Data[2];
    789          	  gTxMessage.Data[3]=KnobCntrTab[16].Data[3];
    790          	  gTxMessage.Data[4]=KnobCntrTab[16].Data[4];
    791          	  gTxMessage.Data[5]=KnobCntrTab[16].Data[5];
    792          	  gTxMessage.Data[6]=KnobCntrTab[16].Data[6];
    793          	  gTxMessage.Data[7]=KnobCntrTab[16].Data[7];
    794          
    795               
    796             Can_Tx(CAN2, &gTxMessage);
    797             m_BMW_CAN.uAuxSendSn=__SN_END_;
    798             
    799              break;
    800          	#endif
    801            default:
    802              m_BMW_CAN.uAuxSendSn=__SN_END_;
    803              break;
    804              
    805              
    806            }
    807          }
    808          
    809          void BMW_OptionKey_Task(void)
    810          {
    811            CanTxMsg gTxMessage;
    812            
    813            switch(m_BMW_CAN.uOptionSendSn)
    814            {
    815            case __SN0_:
    816             gTxMessage.DLC=KnobCntrTab[18].DLC;
    817             gTxMessage.StdId=KnobCntrTab[18].StdId;
    818             gTxMessage.IDE=KnobCntrTab[18].IDE;
    819             gTxMessage.RTR=KnobCntrTab[18].RTR;
    820             gTxMessage.Data[0]=KnobCntrTab[18].Data[0];
    821             gTxMessage.Data[1]=KnobCntrTab[18].Data[1];
    822             gTxMessage.Data[2]=KnobCntrTab[18].Data[2];
    823             gTxMessage.Data[3]=KnobCntrTab[18].Data[3];
    824             gTxMessage.Data[4]=KnobCntrTab[18].Data[4];
    825             gTxMessage.Data[5]=KnobCntrTab[18].Data[5];
    826             gTxMessage.Data[6]=KnobCntrTab[18].Data[6];
    827             gTxMessage.Data[7]=KnobCntrTab[18].Data[7];
    828               
    829             Can_Tx(CAN2, &gTxMessage);
    830             m_BMW_CAN.uOptionSendSn=__SN1_;
    831              break;
    832            case __SN1_:
    833              gTxMessage.DLC=KnobCntrTab[19].DLC;
    834             gTxMessage.StdId=KnobCntrTab[19].StdId;
    835             gTxMessage.IDE=KnobCntrTab[19].IDE;
    836             gTxMessage.RTR=KnobCntrTab[19].RTR;
    837             gTxMessage.Data[0]=KnobCntrTab[19].Data[0];
    838             gTxMessage.Data[1]=KnobCntrTab[19].Data[1];
    839             gTxMessage.Data[2]=KnobCntrTab[19].Data[2];
    840             gTxMessage.Data[3]=KnobCntrTab[19].Data[3];
    841             gTxMessage.Data[4]=KnobCntrTab[19].Data[4];
    842             gTxMessage.Data[5]=KnobCntrTab[19].Data[5];
    843             gTxMessage.Data[6]=KnobCntrTab[19].Data[6];
    844             gTxMessage.Data[7]=KnobCntrTab[19].Data[7];
    845              Can_Tx(CAN2, &gTxMessage);
    846             m_BMW_CAN.uOptionSendSn=__SN2_;
    847              break;
    848            case __SN2_:
    849             gTxMessage.DLC=KnobCntrTab[20].DLC;
    850             gTxMessage.StdId=KnobCntrTab[20].StdId;
    851             gTxMessage.IDE=KnobCntrTab[20].IDE;
    852             gTxMessage.RTR=KnobCntrTab[20].RTR;
    853             gTxMessage.Data[0]=KnobCntrTab[20].Data[0];
    854             gTxMessage.Data[1]=KnobCntrTab[20].Data[1];
    855             gTxMessage.Data[2]=KnobCntrTab[20].Data[2];
    856             gTxMessage.Data[3]=KnobCntrTab[20].Data[3];
    857             gTxMessage.Data[4]=KnobCntrTab[20].Data[4];
    858             gTxMessage.Data[5]=KnobCntrTab[20].Data[5];
    859             gTxMessage.Data[6]=KnobCntrTab[20].Data[6];
    860             gTxMessage.Data[7]=KnobCntrTab[20].Data[7];
    861               
    862             Can_Tx(CAN2, &gTxMessage);
    863             m_BMW_CAN.uOptionSendSn=__SN3_;
    864              break;
    865            case __SN3_:
    866             gTxMessage.DLC=KnobCntrTab[21].DLC;
    867             gTxMessage.StdId=KnobCntrTab[21].StdId;
    868             gTxMessage.IDE=KnobCntrTab[21].IDE;
    869             gTxMessage.RTR=KnobCntrTab[21].RTR;
    870             gTxMessage.Data[0]=KnobCntrTab[21].Data[0];
    871             gTxMessage.Data[1]=KnobCntrTab[21].Data[1];
    872             gTxMessage.Data[2]=KnobCntrTab[21].Data[2];
    873             gTxMessage.Data[3]=KnobCntrTab[21].Data[3];
    874             gTxMessage.Data[4]=KnobCntrTab[21].Data[4];
    875             gTxMessage.Data[5]=KnobCntrTab[21].Data[5];
    876             gTxMessage.Data[6]=KnobCntrTab[21].Data[6];
    877             gTxMessage.Data[7]=KnobCntrTab[21].Data[7];
    878               
    879             Can_Tx(CAN2, &gTxMessage);
    880             m_BMW_CAN.uOptionSendSn=__SN0_;
    881              break;
    882            
    883            default:
    884              m_BMW_CAN.uOptionSendSn=__SN0_;
    885              break;
    886              
    887              
    888            }
    889          }
    890          #else//Miller.Tao20150123
    891          void BMW_AuxContrl_Task(void)
    892          {
    893            CanTxMsg gTxMessage;
    894            
    895            switch(m_BMW_CAN.uAuxSendSn)
    896            {
    897            case __SN0_:
    898             gTxMessage.DLC=KnobCntrTab[2].DLC;
    899             gTxMessage.StdId=KnobCntrTab[2].StdId;
    900             gTxMessage.IDE=KnobCntrTab[2].IDE;
    901             gTxMessage.RTR=KnobCntrTab[2].RTR;
    902             gTxMessage.Data[0]=KnobCntrTab[2].Data[0];
    903             gTxMessage.Data[1]=KnobCntrTab[2].Data[1];
    904             gTxMessage.Data[2]=KnobCntrTab[2].Data[2];
    905             gTxMessage.Data[3]=KnobCntrTab[2].Data[3];
    906             gTxMessage.Data[4]=KnobCntrTab[2].Data[4];
    907             gTxMessage.Data[5]=KnobCntrTab[2].Data[5];
    908             gTxMessage.Data[6]=KnobCntrTab[2].Data[6];
    909             gTxMessage.Data[7]=KnobCntrTab[2].Data[7];
    910          	 
    911             Can_Tx(CAN2, &gTxMessage);
    912             m_BMW_CAN.uAuxSendSn=__SN1_;//__SN4_;//__SN1_;
    913          	break;
    914            case __SN1_:
    915          	gTxMessage.DLC=KnobCntrTab[3].DLC;
    916             gTxMessage.StdId=KnobCntrTab[3].StdId;
    917             gTxMessage.IDE=KnobCntrTab[3].IDE;
    918             gTxMessage.RTR=KnobCntrTab[3].RTR;
    919             gTxMessage.Data[0]=KnobCntrTab[3].Data[0];
    920             gTxMessage.Data[1]=KnobCntrTab[3].Data[1];
    921             gTxMessage.Data[2]=KnobCntrTab[3].Data[2];
    922             gTxMessage.Data[3]=KnobCntrTab[3].Data[3];
    923             gTxMessage.Data[4]=KnobCntrTab[3].Data[4];
    924             gTxMessage.Data[5]=KnobCntrTab[3].Data[5];
    925             gTxMessage.Data[6]=KnobCntrTab[3].Data[6];
    926             gTxMessage.Data[7]=KnobCntrTab[3].Data[7];
    927          	Can_Tx(CAN2, &gTxMessage);
    928             m_BMW_CAN.uAuxSendSn=__SN4_;//__SN2_
    929          	break;
    930            case __SN2_:
    931             gTxMessage.DLC=KnobCntrTab[4].DLC;
    932             gTxMessage.StdId=KnobCntrTab[4].StdId;
    933             gTxMessage.IDE=KnobCntrTab[4].IDE;
    934             gTxMessage.RTR=KnobCntrTab[4].RTR;
    935             gTxMessage.Data[0]=KnobCntrTab[4].Data[0];
    936             gTxMessage.Data[1]=KnobCntrTab[4].Data[1];
    937             gTxMessage.Data[2]=KnobCntrTab[4].Data[2];
    938             gTxMessage.Data[3]=KnobCntrTab[4].Data[3];
    939             gTxMessage.Data[4]=KnobCntrTab[4].Data[4];
    940             gTxMessage.Data[5]=KnobCntrTab[4].Data[5];
    941             gTxMessage.Data[6]=KnobCntrTab[4].Data[6];
    942             gTxMessage.Data[7]=KnobCntrTab[4].Data[7];
    943          	 
    944            // Can_Tx(CAN2, &gTxMessage);
    945             m_BMW_CAN.uAuxSendSn=__SN3_;
    946          	break;
    947            case __SN3_:
    948             gTxMessage.DLC=KnobCntrTab[5].DLC;
    949             gTxMessage.StdId=KnobCntrTab[5].StdId;
    950             gTxMessage.IDE=KnobCntrTab[5].IDE;
    951             gTxMessage.RTR=KnobCntrTab[5].RTR;
    952             gTxMessage.Data[0]=KnobCntrTab[5].Data[0];
    953             gTxMessage.Data[1]=KnobCntrTab[5].Data[1];
    954             gTxMessage.Data[2]=KnobCntrTab[5].Data[2];
    955             gTxMessage.Data[3]=KnobCntrTab[5].Data[3];
    956             gTxMessage.Data[4]=KnobCntrTab[5].Data[4];
    957             gTxMessage.Data[5]=KnobCntrTab[5].Data[5];
    958             gTxMessage.Data[6]=KnobCntrTab[5].Data[6];
    959             gTxMessage.Data[7]=KnobCntrTab[5].Data[7];
    960          	 
    961           //  Can_Tx(CAN2, &gTxMessage);
    962             m_BMW_CAN.uAuxSendSn=__SN4_;
    963          	break;
    964            case __SN4_:
    965             gTxMessage.DLC=KnobCntrTab[6].DLC;
    966             gTxMessage.StdId=KnobCntrTab[6].StdId;
    967             gTxMessage.IDE=KnobCntrTab[6].IDE;
    968             gTxMessage.RTR=KnobCntrTab[6].RTR;
    969             gTxMessage.Data[0]=KnobCntrTab[6].Data[0];
    970             gTxMessage.Data[1]=KnobCntrTab[6].Data[1];
    971             gTxMessage.Data[2]=KnobCntrTab[6].Data[2];
    972             gTxMessage.Data[3]=KnobCntrTab[6].Data[3];
    973             gTxMessage.Data[4]=KnobCntrTab[6].Data[4];
    974             gTxMessage.Data[5]=KnobCntrTab[6].Data[5];
    975             gTxMessage.Data[6]=KnobCntrTab[6].Data[6];
    976             gTxMessage.Data[7]=KnobCntrTab[6].Data[7];
    977          	 
    978             Can_Tx(CAN2, &gTxMessage);
    979             m_BMW_CAN.uAuxSendSn=__SN5_;
    980          	break;
    981            case __SN5_:
    982             gTxMessage.DLC=KnobCntrTab[7].DLC;
    983             gTxMessage.StdId=KnobCntrTab[7].StdId;
    984             gTxMessage.IDE=KnobCntrTab[7].IDE;
    985             gTxMessage.RTR=KnobCntrTab[7].RTR;
    986             gTxMessage.Data[0]=KnobCntrTab[7].Data[0];
    987             gTxMessage.Data[1]=KnobCntrTab[7].Data[1];
    988             gTxMessage.Data[2]=KnobCntrTab[7].Data[2];
    989             gTxMessage.Data[3]=KnobCntrTab[7].Data[3];
    990             gTxMessage.Data[4]=KnobCntrTab[7].Data[4];
    991             gTxMessage.Data[5]=KnobCntrTab[7].Data[5];
    992             gTxMessage.Data[6]=KnobCntrTab[7].Data[6];
    993             gTxMessage.Data[7]=KnobCntrTab[7].Data[7];
    994          	 
    995             Can_Tx(CAN2, &gTxMessage);
    996             m_BMW_CAN.uAuxSendSn=__SN8_;//__SN6_
    997          	break;
    998            case __SN6_:
    999             gTxMessage.DLC=KnobCntrTab[8].DLC;
   1000             gTxMessage.StdId=KnobCntrTab[8].StdId;
   1001             gTxMessage.IDE=KnobCntrTab[8].IDE;
   1002             gTxMessage.RTR=KnobCntrTab[8].RTR;
   1003             gTxMessage.Data[0]=KnobCntrTab[8].Data[0];
   1004             gTxMessage.Data[1]=KnobCntrTab[8].Data[1];
   1005             gTxMessage.Data[2]=KnobCntrTab[8].Data[2];
   1006             gTxMessage.Data[3]=KnobCntrTab[8].Data[3];
   1007             gTxMessage.Data[4]=KnobCntrTab[8].Data[4];
   1008             gTxMessage.Data[5]=KnobCntrTab[8].Data[5];
   1009             gTxMessage.Data[6]=KnobCntrTab[8].Data[6];
   1010             gTxMessage.Data[7]=KnobCntrTab[8].Data[7];
   1011          	 
   1012            // Can_Tx(CAN2, &gTxMessage);
   1013             m_BMW_CAN.uAuxSendSn=__SN7_;
   1014          	break;
   1015            case __SN7_:
   1016             gTxMessage.DLC=KnobCntrTab[9].DLC;
   1017             gTxMessage.StdId=KnobCntrTab[9].StdId;
   1018             gTxMessage.IDE=KnobCntrTab[9].IDE;
   1019             gTxMessage.RTR=KnobCntrTab[9].RTR;
   1020             gTxMessage.Data[0]=KnobCntrTab[9].Data[0];
   1021             gTxMessage.Data[1]=KnobCntrTab[9].Data[1];
   1022             gTxMessage.Data[2]=KnobCntrTab[9].Data[2];
   1023             gTxMessage.Data[3]=KnobCntrTab[9].Data[3];
   1024             gTxMessage.Data[4]=KnobCntrTab[9].Data[4];
   1025             gTxMessage.Data[5]=KnobCntrTab[9].Data[5];
   1026             gTxMessage.Data[6]=KnobCntrTab[9].Data[6];
   1027             gTxMessage.Data[7]=KnobCntrTab[9].Data[7];
   1028          	 
   1029             //Can_Tx(CAN2, &gTxMessage);
   1030             m_BMW_CAN.uAuxSendSn=__SN8_;
   1031          	break;
   1032            case __SN8_:
   1033             gTxMessage.DLC=KnobCntrTab[10].DLC;
   1034             gTxMessage.StdId=KnobCntrTab[10].StdId;
   1035             gTxMessage.IDE=KnobCntrTab[10].IDE;
   1036             gTxMessage.RTR=KnobCntrTab[10].RTR;
   1037             gTxMessage.Data[0]=KnobCntrTab[10].Data[0];
   1038             gTxMessage.Data[1]=KnobCntrTab[10].Data[1];
   1039             gTxMessage.Data[2]=KnobCntrTab[10].Data[2];
   1040             gTxMessage.Data[3]=KnobCntrTab[10].Data[3];
   1041             gTxMessage.Data[4]=KnobCntrTab[10].Data[4];
   1042             gTxMessage.Data[5]=KnobCntrTab[10].Data[5];
   1043             gTxMessage.Data[6]=KnobCntrTab[10].Data[6];
   1044             gTxMessage.Data[7]=KnobCntrTab[10].Data[7];
   1045          	 
   1046             Can_Tx(CAN2, &gTxMessage);
   1047             m_BMW_CAN.uAuxSendSn=__SN9_;
   1048          	break;
   1049            case __SN9_:
   1050             gTxMessage.DLC=KnobCntrTab[11].DLC;
   1051             gTxMessage.StdId=KnobCntrTab[11].StdId;
   1052             gTxMessage.IDE=KnobCntrTab[11].IDE;
   1053             gTxMessage.RTR=KnobCntrTab[11].RTR;
   1054             gTxMessage.Data[0]=KnobCntrTab[11].Data[0];
   1055             gTxMessage.Data[1]=KnobCntrTab[11].Data[1];
   1056             gTxMessage.Data[2]=KnobCntrTab[11].Data[2];
   1057             gTxMessage.Data[3]=KnobCntrTab[11].Data[3];
   1058             gTxMessage.Data[4]=KnobCntrTab[11].Data[4];
   1059             gTxMessage.Data[5]=KnobCntrTab[11].Data[5];
   1060             gTxMessage.Data[6]=KnobCntrTab[11].Data[6];
   1061             gTxMessage.Data[7]=KnobCntrTab[11].Data[7];
   1062          	 
   1063             //Can_Tx(CAN2, &gTxMessage);
   1064             m_BMW_CAN.uAuxSendSn=__SN10_;
   1065          	break;
   1066            case __SN10_:
   1067             gTxMessage.DLC=KnobCntrTab[12].DLC;
   1068             gTxMessage.StdId=KnobCntrTab[12].StdId;
   1069             gTxMessage.IDE=KnobCntrTab[12].IDE;
   1070             gTxMessage.RTR=KnobCntrTab[12].RTR;
   1071             gTxMessage.Data[0]=KnobCntrTab[12].Data[0];
   1072             gTxMessage.Data[1]=KnobCntrTab[12].Data[1];
   1073             gTxMessage.Data[2]=KnobCntrTab[12].Data[2];
   1074             gTxMessage.Data[3]=KnobCntrTab[12].Data[3];
   1075             gTxMessage.Data[4]=KnobCntrTab[12].Data[4];
   1076             gTxMessage.Data[5]=KnobCntrTab[12].Data[5];
   1077             gTxMessage.Data[6]=KnobCntrTab[12].Data[6];
   1078             gTxMessage.Data[7]=KnobCntrTab[12].Data[7];
   1079          	 
   1080             Can_Tx(CAN2, &gTxMessage);
   1081             m_BMW_CAN.uAuxSendSn=__SN11_;
   1082          	break;
   1083            case __SN11_:
   1084             gTxMessage.DLC=KnobCntrTab[13].DLC;
   1085             gTxMessage.StdId=KnobCntrTab[13].StdId;
   1086             gTxMessage.IDE=KnobCntrTab[13].IDE;
   1087             gTxMessage.RTR=KnobCntrTab[13].RTR;
   1088             gTxMessage.Data[0]=KnobCntrTab[13].Data[0];
   1089             gTxMessage.Data[1]=KnobCntrTab[13].Data[1];
   1090             gTxMessage.Data[2]=KnobCntrTab[13].Data[2];
   1091             gTxMessage.Data[3]=KnobCntrTab[13].Data[3];
   1092             gTxMessage.Data[4]=KnobCntrTab[13].Data[4];
   1093             gTxMessage.Data[5]=KnobCntrTab[13].Data[5];
   1094             gTxMessage.Data[6]=KnobCntrTab[13].Data[6];
   1095             gTxMessage.Data[7]=KnobCntrTab[13].Data[7];
   1096          	 
   1097             Can_Tx(CAN2, &gTxMessage);
   1098             m_BMW_CAN.uAuxSendSn=__SN12_;
   1099          	break;
   1100          
   1101            case __SN12_:
   1102             gTxMessage.DLC=KnobCntrTab[14].DLC;
   1103             gTxMessage.StdId=KnobCntrTab[14].StdId;
   1104             gTxMessage.IDE=KnobCntrTab[14].IDE;
   1105             gTxMessage.RTR=KnobCntrTab[14].RTR;
   1106             gTxMessage.Data[0]=KnobCntrTab[14].Data[0];
   1107             gTxMessage.Data[1]=KnobCntrTab[14].Data[1];
   1108             gTxMessage.Data[2]=KnobCntrTab[14].Data[2];
   1109             gTxMessage.Data[3]=KnobCntrTab[14].Data[3];
   1110             gTxMessage.Data[4]=KnobCntrTab[14].Data[4];
   1111             gTxMessage.Data[5]=KnobCntrTab[14].Data[5];
   1112             gTxMessage.Data[6]=KnobCntrTab[14].Data[6];
   1113             gTxMessage.Data[7]=KnobCntrTab[14].Data[7];
   1114          	 
   1115             Can_Tx(CAN2, &gTxMessage);
   1116             m_BMW_CAN.uAuxSendSn=__SN13_;
   1117          	break;
   1118            case __SN13_:
   1119             gTxMessage.DLC=KnobCntrTab[15].DLC;
   1120             gTxMessage.StdId=KnobCntrTab[15].StdId;
   1121             gTxMessage.IDE=KnobCntrTab[15].IDE;
   1122             gTxMessage.RTR=KnobCntrTab[15].RTR;
   1123             gTxMessage.Data[0]=KnobCntrTab[15].Data[0];
   1124             gTxMessage.Data[1]=KnobCntrTab[15].Data[1];
   1125             gTxMessage.Data[2]=KnobCntrTab[15].Data[2];
   1126             gTxMessage.Data[3]=KnobCntrTab[15].Data[3];
   1127             gTxMessage.Data[4]=KnobCntrTab[15].Data[4];
   1128             gTxMessage.Data[5]=KnobCntrTab[15].Data[5];
   1129             gTxMessage.Data[6]=KnobCntrTab[15].Data[6];
   1130             gTxMessage.Data[7]=KnobCntrTab[15].Data[7];
   1131          	 
   1132             Can_Tx(CAN2, &gTxMessage);
   1133             m_BMW_CAN.uAuxSendSn=__SN14_;
   1134          	break;
   1135            case __SN14_:
   1136             gTxMessage.DLC=KnobCntrTab[16].DLC;
   1137             gTxMessage.StdId=KnobCntrTab[16].StdId;
   1138             gTxMessage.IDE=KnobCntrTab[16].IDE;
   1139             gTxMessage.RTR=KnobCntrTab[16].RTR;
   1140             gTxMessage.Data[0]=KnobCntrTab[16].Data[0];
   1141             gTxMessage.Data[1]=KnobCntrTab[16].Data[1];
   1142             gTxMessage.Data[2]=KnobCntrTab[16].Data[2];
   1143             gTxMessage.Data[3]=KnobCntrTab[16].Data[3];
   1144             gTxMessage.Data[4]=KnobCntrTab[16].Data[4];
   1145             gTxMessage.Data[5]=KnobCntrTab[16].Data[5];
   1146             gTxMessage.Data[6]=KnobCntrTab[16].Data[6];
   1147             gTxMessage.Data[7]=KnobCntrTab[16].Data[7];
   1148          	 
   1149             Can_Tx(CAN2, &gTxMessage);
   1150             m_BMW_CAN.uAuxSendSn=__SN15_;
   1151          	break;
   1152            case __SN15_:
   1153             gTxMessage.DLC=KnobCntrTab[17].DLC;
   1154             gTxMessage.StdId=KnobCntrTab[17].StdId;
   1155             gTxMessage.IDE=KnobCntrTab[17].IDE;
   1156             gTxMessage.RTR=KnobCntrTab[17].RTR;
   1157             gTxMessage.Data[0]=KnobCntrTab[17].Data[0];
   1158             gTxMessage.Data[1]=KnobCntrTab[17].Data[1];
   1159             gTxMessage.Data[2]=KnobCntrTab[17].Data[2];
   1160             gTxMessage.Data[3]=KnobCntrTab[17].Data[3];
   1161             gTxMessage.Data[4]=KnobCntrTab[17].Data[4];
   1162             gTxMessage.Data[5]=KnobCntrTab[17].Data[5];
   1163             gTxMessage.Data[6]=KnobCntrTab[17].Data[6];
   1164             gTxMessage.Data[7]=KnobCntrTab[17].Data[7];
   1165          	 
   1166             Can_Tx(CAN2, &gTxMessage);
   1167             m_BMW_CAN.uAuxSendSn=__SN16_;
   1168          	break;
   1169          	case __SN16_:
   1170          	 gTxMessage.DLC=KnobCntrTab[18].DLC;
   1171          	 gTxMessage.StdId=KnobCntrTab[18].StdId;
   1172          	 gTxMessage.IDE=KnobCntrTab[18].IDE;
   1173          	 gTxMessage.RTR=KnobCntrTab[18].RTR;
   1174          	 gTxMessage.Data[0]=KnobCntrTab[18].Data[0];
   1175          	 gTxMessage.Data[1]=KnobCntrTab[18].Data[1];
   1176          	 gTxMessage.Data[2]=KnobCntrTab[18].Data[2];
   1177          	 gTxMessage.Data[3]=KnobCntrTab[18].Data[3];
   1178          	 gTxMessage.Data[4]=KnobCntrTab[18].Data[4];
   1179          	 gTxMessage.Data[5]=KnobCntrTab[18].Data[5];
   1180          	 gTxMessage.Data[6]=KnobCntrTab[18].Data[6];
   1181          	 gTxMessage.Data[7]=KnobCntrTab[18].Data[7];
   1182          	   
   1183          	 Can_Tx(CAN2, &gTxMessage);
   1184          	 m_BMW_CAN.uAuxSendSn=__SN17_;
   1185          	  break;
   1186              case __SN17_:
   1187             gTxMessage.DLC=KnobCntrTab[19].DLC;
   1188             gTxMessage.StdId=KnobCntrTab[19].StdId;
   1189             gTxMessage.IDE=KnobCntrTab[19].IDE;
   1190             gTxMessage.RTR=KnobCntrTab[19].RTR;
   1191             gTxMessage.Data[0]=KnobCntrTab[19].Data[0];
   1192             gTxMessage.Data[1]=KnobCntrTab[19].Data[1];
   1193             gTxMessage.Data[2]=KnobCntrTab[19].Data[2];
   1194             gTxMessage.Data[3]=KnobCntrTab[19].Data[3];
   1195             gTxMessage.Data[4]=KnobCntrTab[19].Data[4];
   1196             gTxMessage.Data[5]=KnobCntrTab[19].Data[5];
   1197             gTxMessage.Data[6]=KnobCntrTab[19].Data[6];
   1198             gTxMessage.Data[7]=KnobCntrTab[19].Data[7];
   1199          	 
   1200             Can_Tx(CAN2, &gTxMessage);
   1201             m_BMW_CAN.uAuxSendSn=__SN18_;
   1202          	break;
   1203          	case __SN18_:
   1204          	 gTxMessage.DLC=KnobCntrTab[20].DLC;
   1205          	 gTxMessage.StdId=KnobCntrTab[20].StdId;
   1206          	 gTxMessage.IDE=KnobCntrTab[20].IDE;
   1207          	 gTxMessage.RTR=KnobCntrTab[20].RTR;
   1208          	 gTxMessage.Data[0]=KnobCntrTab[20].Data[0];
   1209          	 gTxMessage.Data[1]=KnobCntrTab[20].Data[1];
   1210          	 gTxMessage.Data[2]=KnobCntrTab[20].Data[2];
   1211          	 gTxMessage.Data[3]=KnobCntrTab[20].Data[3];
   1212          	 gTxMessage.Data[4]=KnobCntrTab[20].Data[4];
   1213          	 gTxMessage.Data[5]=KnobCntrTab[20].Data[5];
   1214          	 gTxMessage.Data[6]=KnobCntrTab[20].Data[6];
   1215          	 gTxMessage.Data[7]=KnobCntrTab[20].Data[7];
   1216          	   
   1217          	 Can_Tx(CAN2, &gTxMessage);
   1218          	 m_BMW_CAN.uAuxSendSn=__SN19_;
   1219          	  break;
   1220              case __SN19_:
   1221             gTxMessage.DLC=KnobCntrTab[21].DLC;
   1222             gTxMessage.StdId=KnobCntrTab[21].StdId;
   1223             gTxMessage.IDE=KnobCntrTab[21].IDE;
   1224             gTxMessage.RTR=KnobCntrTab[21].RTR;
   1225             gTxMessage.Data[0]=KnobCntrTab[21].Data[0];
   1226             gTxMessage.Data[1]=KnobCntrTab[21].Data[1];
   1227             gTxMessage.Data[2]=KnobCntrTab[21].Data[2];
   1228             gTxMessage.Data[3]=KnobCntrTab[21].Data[3];
   1229             gTxMessage.Data[4]=KnobCntrTab[21].Data[4];
   1230             gTxMessage.Data[5]=KnobCntrTab[21].Data[5];
   1231             gTxMessage.Data[6]=KnobCntrTab[21].Data[6];
   1232             gTxMessage.Data[7]=KnobCntrTab[21].Data[7];
   1233          	 
   1234             Can_Tx(CAN2, &gTxMessage);
   1235             m_BMW_CAN.uAuxSendSn=__SN20_;
   1236          	break;
   1237          	case __SN20_:
   1238             gTxMessage.DLC=KnobCntrTab[22].DLC;
   1239             gTxMessage.StdId=KnobCntrTab[22].StdId;
   1240             gTxMessage.IDE=KnobCntrTab[22].IDE;
   1241             gTxMessage.RTR=KnobCntrTab[22].RTR;
   1242             gTxMessage.Data[0]=KnobCntrTab[22].Data[0];
   1243             gTxMessage.Data[1]=KnobCntrTab[22].Data[1];
   1244             gTxMessage.Data[2]=KnobCntrTab[22].Data[2];
   1245             gTxMessage.Data[3]=KnobCntrTab[22].Data[3];
   1246             gTxMessage.Data[4]=KnobCntrTab[22].Data[4];
   1247             gTxMessage.Data[5]=KnobCntrTab[22].Data[5];
   1248             gTxMessage.Data[6]=KnobCntrTab[22].Data[6];
   1249             gTxMessage.Data[7]=KnobCntrTab[22].Data[7];
   1250          	 
   1251             Can_Tx(CAN2, &gTxMessage);
   1252             m_BMW_CAN.uAuxSendSn=__SN21_;
   1253          	break;
   1254          	case __SN21_:
   1255             gTxMessage.DLC=KnobCntrTab[23].DLC;
   1256             gTxMessage.StdId=KnobCntrTab[23].StdId;
   1257             gTxMessage.IDE=KnobCntrTab[23].IDE;
   1258             gTxMessage.RTR=KnobCntrTab[23].RTR;
   1259             gTxMessage.Data[0]=KnobCntrTab[23].Data[0];
   1260             gTxMessage.Data[1]=KnobCntrTab[23].Data[1];
   1261             gTxMessage.Data[2]=KnobCntrTab[23].Data[2];
   1262             gTxMessage.Data[3]=KnobCntrTab[23].Data[3];
   1263             gTxMessage.Data[4]=KnobCntrTab[23].Data[4];
   1264             gTxMessage.Data[5]=KnobCntrTab[23].Data[5];
   1265             gTxMessage.Data[6]=KnobCntrTab[23].Data[6];
   1266             gTxMessage.Data[7]=KnobCntrTab[23].Data[7];
   1267          	 
   1268             Can_Tx(CAN2, &gTxMessage);
   1269             m_BMW_CAN.uAuxSendSn=__SN22_;
   1270          	break;
   1271          case __SN22_:
   1272             gTxMessage.DLC=KnobCntrTab[24].DLC;
   1273             gTxMessage.StdId=KnobCntrTab[24].StdId;
   1274             gTxMessage.IDE=KnobCntrTab[24].IDE;
   1275             gTxMessage.RTR=KnobCntrTab[24].RTR;
   1276             gTxMessage.Data[0]=KnobCntrTab[24].Data[0];
   1277             gTxMessage.Data[1]=KnobCntrTab[24].Data[1];
   1278             gTxMessage.Data[2]=KnobCntrTab[24].Data[2];
   1279             gTxMessage.Data[3]=KnobCntrTab[24].Data[3];
   1280             gTxMessage.Data[4]=KnobCntrTab[24].Data[4];
   1281             gTxMessage.Data[5]=KnobCntrTab[24].Data[5];
   1282             gTxMessage.Data[6]=KnobCntrTab[24].Data[6];
   1283             gTxMessage.Data[7]=KnobCntrTab[24].Data[7];
   1284          	 
   1285             Can_Tx(CAN2, &gTxMessage);
   1286             m_BMW_CAN.uAuxSendSn=__SN23_;
   1287          	break;
   1288           case __SN23_:
   1289             gTxMessage.DLC=KnobCntrTab[25].DLC;
   1290             gTxMessage.StdId=KnobCntrTab[25].StdId;
   1291             gTxMessage.IDE=KnobCntrTab[25].IDE;
   1292             gTxMessage.RTR=KnobCntrTab[25].RTR;
   1293             gTxMessage.Data[0]=KnobCntrTab[25].Data[0];
   1294             gTxMessage.Data[1]=KnobCntrTab[25].Data[1];
   1295             gTxMessage.Data[2]=KnobCntrTab[25].Data[2];
   1296             gTxMessage.Data[3]=KnobCntrTab[25].Data[3];
   1297             gTxMessage.Data[4]=KnobCntrTab[25].Data[4];
   1298             gTxMessage.Data[5]=KnobCntrTab[25].Data[5];
   1299             gTxMessage.Data[6]=KnobCntrTab[25].Data[6];
   1300             gTxMessage.Data[7]=KnobCntrTab[25].Data[7];
   1301          	 
   1302             Can_Tx(CAN2, &gTxMessage);
   1303             m_BMW_CAN.uAuxSendSn=__SN24_;
   1304          	break;
   1305            case __SN24_:
   1306             gTxMessage.DLC=KnobCntrTab[26].DLC;
   1307             gTxMessage.StdId=KnobCntrTab[26].StdId;
   1308             gTxMessage.IDE=KnobCntrTab[26].IDE;
   1309             gTxMessage.RTR=KnobCntrTab[26].RTR;
   1310             gTxMessage.Data[0]=KnobCntrTab[26].Data[0];
   1311             gTxMessage.Data[1]=KnobCntrTab[26].Data[1];
   1312             gTxMessage.Data[2]=KnobCntrTab[26].Data[2];
   1313             gTxMessage.Data[3]=KnobCntrTab[26].Data[3];
   1314             gTxMessage.Data[4]=KnobCntrTab[26].Data[4];
   1315             gTxMessage.Data[5]=KnobCntrTab[26].Data[5];
   1316             gTxMessage.Data[6]=KnobCntrTab[26].Data[6];
   1317             gTxMessage.Data[7]=KnobCntrTab[26].Data[7];
   1318          	 
   1319             Can_Tx(CAN2, &gTxMessage);
   1320             m_BMW_CAN.uAuxSendSn=__SN25_;
   1321          	break;
   1322             case __SN25_:
   1323             gTxMessage.DLC=KnobCntrTab[27].DLC;
   1324             gTxMessage.StdId=KnobCntrTab[27].StdId;
   1325             gTxMessage.IDE=KnobCntrTab[27].IDE;
   1326             gTxMessage.RTR=KnobCntrTab[27].RTR;
   1327             gTxMessage.Data[0]=KnobCntrTab[27].Data[0];
   1328             gTxMessage.Data[1]=KnobCntrTab[27].Data[1];
   1329             gTxMessage.Data[2]=KnobCntrTab[27].Data[2];
   1330             gTxMessage.Data[3]=KnobCntrTab[27].Data[3];
   1331             gTxMessage.Data[4]=KnobCntrTab[27].Data[4];
   1332             gTxMessage.Data[5]=KnobCntrTab[27].Data[5];
   1333             gTxMessage.Data[6]=KnobCntrTab[27].Data[6];
   1334             gTxMessage.Data[7]=KnobCntrTab[27].Data[7];
   1335          	 
   1336             Can_Tx(CAN2, &gTxMessage);
   1337             m_BMW_CAN.uAuxSendSn=__SN26_;
   1338          	break;
   1339              case __SN26_:
   1340             gTxMessage.DLC=KnobCntrTab[28].DLC;
   1341             gTxMessage.StdId=KnobCntrTab[28].StdId;
   1342             gTxMessage.IDE=KnobCntrTab[28].IDE;
   1343             gTxMessage.RTR=KnobCntrTab[28].RTR;
   1344             gTxMessage.Data[0]=KnobCntrTab[28].Data[0];
   1345             gTxMessage.Data[1]=KnobCntrTab[28].Data[1];
   1346             gTxMessage.Data[2]=KnobCntrTab[28].Data[2];
   1347             gTxMessage.Data[3]=KnobCntrTab[28].Data[3];
   1348             gTxMessage.Data[4]=KnobCntrTab[28].Data[4];
   1349             gTxMessage.Data[5]=KnobCntrTab[28].Data[5];
   1350             gTxMessage.Data[6]=KnobCntrTab[28].Data[6];
   1351             gTxMessage.Data[7]=KnobCntrTab[28].Data[7];
   1352          	 
   1353             Can_Tx(CAN2, &gTxMessage);
   1354             m_BMW_CAN.uAuxSendSn=__SN_END_;
   1355          	break;
   1356            default:
   1357          	m_BMW_CAN.uAuxSendSn=__SN_END_;
   1358          	break;
   1359          	
   1360          	
   1361            }
   1362          }
   1363          void BMW_OptionKey_Task(void)
   1364          {
   1365            CanTxMsg gTxMessage;
   1366            
   1367            switch(m_BMW_CAN.uOptionSendSn)
   1368            {
   1369            case __SN0_:
   1370             gTxMessage.DLC=KnobCntrTab[29].DLC;
   1371             gTxMessage.StdId=KnobCntrTab[29].StdId;
   1372             gTxMessage.IDE=KnobCntrTab[29].IDE;
   1373             gTxMessage.RTR=KnobCntrTab[29].RTR;
   1374             gTxMessage.Data[0]=KnobCntrTab[29].Data[0];
   1375             gTxMessage.Data[1]=KnobCntrTab[29].Data[1];
   1376             gTxMessage.Data[2]=KnobCntrTab[29].Data[2];
   1377             gTxMessage.Data[3]=KnobCntrTab[29].Data[3];
   1378             gTxMessage.Data[4]=KnobCntrTab[29].Data[4];
   1379             gTxMessage.Data[5]=KnobCntrTab[29].Data[5];
   1380             gTxMessage.Data[6]=KnobCntrTab[29].Data[6];
   1381             gTxMessage.Data[7]=KnobCntrTab[29].Data[7];
   1382               
   1383             Can_Tx(CAN2, &gTxMessage);
   1384             m_BMW_CAN.uOptionSendSn=__SN1_;
   1385              break;
   1386            case __SN1_:
   1387              gTxMessage.DLC=KnobCntrTab[30].DLC;
   1388             gTxMessage.StdId=KnobCntrTab[30].StdId;
   1389             gTxMessage.IDE=KnobCntrTab[30].IDE;
   1390             gTxMessage.RTR=KnobCntrTab[30].RTR;
   1391             gTxMessage.Data[0]=KnobCntrTab[30].Data[0];
   1392             gTxMessage.Data[1]=KnobCntrTab[30].Data[1];
   1393             gTxMessage.Data[2]=KnobCntrTab[30].Data[2];
   1394             gTxMessage.Data[3]=KnobCntrTab[30].Data[3];
   1395             gTxMessage.Data[4]=KnobCntrTab[30].Data[4];
   1396             gTxMessage.Data[5]=KnobCntrTab[30].Data[5];
   1397             gTxMessage.Data[6]=KnobCntrTab[30].Data[6];
   1398             gTxMessage.Data[7]=KnobCntrTab[30].Data[7];
   1399              Can_Tx(CAN2, &gTxMessage);
   1400             m_BMW_CAN.uOptionSendSn=__SN2_;
   1401              break;
   1402            case __SN2_:
   1403             gTxMessage.DLC=KnobCntrTab[31].DLC;
   1404             gTxMessage.StdId=KnobCntrTab[31].StdId;
   1405             gTxMessage.IDE=KnobCntrTab[31].IDE;
   1406             gTxMessage.RTR=KnobCntrTab[31].RTR;
   1407             gTxMessage.Data[0]=KnobCntrTab[31].Data[0];
   1408             gTxMessage.Data[1]=KnobCntrTab[31].Data[1];
   1409             gTxMessage.Data[2]=KnobCntrTab[31].Data[2];
   1410             gTxMessage.Data[3]=KnobCntrTab[31].Data[3];
   1411             gTxMessage.Data[4]=KnobCntrTab[31].Data[4];
   1412             gTxMessage.Data[5]=KnobCntrTab[31].Data[5];
   1413             gTxMessage.Data[6]=KnobCntrTab[31].Data[6];
   1414             gTxMessage.Data[7]=KnobCntrTab[31].Data[7];
   1415               
   1416             Can_Tx(CAN2, &gTxMessage);
   1417             m_BMW_CAN.uOptionSendSn=__SN3_;
   1418              break;
   1419            case __SN3_:
   1420             gTxMessage.DLC=KnobCntrTab[32].DLC;
   1421             gTxMessage.StdId=KnobCntrTab[32].StdId;
   1422             gTxMessage.IDE=KnobCntrTab[32].IDE;
   1423             gTxMessage.RTR=KnobCntrTab[32].RTR;
   1424             gTxMessage.Data[0]=KnobCntrTab[32].Data[0];
   1425             gTxMessage.Data[1]=KnobCntrTab[32].Data[1];
   1426             gTxMessage.Data[2]=KnobCntrTab[32].Data[2];
   1427             gTxMessage.Data[3]=KnobCntrTab[32].Data[3];
   1428             gTxMessage.Data[4]=KnobCntrTab[32].Data[4];
   1429             gTxMessage.Data[5]=KnobCntrTab[32].Data[5];
   1430             gTxMessage.Data[6]=KnobCntrTab[32].Data[6];
   1431             gTxMessage.Data[7]=KnobCntrTab[32].Data[7];
   1432               
   1433             Can_Tx(CAN2, &gTxMessage);
   1434             m_BMW_CAN.uOptionSendSn=__SN0_;
   1435              break;
   1436            
   1437            default:
   1438              m_BMW_CAN.uOptionSendSn=__SN0_;
   1439              break;
   1440              
   1441              
   1442            }
   1443          }
   1444          
   1445          
   1446          #endif
   1447          void AudiCanBus_SendControlCmd(BYTE cmd)
   1448          {
   1449              m_BMW_CAN.uCanSendCmdIndex++;
   1450              if (m_BMW_CAN.uCanSendCmdIndex >= BENZE_CAN_CNTR_BUF_MAX)
   1451              {
   1452                  m_BMW_CAN.uCanSendCmdIndex = 0;
   1453              }
   1454              m_BMW_CAN.uCanSendCmdBuf[m_BMW_CAN.uCanSendCmdIndex] = cmd;
   1455          }
   1456          
   1457          /**************************************************************************/
   1458          /*                                                                        */
   1459          /**************************************************************************/
   1460          
   1461           BYTE AudiCan_FetchCmd(void)
   1462          {
   1463              BYTE temp;
   1464              if (m_BMW_CAN.uCanFetchCmdIndex != m_BMW_CAN.uCanSendCmdIndex)
   1465              {
   1466          
   1467                  m_BMW_CAN.uCanFetchCmdIndex++;
   1468                  if (m_BMW_CAN.uCanFetchCmdIndex >= BENZE_CAN_CNTR_BUF_MAX)
   1469                  {
   1470                      m_BMW_CAN.uCanFetchCmdIndex = 0;
   1471                  }
   1472                  temp = m_BMW_CAN.uCanFetchCmdIndex;
   1473          
   1474                  return m_BMW_CAN.uCanSendCmdBuf[temp];
   1475          
   1476          
   1477              }
   1478              else
   1479              {
   1480                  return BENZE_CMD_NULL;
   1481              }
   1482          }
   1483          
   1484          
   1485          /**************************************************************************/
   1486          /*                                                                        */
   1487          /**************************************************************************/
   1488          
   1489          void Can_FetchSteerKeyInfo_Type4(CanRxMsg RxMessage)
   1490          {
   1491              static vu8 uCKeepFlag = 0;
   1492              static vu8 uRetKeepFlag = 0;
   1493              static vu16 wBounceCnt = 0;
   1494             
   1495          
   1496              if (!(RxMessage.StdId == BWM_CAN_STEER_KEY_STD__TYPE4_ID && RxMessage.DLC == 6))
   1497              {
   1498                  return ;
   1499              }
   1500              
   1501              //initial
   1502              m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
   1503              //
   1504              /**************************FIrst pressed ************************************/
   1505              
   1506              if ((RxMessage.Data[3]==0x21&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x22&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
   1507                  //knob right
   1508              {
   1509                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBRT_PRESSED;
   1510              }
   1511              else if ((RxMessage.Data[3]==0x81&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x82&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
   1512                  //knob left
   1513              {
   1514                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBLT_PRESSED;
   1515              }
   1516              else if( (RxMessage.Data[3]==0x11&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x12&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
   1517                  //knob up
   1518              {
   1519                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBUP_PRESSED;
   1520              }
   1521              else if ((RxMessage.Data[3]==0x41&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x42&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
   1522                  //knob dn
   1523              {
   1524                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBDN_PRESSED;
   1525              }
   1526              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xDE&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xDE&&RxMessage.Data[5]==0x01))
   1527                  //knob enter
   1528              {
   1529                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBENTER_PRESSED;
   1530              }
   1531              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x04)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x04))
   1532                  //option
   1533              {
   1534                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_OPTION_PRESSED;
   1535              }
   1536              
   1537              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x02)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x02))
   1538                  //back
   1539              {
   1540                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_BACK_PRESSED;
   1541              }
   1542              
   1543              
   1544              else if( (RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x08)||(RxMessage.Data[3]==0x02&&RxMessage.Data[3]==0xC0&&RxMessage.Data[3]==0x08))
   1545                  //radio
   1546              {
   1547                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_RADIO_PRESSED;
   1548              }
   1549              else if( (RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x10)||(RxMessage.Data[3]==0x02&&RxMessage.Data[3]==0xC0&&RxMessage.Data[3]==0x10))
   1550                  //media
   1551              {
   1552                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_MEDIA_PRESSED;
   1553              }
   1554              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x01))
   1555                  //menu
   1556              {
   1557                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_MENU_PRESSED;
   1558              }
   1559              else if ((RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x01))
   1560                  //menu keep
   1561              {
   1562                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_BACK_KEEP;
   1563              }
   1564              
   1565              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x40)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x40))
   1566                  //tel
   1567              {
   1568                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_TEL_PRESSED;
   1569              }
   1570              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x20)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x20))
   1571                  //map
   1572              {
   1573                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_MAP_PRESSED;
   1574              }
   1575              
   1576              else
   1577              {
   1578          
   1579                  //-------------------------------------------------------
   1580                  wBounceCnt++;
   1581                  if (wBounceCnt >= 2)
   1582                  {
   1583                      uCKeepFlag = 0;
   1584                      uRetKeepFlag = 0;
   1585                      m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
   1586                      wBounceCnt = 0;
   1587                  }
   1588                  m_BMW_CAN.uKeyKeepCnt = 0;
   1589                  m_BMW_CAN.uKeyKeepInDepCnt=0;
   1590                  m_BMW_CAN.bKeyKeepOneTime = 0;
   1591          
   1592              }
   1593          
   1594          
   1595              switch (m_BMW_CAN.uKeyID)
   1596              {
   1597              case BENZE_KEY_ALL_BOUNCED:
   1598                  uCKeepFlag = 0;
   1599                  uRetKeepFlag = 0;
   1600                  m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
   1601                  wBounceCnt = 0;
   1602                  m_BMW_CAN.uKeyKeepCnt = 0;
   1603                  m_BMW_CAN.bKeyKeepOneTime = 0;
   1604                  break;
   1605              /********************Process first pressed**********************************/
   1606              case BENZE_KEY_KnobAround_KEY_KNOBRT_PRESSED:
   1607                  m_BMW_CAN.uKeyKeepCnt++;
   1608                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1609                      //bounce
   1610                  {
   1611                      //process first pressed data
   1612                      AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_RIGHT_PRESSED);
   1613                  }
   1614                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1615                      //keep
   1616                  {
   1617                      m_BMW_CAN.uKeyKeepCnt = 2;
   1618                      //process keep data
   1619                      
   1620                  }
   1621                  break;
   1622              
   1623          
   1624              case BENZE_KEY_KnobAround_KEY_KNOBLT_PRESSED:
   1625                  m_BMW_CAN.uKeyKeepCnt++;
   1626                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1627                      //bounce
   1628                  {
   1629                      //process first pressed data
   1630                      AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_LEFT_PRESSED);
   1631                  }
   1632                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1633                      //keep
   1634                  {
   1635                      m_BMW_CAN.uKeyKeepCnt = 2;
   1636                      //process keep data
   1637                  }
   1638                  break;
   1639              case BENZE_KEY_KnobAround_KEY_KNOBUP_PRESSED:
   1640                  m_BMW_CAN.uKeyKeepCnt++;
   1641                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1642                      //bounce
   1643                  {
   1644                      //process first pressed data
   1645                      AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_UP_PRESSED);
   1646                  }
   1647                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1648                      //keep
   1649                  {
   1650                      m_BMW_CAN.uKeyKeepCnt = 2;
   1651                      //process keep data
   1652                  }
   1653                  break;
   1654              case BENZE_KEY_KnobAround_KEY_KNOBDN_PRESSED:
   1655                  m_BMW_CAN.uKeyKeepCnt++;
   1656                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1657                      //bounce
   1658                  {
   1659                      //process first pressed data
   1660                      AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_DN_PRESSED);
   1661                  }
   1662                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1663                      //keep
   1664                  {
   1665                      m_BMW_CAN.uKeyKeepCnt = 2;
   1666                      //process keep data
   1667                  }
   1668                  break;
   1669          		
   1670              case BENZE_KEY_KnobAround_KEY_KNOBENTER_PRESSED:
   1671                  m_BMW_CAN.uKeyKeepCnt++;
   1672                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1673                      //bounce
   1674                  {
   1675                      //process first pressed data
   1676                      AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_ENTER_PRESSED);
   1677                  }
   1678                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1679                      //keep
   1680                  {
   1681                      m_BMW_CAN.uKeyKeepCnt = 2;
   1682                      //process keep data
   1683                  }
   1684                  break;
   1685              
   1686              case BENZE_KEY_KnobAround_KEY_OPTION_PRESSED:
   1687                  m_BMW_CAN.uKeyKeepCnt++;
   1688                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1689                      //bounce
   1690                  {
   1691                      //process first pressed data
   1692                      //AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   1693                  }
   1694                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1695                      //keep
   1696                  {
   1697                      m_BMW_CAN.uKeyKeepCnt = 2;
   1698                      //process keep data
   1699                  }
   1700                  break;
   1701              case BENZE_KEY_KnobAround_KEY_BACK_PRESSED:
   1702                  m_BMW_CAN.uKeyKeepCnt++;
   1703                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1704                      //bounce
   1705                  {
   1706                      //process first pressed data
   1707                      //AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_RET_PRESSED);
   1708                    AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   1709                  }
   1710                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1711                      //keep
   1712                  {
   1713                      m_BMW_CAN.uKeyKeepCnt = 2;
   1714                      //process keep data
   1715                  }
   1716                  break;
   1717              
   1718              case BENZE_KEY_KnobAround_KEY_BACK_KEEP:
   1719                  m_BMW_CAN.uKeyKeepInDepCnt++;
   1720                  if (m_BMW_CAN.uKeyKeepInDepCnt == 1)
   1721                      //bounce
   1722                  {
   1723                      //process first pressed data
   1724                      AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_RET_KEEP);
   1725                  
   1726                  }
   1727                  else if (m_BMW_CAN.uKeyKeepInDepCnt >= 10)
   1728                      //keep
   1729                  {
   1730                      m_BMW_CAN.uKeyKeepInDepCnt = 2;
   1731                      //process keep data
   1732                  }
   1733                  break;
   1734                
   1735              case BENZE_KEY_KnobAround_KEY_RADIO_PRESSED:
   1736                  m_BMW_CAN.uKeyKeepCnt++;
   1737                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1738                      //bounce
   1739                  {
   1740                      //process first pressed data
   1741                      AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   1742                  }
   1743                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1744                      //keep
   1745                  {
   1746                      m_BMW_CAN.uKeyKeepCnt = 2;
   1747                      //process keep data
   1748                  }
   1749                  break;
   1750              case BENZE_KEY_KnobAround_KEY_MEDIA_PRESSED: //
   1751                  m_BMW_CAN.uKeyKeepCnt++;
   1752                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1753                      //bounce
   1754                  {
   1755                      //process first pressed data
   1756                      AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   1757                  }
   1758                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1759                      //keep
   1760                  {
   1761                      m_BMW_CAN.uKeyKeepCnt = 2;
   1762                      //process keep data
   1763                  }
   1764                  break;
   1765              case BENZE_KEY_KnobAround_KEY_MENU_PRESSED:
   1766                  m_BMW_CAN.uKeyKeepCnt++;
   1767                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1768                      //bounce
   1769                  {
   1770                      //process first pressed data
   1771                      AudiCanBus_SendControlCmd(BENZE_CMD_MENU_PRESSED);//
   1772                  }
   1773                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1774                      //keep
   1775                  {
   1776                      m_BMW_CAN.uKeyKeepCnt = 2;
   1777                      //process keep data
   1778                  }
   1779                  break;
   1780              case BENZE_KEY_KnobAround_KEY_TEL_PRESSED:
   1781                  m_BMW_CAN.uKeyKeepCnt++;
   1782                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1783                      //bounce
   1784                  {
   1785                      //process first pressed data
   1786                      AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   1787                  }
   1788                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1789                      //keep
   1790                  {
   1791                      m_BMW_CAN.uKeyKeepCnt = 2;
   1792                      //process keep data
   1793                  }
   1794                  break;
   1795              case BENZE_KEY_KnobAround_KEY_MAP_PRESSED:
   1796                  m_BMW_CAN.uKeyKeepCnt++;
   1797                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   1798                      //bounce
   1799                  {
   1800                      //process first pressed data
   1801                      AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED);
   1802                  }
   1803                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   1804                      //keep
   1805                  {
   1806                      m_BMW_CAN.uKeyKeepCnt = 2;
   1807                      //process keep data
   1808                  }
   1809                  break;
   1810              
   1811              /********************Process keep pressed**********************************/
   1812                  
   1813              default:
   1814                  m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
   1815                  m_BMW_CAN.uKeyKeepCnt = 0;
   1816                  m_BMW_CAN.bKeyKeepOneTime = 0;
   1817                  break;
   1818              }
   1819          }
   1820          void Can_FetchSteerKeyInfo_Type3(CanRxMsg RxMessage)
   1821          {
   1822              static vu8 uPreAction = 0;
   1823              static vu8 uPreVal = 0;
   1824              
   1825              if (!(RxMessage.StdId == BWM_CAN_STEER_KEY_STD__TYPE3_ID && RxMessage.DLC == 6))
   1826              {
   1827                  return ;
   1828              }
   1829              //initial
   1830              if(uPreAction==RxMessage.Data[2])//no action
   1831              {
   1832                  return ;
   1833              }  
   1834              //
   1835              if ((RxMessage.Data[3]>uPreVal)||(RxMessage.Data[3]==0x00&&uPreVal==0xFF))
   1836                  //add
   1837              {
   1838                  AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEINC_PRESSED);
   1839              }
   1840              else if ((RxMessage.Data[3] <uPreVal)||(RxMessage.Data[3]==0xFF&&uPreVal==0x00))
   1841                  //sub
   1842              {
   1843                  AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEDEC_PRESSED);
   1844              }
   1845              
   1846              uPreAction=RxMessage.Data[2];
   1847              uPreVal=RxMessage.Data[3];
   1848              
   1849          }
   1850          void Can_FetchSteerKeyInfo_Type2(CanRxMsg RxMessage)
   1851          {
   1852              if (!(RxMessage.StdId == BWM_CAN_STEER_KEY_STD__TYPE2_ID && RxMessage.DLC == 2))
   1853              {
   1854                  return ;
   1855              }
   1856          
   1857              //initial
   1858              
   1859              //
   1860              if (RxMessage.Data[0] ==0x80)
   1861                  //tune up
   1862              {
   1863                  AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEINC_PRESSED);
   1864              }
   1865              else if (RxMessage.Data[0] ==0x7E)
   1866                  //tune dn
   1867              {
   1868                  AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEDEC_PRESSED);
   1869              }
   1870              else if (RxMessage.Data[0] ==0x7F)
   1871                  //enter
   1872              {
   1873                  AudiCanBus_SendControlCmd(BENZE_CMD_KNOB_ENTER_PRESSED);
   1874              }
   1875          
   1876          }
   1877          void Can_FetchSteerKeyInfo_Type1(CanRxMsg RxMessage)
   1878          {
   1879              static vu8 uCKeepFlag = 0;
   1880              static vu8 uRetKeepFlag = 0;
   1881              static vu16 wBounceCnt = 0;
   1882              BYTE i;
   1883          
   1884              m_BMW_CAN.RxMessage.DLC = RxMessage.DLC;
   1885              if (!(RxMessage.StdId == BWM_CAN_STEER_KEY_STD__TYPE1_ID && RxMessage.DLC == 2))
   1886              {
   1887                  return ;
   1888              }
   1889              for(i = 0; i < 2; i++)
   1890                  m_BMW_CAN.RxMessage.Data[i] = RxMessage.Data[i];
   1891              //initial
   1892              m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   1893              //
   1894              if (RxMessage.Data[1] & 0x10)
   1895                  //mode
   1896              {
   1897                  m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_MODE_PRESSED;
   1898              }
   1899              else if (RxMessage.Data[1] & 0x01)
   1900                  //voice
   1901              {
   1902                  m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_VOICE_PRESSED;
   1903              }
   1904              else if (RxMessage.Data[0] & 0x01)
   1905                  //bt
   1906              {
   1907                  m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_BT_PRESSED;
   1908              }
   1909              
   1910              else
   1911              {
   1912          
   1913                  //-------------------------------------------------------
   1914                  wBounceCnt++;
   1915                  if (wBounceCnt >= 2)
   1916                  {
   1917                      uCKeepFlag = 0;
   1918                      uRetKeepFlag = 0;
   1919                      m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   1920                      wBounceCnt = 0;
   1921                  }
   1922                  m_BMW_CAN.uKeyKeepCnt2 = 0;
   1923                  m_BMW_CAN.bKeyKeepOneTime2 = 0;
   1924          
   1925              }
   1926          
   1927          
   1928              switch (m_BMW_CAN.uKeyID2)
   1929              {
   1930              case BENZE_KEY_ALL_BOUNCED:
   1931                  uCKeepFlag = 0;
   1932                  uRetKeepFlag = 0;
   1933                  m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   1934                  wBounceCnt = 0;
   1935                  m_BMW_CAN.uKeyKeepCnt2 = 0;
   1936                  m_BMW_CAN.bKeyKeepOneTime2 = 0;
   1937                  break;
   1938              case BENZE_KEY_STEERING_RIGHT_KEY_MODE_PRESSED:
   1939                  m_BMW_CAN.uKeyKeepCnt2++;
   1940                  if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   1941                      //bounce
   1942                  {
   1943                      //process first pressed data
   1944                      AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   1945                  }
   1946                  else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   1947                      //keep
   1948                  {
   1949                      m_BMW_CAN.uKeyKeepCnt2 = 2;
   1950                      //process keep data
   1951                      
   1952                  }
   1953                  break;
   1954              
   1955          
   1956              case BENZE_KEY_STEERING_RIGHT_KEY_VOICE_PRESSED:
   1957                  m_BMW_CAN.uKeyKeepCnt2++;
   1958                  if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   1959                      //bounce
   1960                  {
   1961                      //process first pressed data
   1962                      AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   1963                  }
   1964                  else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   1965                      //keep
   1966                  {
   1967                      m_BMW_CAN.uKeyKeepCnt2 = 2;
   1968                      //process keep data
   1969                  }
   1970                  break;
   1971              case BENZE_KEY_STEERING_RIGHT_KEY_BT_PRESSED:
   1972                  m_BMW_CAN.uKeyKeepCnt2++;
   1973                  if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   1974                      //bounce
   1975                  {
   1976                      //process first pressed data
   1977                      AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   1978                  }
   1979                  else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   1980                      //keep
   1981                  {
   1982                      m_BMW_CAN.uKeyKeepCnt2 = 2;
   1983                      //process keep data
   1984                  }
   1985                  break;
   1986              
   1987              default:
   1988                  m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   1989                  m_BMW_CAN.uKeyKeepCnt2 = 0;
   1990                  m_BMW_CAN.bKeyKeepOneTime2 = 0;
   1991                  break;
   1992              }
   1993          }
   1994          
   1995          /**************************************************************************/
   1996          /*                                                                        */
   1997          /**************************************************************************/
   1998          void AudiCan_FetchStallsInfo(CanRxMsg RxMessage)
   1999          {}
   2000          
   2001          void AudiCan_FetchStallsInfo_Q3(CanRxMsg RxMessage)
   2002          {
   2003          
   2004          
   2005          }
   2006          
   2007          void AudiCanBus_FetchCmdTask(void)
   2008          {}
   2009          //get input source info
   2010          void Audi_CanBus_InputSource_data_analytic(CanRxMsg RxMessage)
   2011          {
   2012              static vu8 uTxtInfoBuf[30];
   2013              static vu8 uTxtIndex = 0;
   2014             
   2015          
   2016          
   2017          
   2018              if (RxMessage.StdId == BMW_CAN_SOURCE2_STD_ID && RxMessage.DLC == 1) //list info
   2019              {
   2020                  uTxtIndex = 0;
   2021                  //------------------------------------------------------------------
   2022                  if(uTxtInfoBuf[5] == 'A' && uTxtInfoBuf[6] == 'U' && uTxtInfoBuf[7] == 'X')
   2023                  {
   2024                      m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_AUX;
   2025          
   2026                  }
   2027                  else if(uTxtInfoBuf[5] == 'E' && uTxtInfoBuf[6] == 'x' && uTxtInfoBuf[7] == 't')
   2028                  {
   2029                      m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_AUX;
   2030          
   2031                  }
   2032                  //-------------------------------------------------------------------
   2033                  if(uTxtInfoBuf[5] == 'F' && uTxtInfoBuf[6] == 'M')
   2034                  {
   2035                      m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_RAD;
   2036          
   2037                  }
   2038                  else if(uTxtInfoBuf[5] == 'R' && uTxtInfoBuf[6] == 'a' && uTxtInfoBuf[7] == 'd')
   2039                  {
   2040                      m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_RAD;
   2041          
   2042                  }
   2043                  else if(uTxtInfoBuf[5] == 'A' && uTxtInfoBuf[6] == 'M')
   2044                  {
   2045                      m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_RAD;
   2046          
   2047                  }
   2048                  else if(uTxtInfoBuf[5] == 'C' && uTxtInfoBuf[6] == 'D')
   2049                  {
   2050                      m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_CD;
   2051          
   2052                  }
   2053                  else if(uTxtInfoBuf[5] == 'S' && uTxtInfoBuf[6] == 'D')
   2054                  {
   2055                      m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_CD;
   2056          
   2057                  }
   2058                  else if(uTxtInfoBuf[5] == 'T' && uTxtInfoBuf[6] == 'r' && uTxtInfoBuf[7] == 'a')
   2059                  {
   2060                      m_BMW_CAN.CarAudioSoure = CAR_MEDIA_SYSTEM_IN_CD;
   2061          
   2062                  }
   2063                  //--------------------------------------------------------------------
   2064          
   2065          
   2066          
   2067          
   2068          
   2069              }
   2070          
   2071          
   2072          
   2073          }
   2074          //工作信息
   2075          void Audi_CanBus_work_data_analytic(CanRxMsg RxMessage)
   2076          {}
   2077          
   2078          
   2079          /////Audi Q3
   2080          
   2081          
   2082          
   2083          #if LF_CAN_TYPE == BWM5SCAN
   2084          void BWM_5S_CanBus_Config(void)
   2085          	{
   2086          	
   2087          		CAN_InitTypeDef CAN_InitStructure;
   2088          		CAN_FilterInitTypeDef CAN_FilterInitStructure;
   2089          		/* CAN register init */
   2090          		// CAN_DeInit();
   2091          		/* CAN1 and CAN2 register init */
   2092          		CAN_DeInit(CAN1);
   2093          		CAN_DeInit(CAN2);
   2094          	
   2095          	
   2096          		/* Struct init*/
   2097          		CAN_StructInit(&CAN_InitStructure);
   2098          	
   2099          		
   2100          		/*************************************************************
   2101          		
   2102          		主机CAN配置
   2103          		
   2104          		*************************************************************/
   2105          	
   2106          	
   2107          		/* CAN cell init */
   2108          		CAN_InitStructure.CAN_TTCM = DISABLE; //禁止时间触发通信模式
   2109          		CAN_InitStructure.CAN_ABOM = DISABLE;
   2110          		CAN_InitStructure.CAN_AWUM = DISABLE;
   2111          		CAN_InitStructure.CAN_NART = DISABLE;
   2112          		//CAN报文只被发送1次，不管发送的结果如何（成功、出错或仲裁丢失）
   2113          		CAN_InitStructure.CAN_RFLM = DISABLE;
   2114          		CAN_InitStructure.CAN_TXFP = DISABLE;
   2115          		CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
   2116          	
   2117          		CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
   2118          		CAN_InitStructure.CAN_BS1 = CAN_BS1_15tq; //1--16
   2119          		CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq; //1--8
   2120          		CAN_InitStructure.CAN_Prescaler = 16;
   2121          		////(pclk1/((1+8+7)*16)) = 32Mhz/16/16 = 125Kbits
   2122          		//CAN_Init(&CAN_InitStructure);
   2123          	
   2124          		/*Initializes the CAN1	and CAN2 */
   2125          		CAN_Init(CAN1, &CAN_InitStructure);
   2126          	
   2127          	
   2128          		/* CAN cell init */
   2129          		CAN_InitStructure.CAN_TTCM = DISABLE; //禁止时间触发通信模式
   2130          		CAN_InitStructure.CAN_ABOM = DISABLE;
   2131          		CAN_InitStructure.CAN_AWUM = DISABLE;
   2132          		CAN_InitStructure.CAN_NART = DISABLE;
   2133          		//CAN报文只被发送1次，不管发送的结果如何（成功、出错或仲裁丢失）
   2134          		CAN_InitStructure.CAN_RFLM = DISABLE;
   2135          		CAN_InitStructure.CAN_TXFP = DISABLE;
   2136          		CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
   2137          	
   2138          		CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
   2139          		CAN_InitStructure.CAN_BS1 = CAN_BS1_15tq; //1--16
   2140          		CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq; //1--8
   2141          		CAN_InitStructure.CAN_Prescaler = 16;
   2142          		////(pclk1/((1+8+7)*16)) = 32Mhz/16/16 = 125Kbits
   2143          		CAN_Init(CAN2, &CAN_InitStructure);
   2144          		
   2145          		CAN_FilterInitStructure.CAN_FilterNumber = 1; //选择过滤器7
   2146          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2147          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2148          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_AIR_INFO1_STD_ID << 5;
   2149          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2150          	
   2151          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2152          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2153          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2154          	
   2155          		
   2156          		CAN_FilterInitStructure.CAN_FilterNumber = 2; //选择过滤器7
   2157          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2158          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2159          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_AIR_INFO2_STD_ID << 5;
   2160          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2161          	
   2162          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2163          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2164          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2165          		
   2166          		CAN_FilterInitStructure.CAN_FilterNumber = 3; //选择过滤器7
   2167          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2168          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2169          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_AIR_INFO3_STD_ID << 5;
   2170          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2171          	
   2172          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2173          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2174          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2175          		
   2176          		CAN_FilterInitStructure.CAN_FilterNumber = 4; //选择过滤器7
   2177          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2178          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2179          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_STEERING_1_STD_ID << 5;
   2180          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2181          	
   2182          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2183          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2184          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2185          		
   2186          		CAN_FilterInitStructure.CAN_FilterNumber = 5; //选择过滤器7
   2187          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2188          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2189          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_STEERING_2_STD_ID << 5;
   2190          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2191          	
   2192          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2193          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2194          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2195          		
   2196          		CAN_FilterInitStructure.CAN_FilterNumber = 6; //选择过滤器7
   2197          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2198          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2199          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_STEERINGANGLE_STD_ID << 5;
   2200          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2201          	
   2202          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2203          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2204          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2205          		
   2206          		CAN_FilterInitStructure.CAN_FilterNumber = 7; //选择过滤器7
   2207          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2208          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2209          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_ACC_STD_ID << 5;
   2210          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2211          	
   2212          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2213          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2214          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2215          	
   2216          		
   2217          		CAN_FilterInitStructure.CAN_FilterNumber = 8; //选择过滤器7
   2218          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2219          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2220          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_TIMER_STD_ID << 5;
   2221          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2222          	
   2223          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2224          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2225          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2226          		
   2227          		CAN_FilterInitStructure.CAN_FilterNumber = 9; //选择过滤器7
   2228          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2229          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2230          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_STALLS_STD_ID << 5;
   2231          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2232          	
   2233          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2234          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2235          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2236          		
   2237          		CAN_FilterInitStructure.CAN_FilterNumber = 10; //选择过滤器7
   2238          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2239          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2240          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_MUTE_STD_ID << 5;
   2241          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2242          	
   2243          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2244          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2245          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2246          		
   2247          		CAN_FilterInitStructure.CAN_FilterNumber = 11; //选择过滤器7
   2248          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2249          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2250          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_POWER_STD_ID << 5;
   2251          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2252          	
   2253          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2254          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2255          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2256          		
   2257          		CAN_FilterInitStructure.CAN_FilterNumber = 12; //选择过滤器7
   2258          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2259          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2260          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_MEDIA_SYSTEM_STD_ID << 5;
   2261          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2262          	
   2263          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2264          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2265          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2266          	
   2267          		/*************************************************************
   2268          		
   2269          		原车屏板CAN配置
   2270          		
   2271          		*************************************************************/
   2272          		CAN_FilterInitStructure.CAN_FilterNumber = 14; //选择过滤器7
   2273          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2274          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2275          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_KNOB_STD_ID << 5;
   2276          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2277          	
   2278          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2279          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2280          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2281          	
   2282          		CAN_FilterInitStructure.CAN_FilterNumber = 15; //选择过滤器7
   2283          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2284          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2285          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_MEDIA_SYSTEM_STD_ID << 5;
   2286          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2287          	
   2288          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2289          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2290          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2291          		
   2292          		CAN_FilterInitStructure.CAN_FilterNumber = 16; //选择过滤器7
   2293          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2294          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2295          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_KNOB_TUNE_ID << 5;
   2296          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2297          	
   2298          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2299          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2300          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2301          	
   2302          		CAN_FilterInitStructure.CAN_FilterNumber = 17; //选择过滤器7
   2303          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2304          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2305          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_TIMER_STD_ID << 5;
   2306          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2307          	
   2308          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2309          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2310          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   2311          	
   2312          	
   2313          		CAN_FilterInitStructure.CAN_FilterNumber = 18; //选择过滤器7
   2314          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   2315          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   2316          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_POWER_STD_ID << 5;
   2317          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   2318          	
   2319          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   2320          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   2321          		CAN_FilterInit(&CAN_FilterInitStructure);
   2322          		CAN_SlaveStartBank(13);//Miller.Tao
   2323          		//-------------------------------------------------------------
   2324          	
   2325          		/* CAN FIFO0 message pending interrupt enable */
   2326          		CAN_ITConfig(CAN1, CAN_IT_FMP0 | CAN_IT_FF0, ENABLE);
   2327          		/* CAN FIFO0 message pending interrupt enable */
   2328          		CAN_ITConfig(CAN2, CAN_IT_FMP0 | CAN_IT_FF0, ENABLE);
   2329          	}
   2330          
   2331          
   2332          /*
   2333          *********************************************************
   2334          *fun:void BWM_X1_Can_FetchStallsInfo(CanRxMsg RxMessage)
   2335          *description:处理档位信息
   2336          *
   2337          *
   2338          *Author:Miller.Tao,2014-09-10
   2339          *
   2340          *********************************************************
   2341          */
   2342          
   2343          void BWM_5S_Can_FetchStallsInfo(CanRxMsg RxMessage)
   2344          {}
   2345          
   2346          #if 0 //Miller.Tao20150113
   2347          void BWM_5S_CanBus_FetchSteerKeyInfo_Type5(CanRxMsg RxMessage)
   2348          {
   2349          	static vu8 uCKeepFlag = 0;
   2350          	static vu8 uRetKeepFlag = 0;
   2351          	static vu16 wBounceCnt = 0;
   2352          	BYTE i;
   2353          
   2354          	if(g_stuSYSINFO.FS_select.car_type_onoff_id==1)
   2355          		return;
   2356          
   2357          	m_BMW_CAN.RxMessage.DLC = RxMessage.DLC;
   2358          	if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE5_ID && RxMessage.DLC == 2))
   2359          	{
   2360          		return ;
   2361          	}
   2362          	for(i = 0; i < 2; i++)
   2363          		m_BMW_CAN.RxMessage.Data[i] = RxMessage.Data[i];
   2364          	//initial
   2365          	m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   2366          	//
   2367          	if (RxMessage.Data[0]==0x01)
   2368          		//navi
   2369          	{
   2370          		m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED;
   2371          	}
   2372          	else if (RxMessage.Data[0]==0x04)
   2373          		//dvd
   2374          	{
   2375          		m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_DVD;
   2376          	}
   2377          	else if (RxMessage.Data[0] == 0x10)
   2378          		//vedio
   2379          	{
   2380          		m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_vedio;
   2381          	}
   2382          	else if (RxMessage.Data[0] == 0x40)
   2383          		//music
   2384          	{
   2385          		m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_music;
   2386          	}	
   2387          	else if (RxMessage.Data[1] == 0x01)
   2388          		//tv
   2389          	{
   2390          		m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_TV;
   2391          	}		
   2392          	else
   2393          	{
   2394          
   2395          		//-------------------------------------------------------
   2396          		wBounceCnt++;
   2397          		if (wBounceCnt >= 2)
   2398          		{
   2399          			uCKeepFlag = 0;
   2400          			uRetKeepFlag = 0;
   2401          			m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   2402          			wBounceCnt = 0;
   2403          		}
   2404          		m_BMW_CAN.uKeyKeepCnt2 = 0;
   2405          		m_BMW_CAN.bKeyKeepOneTime2 = 0;
   2406          
   2407          	}
   2408          
   2409          
   2410          	switch (m_BMW_CAN.uKeyID2)
   2411          	{
   2412          	case BENZE_KEY_ALL_BOUNCED:
   2413          		uCKeepFlag = 0;
   2414          		uRetKeepFlag = 0;
   2415          		m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   2416          		wBounceCnt = 0;
   2417          		m_BMW_CAN.uKeyKeepCnt2 = 0;
   2418          		m_BMW_CAN.bKeyKeepOneTime2 = 0;
   2419          		break;
   2420          	case BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED:
   2421          		m_BMW_CAN.uKeyKeepCnt2++;
   2422          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   2423          			//bounce
   2424          		{
   2425          			//process first pressed data
   2426          			LF_CanBus_SendControlCmd(BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED);
   2427          		}
   2428          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   2429          			//keep
   2430          		{
   2431          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   2432          			//process keep data
   2433          			
   2434          		}
   2435          		break;
   2436          	case BENZE_CMD_KNOB_DVD:
   2437          		m_BMW_CAN.uKeyKeepCnt2++;
   2438          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   2439          			//bounce
   2440          		{
   2441          			//process first pressed data
   2442          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_DVD);
   2443          		}
   2444          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   2445          			//keep
   2446          		{
   2447          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   2448          			//process keep data
   2449          			
   2450          		}
   2451          		break;
   2452          	case BENZE_CMD_KNOB_vedio:
   2453          		m_BMW_CAN.uKeyKeepCnt2++;
   2454          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   2455          			//bounce
   2456          		{
   2457          			//process first pressed data
   2458          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_vedio);
   2459          		}
   2460          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   2461          			//keep
   2462          		{
   2463          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   2464          			//process keep data
   2465          			
   2466          		}
   2467          		break;
   2468          	case BENZE_CMD_KNOB_music:
   2469          		m_BMW_CAN.uKeyKeepCnt2++;
   2470          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   2471          			//bounce
   2472          		{
   2473          			//process first pressed data
   2474          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_music);
   2475          		}
   2476          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   2477          			//keep
   2478          		{
   2479          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   2480          			//process keep data
   2481          			
   2482          		}
   2483          		break;
   2484          	case BENZE_CMD_KNOB_TV:
   2485          		m_BMW_CAN.uKeyKeepCnt2++;
   2486          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   2487          			//bounce
   2488          		{
   2489          			//process first pressed data
   2490          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TV);
   2491          		}
   2492          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   2493          			//keep
   2494          		{
   2495          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   2496          			//process keep data
   2497          			
   2498          		}
   2499          		break;	
   2500          
   2501          
   2502          	
   2503          	default:
   2504          		m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   2505          		m_BMW_CAN.uKeyKeepCnt2 = 0;
   2506          		m_BMW_CAN.bKeyKeepOneTime2 = 0;
   2507          		break;
   2508          	}
   2509          }
   2510          #endif
   2511          /*
   2512          ******************************************************
   2513          方向盘按键
   2514          ******************************************************
   2515          */
   2516          void BWM_5S_CanBus_FetchSteerKeyInfo_Type4(CanRxMsg RxMessage)
   2517          
   2518          {
   2519              static vu8 uCKeepFlag = 0;
   2520              static vu8 uRetKeepFlag = 0;
   2521              static vu16 wBounceCnt = 0;
   2522             
   2523          
   2524              if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE4_ID && RxMessage.DLC == 6))
   2525              {
   2526                  return ;
   2527              }
   2528              
   2529          
   2530              //initial
   2531              m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
   2532              //
   2533              /**************************FIrst pressed ************************************/
   2534              
   2535              if ((RxMessage.Data[3]==0x21&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x21&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x00)||(RxMessage.Data[3]==0x22&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
   2536                  //knob right
   2537              {
   2538                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBRT_PRESSED;
   2539              }
   2540              else if ((RxMessage.Data[3]==0x81&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x81&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x00)||(RxMessage.Data[3]==0x82&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
   2541                  //knob left
   2542              {
   2543                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBLT_PRESSED;
   2544              }
   2545              else if( (RxMessage.Data[3]==0x11&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x12&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
   2546                  //knob up
   2547              {
   2548                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBUP_PRESSED;
   2549              }
   2550              else if ((RxMessage.Data[3]==0x41&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x42&&RxMessage.Data[4]==0xDD&&RxMessage.Data[5]==0x01))
   2551                  //knob dn
   2552              {
   2553                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBDN_PRESSED;
   2554              }
   2555              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xDE&&RxMessage.Data[5]==0x01)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xDE&&RxMessage.Data[5]==0x01))
   2556                  //knob enter
   2557              {
   2558                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_KNOBENTER_PRESSED;
   2559              }
   2560              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x04)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x04))
   2561                  //option
   2562              {
   2563                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_OPTION_PRESSED;
   2564              }
   2565              
   2566              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x02)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x02))
   2567                  //back
   2568              {
   2569                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_BACK_PRESSED;
   2570              }
   2571              
   2572              
   2573              else if( (RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x08)||(RxMessage.Data[3]==0x02&&RxMessage.Data[3]==0xC0&&RxMessage.Data[3]==0x08))
   2574                  //radio
   2575              {
   2576                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_RADIO_PRESSED;
   2577              }
   2578              else if( (RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x10)||(RxMessage.Data[3]==0x02&&RxMessage.Data[3]==0xC0&&RxMessage.Data[3]==0x10))
   2579                  //media
   2580              {
   2581                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_MEDIA_PRESSED;
   2582              }
   2583              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x01))
   2584                  //menu
   2585              {
   2586                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_MENU_PRESSED;
   2587              }
   2588              else if ((RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x01))
   2589                  //menu keep
   2590              {
   2591                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_BACK_KEEP;
   2592              }
   2593              
   2594              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x40)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x40))
   2595                  //tel
   2596              {
   2597                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_TEL_PRESSED;
   2598              }
   2599              else if ((RxMessage.Data[3]==0x01&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x20)||(RxMessage.Data[3]==0x02&&RxMessage.Data[4]==0xC0&&RxMessage.Data[5]==0x20))
   2600                  //map
   2601              {
   2602                  m_BMW_CAN.uKeyID = BENZE_KEY_KnobAround_KEY_MAP_PRESSED;
   2603              }
   2604              
   2605              else
   2606              {
   2607          
   2608                  //-------------------------------------------------------
   2609                  wBounceCnt++;
   2610                  if (wBounceCnt >= 2)
   2611                  {
   2612                      uCKeepFlag = 0;
   2613                      uRetKeepFlag = 0;
   2614                      m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
   2615                      wBounceCnt = 0;
   2616                  }
   2617                  m_BMW_CAN.uKeyKeepCnt = 0;
   2618                  m_BMW_CAN.uKeyKeepInDepCnt=0;
   2619                  m_BMW_CAN.bKeyKeepOneTime = 0;
   2620          
   2621              }
   2622          
   2623          
   2624              switch (m_BMW_CAN.uKeyID)
   2625              {
   2626              case BENZE_KEY_ALL_BOUNCED:
   2627                  uCKeepFlag = 0;
   2628                  uRetKeepFlag = 0;
   2629                  m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
   2630                  wBounceCnt = 0;
   2631                  m_BMW_CAN.uKeyKeepCnt = 0;
   2632                  m_BMW_CAN.bKeyKeepOneTime = 0;
   2633                  break;
   2634              /********************Process first pressed**********************************/
   2635              case BENZE_KEY_KnobAround_KEY_KNOBRT_PRESSED:
   2636                  m_BMW_CAN.uKeyKeepCnt++;
   2637                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2638                      //bounce
   2639                  {
   2640                      //process first pressed data
   2641                      LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_RIGHT_PRESSED);
   2642                  }
   2643                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2644                      //keep
   2645                  {
   2646                      m_BMW_CAN.uKeyKeepCnt = 2;
   2647                      //process keep data
   2648                      
   2649                  }
   2650                  break;
   2651              
   2652          
   2653              case BENZE_KEY_KnobAround_KEY_KNOBLT_PRESSED:
   2654                  m_BMW_CAN.uKeyKeepCnt++;
   2655                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2656                      //bounce
   2657                  {
   2658                      //process first pressed data
   2659                      LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_LEFT_PRESSED);
   2660                  }
   2661                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2662                      //keep
   2663                  {
   2664                      m_BMW_CAN.uKeyKeepCnt = 2;
   2665                      //process keep data
   2666                  }
   2667                  break;
   2668              case BENZE_KEY_KnobAround_KEY_KNOBUP_PRESSED:
   2669                  m_BMW_CAN.uKeyKeepCnt++;
   2670                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2671                      //bounce
   2672                  {
   2673                      //process first pressed data
   2674                      LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_UP_PRESSED);
   2675                  }
   2676                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2677                      //keep
   2678                  {
   2679                      m_BMW_CAN.uKeyKeepCnt = 2;
   2680                      //process keep data
   2681                  }
   2682                  break;
   2683              case BENZE_KEY_KnobAround_KEY_KNOBDN_PRESSED:
   2684                  m_BMW_CAN.uKeyKeepCnt++;
   2685                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2686                      //bounce
   2687                  {
   2688                      //process first pressed data
   2689                      LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_DN_PRESSED);
   2690                  }
   2691                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2692                      //keep
   2693                  {
   2694                      m_BMW_CAN.uKeyKeepCnt = 2;
   2695                      //process keep data
   2696                  }
   2697                  break;
   2698          		
   2699              case BENZE_KEY_KnobAround_KEY_KNOBENTER_PRESSED:
   2700                  m_BMW_CAN.uKeyKeepCnt++;
   2701                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2702                      //bounce
   2703                  {
   2704                      //process first pressed data
   2705                      LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_ENTER_PRESSED);
   2706                  }
   2707                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2708                      //keep
   2709                  {
   2710                      m_BMW_CAN.uKeyKeepCnt = 2;
   2711                      //process keep data
   2712                  }
   2713                  break;
   2714              
   2715              case BENZE_KEY_KnobAround_KEY_OPTION_PRESSED:
   2716                  m_BMW_CAN.uKeyKeepCnt++;
   2717                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2718                      //bounce
   2719                  {
   2720                      //process first pressed data
   2721                      //AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   2722                  }
   2723                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2724                      //keep
   2725                  {
   2726                      m_BMW_CAN.uKeyKeepCnt = 2;
   2727                      //process keep data
   2728                  }
   2729                  break;
   2730              case BENZE_KEY_KnobAround_KEY_BACK_PRESSED:
   2731                  m_BMW_CAN.uKeyKeepCnt++;
   2732                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2733                      //bounce
   2734                  {
   2735                      //process first pressed data
   2736                      //AudiCanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_RET_PRESSED);
   2737                    LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   2738                  }
   2739                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2740                      //keep
   2741                  {
   2742                      m_BMW_CAN.uKeyKeepCnt = 2;
   2743          			LF_CanBus_SendControlCmd(BENZE_KEY_STEERING_RIGHT_KEY_NAVI_PRESSED);
   2744                      //process keep data
   2745                  }
   2746                  break;
   2747              
   2748              case BENZE_KEY_KnobAround_KEY_BACK_KEEP:
   2749                  m_BMW_CAN.uKeyKeepInDepCnt++;
   2750                  if (m_BMW_CAN.uKeyKeepInDepCnt == 1)
   2751                      //bounce
   2752                  {
   2753                      //process first pressed data
   2754                      LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_RET_KEEP);
   2755                  
   2756                  }
   2757                  else if (m_BMW_CAN.uKeyKeepInDepCnt >= 10)
   2758                      //keep
   2759                  {
   2760                      m_BMW_CAN.uKeyKeepInDepCnt = 2;
   2761                      //process keep data
   2762                  }
   2763                  break;
   2764                
   2765              case BENZE_KEY_KnobAround_KEY_RADIO_PRESSED:
   2766                  m_BMW_CAN.uKeyKeepCnt++;
   2767                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2768                      //bounce
   2769                  {
   2770                      //process first pressed data
   2771                      LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   2772                  }
   2773                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2774                      //keep
   2775                  {
   2776                      m_BMW_CAN.uKeyKeepCnt = 2;
   2777                      //process keep data
   2778                  }
   2779                  break;
   2780              case BENZE_KEY_KnobAround_KEY_MEDIA_PRESSED: //
   2781                  m_BMW_CAN.uKeyKeepCnt++;
   2782                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2783                      //bounce
   2784                  {
   2785                      //process first pressed data
   2786                      LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   2787                  }
   2788                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2789                      //keep
   2790                  {
   2791                      m_BMW_CAN.uKeyKeepCnt = 2;
   2792                      //process keep data
   2793                  }
   2794                  break;
   2795              case BENZE_KEY_KnobAround_KEY_MENU_PRESSED:
   2796                  m_BMW_CAN.uKeyKeepCnt++;
   2797                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2798                      //bounce
   2799                  {
   2800                      //process first pressed data
   2801                      //if(g_stuSYSINFO.sys_main.uMainMode != SYSTEM_MODE_IN_CAR_MEDIA)
   2802                         LF_CanBus_SendControlCmd(BENZE_CMD_MENU_PRESSED);//
   2803                  }
   2804                  else if (m_BMW_CAN.uKeyKeepCnt >= 4)// 10
   2805                      //keep
   2806                  {
   2807                     // if(g_stuSYSINFO.sys_main.uMainMode == SYSTEM_MODE_IN_CAR_MEDIA)
   2808                        LF_CanBus_SendControlCmd(BENZE_CMD_MENU_PRESSED);//
   2809                      m_BMW_CAN.uKeyKeepCnt = 2;
   2810                      //process keep data
   2811                  }
   2812                  break;
   2813              case BENZE_KEY_KnobAround_KEY_TEL_PRESSED:
   2814                  m_BMW_CAN.uKeyKeepCnt++;
   2815                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2816                      //bounce
   2817                  {
   2818                      //process first pressed data
   2819                      LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   2820                  }
   2821                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2822                      //keep
   2823                  {
   2824                      m_BMW_CAN.uKeyKeepCnt = 2;
   2825                      //process keep data
   2826                  }
   2827                  break;
   2828              case BENZE_KEY_KnobAround_KEY_MAP_PRESSED:
   2829                  m_BMW_CAN.uKeyKeepCnt++;
   2830                  if (m_BMW_CAN.uKeyKeepCnt == 1)
   2831                      //bounce
   2832                  {
   2833                      //process first pressed data
   2834                      LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED);
   2835                  }
   2836                  else if (m_BMW_CAN.uKeyKeepCnt >= 10)
   2837                      //keep
   2838                  {
   2839                      m_BMW_CAN.uKeyKeepCnt = 2;
   2840                      //process keep data
   2841                  }
   2842                  break;
   2843              
   2844              /********************Process keep pressed**********************************/
   2845                  
   2846              default:
   2847                  m_BMW_CAN.uKeyID = BENZE_KEY_ALL_BOUNCED;
   2848                  m_BMW_CAN.uKeyKeepCnt = 0;
   2849                  m_BMW_CAN.bKeyKeepOneTime = 0;
   2850                  break;
   2851              }
   2852          }
   2853          void BWM_5S_CanBus_FetchSteerKeyInfo_Type3(CanRxMsg RxMessage)
   2854          {
   2855              static vu8 uPreAction = 0;
   2856              static vu8 uPreVal = 0;
   2857              
   2858              if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE3_ID && RxMessage.DLC == 6))
   2859              {
   2860                  return ;
   2861              }
   2862              //initial
   2863              if(uPreAction==RxMessage.Data[2])//no action
   2864              {
   2865                  return ;
   2866              }  
   2867              //
   2868          
   2869              if ((RxMessage.Data[3]>uPreVal)||(RxMessage.Data[3]==0x00&&uPreVal==0xFF))
   2870                  //add
   2871              {
   2872                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEINC_PRESSED);
   2873              }
   2874              else if ((RxMessage.Data[3] <uPreVal)||(RxMessage.Data[3]==0xFF&&uPreVal==0x00))
   2875                  //sub
   2876              {
   2877                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEDEC_PRESSED);
   2878              }
   2879              
   2880              uPreAction=RxMessage.Data[2];
   2881              uPreVal=RxMessage.Data[3];
   2882              
   2883          }
   2884          
   2885          void BWM_5S_CanBus_FetchSteerKeyInfo_Type2(CanRxMsg RxMessage)
   2886          {
   2887              if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE2_ID && RxMessage.DLC == 2))
   2888              {
   2889                  return ;
   2890              }
   2891          
   2892              //initial
   2893              
   2894          
   2895              if (RxMessage.Data[0] ==0x80)
   2896                  //tune up
   2897              {
   2898                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEINC_PRESSED);
   2899              }
   2900              else if (RxMessage.Data[0] ==0x7E)
   2901                  //tune dn
   2902              {
   2903                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEDEC_PRESSED);
   2904              }
   2905              else if (RxMessage.Data[0] ==0x7F)
   2906                  //enter
   2907              {
   2908                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_ENTER_PRESSED);
   2909              }
   2910          
   2911          }
   2912          
   2913          void BWM_5S_CanBus_FetchSteerKeyInfo_Type1(CanRxMsg RxMessage)
   2914          {
   2915          	static vu8 uCKeepFlag = 0;
   2916          	static vu8 uRetKeepFlag = 0;
   2917          	static vu16 wBounceCnt = 0;
   2918          	BYTE i;
   2919          
   2920          	m_BMW_CAN.RxMessage.DLC = RxMessage.DLC;
   2921          	if (!(RxMessage.StdId == BWM5S_CAN_STEER_KEY_STD__TYPE1_ID && RxMessage.DLC == 2))
   2922          	{
   2923          		return ;
   2924          	}
   2925          	for(i = 0; i < 2; i++)
   2926          		m_BMW_CAN.RxMessage.Data[i] = RxMessage.Data[i];
   2927          	//initial
   2928          	m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   2929          	//
   2930          	if (RxMessage.Data[1] & 0x10)//0x40
   2931          		//mode,source
   2932          	{
   2933          		m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_MODE_PRESSED;
   2934          	}
   2935          	else if (RxMessage.Data[1] & 0x01)
   2936          		//voice
   2937          	{
   2938          		m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_VOICE_PRESSED;
   2939          	}
   2940          	else if (RxMessage.Data[0] & 0x01)
   2941          		//bt
   2942          	{
   2943          		m_BMW_CAN.uKeyID2 = BENZE_KEY_STEERING_RIGHT_KEY_BT_PRESSED;
   2944          	}
   2945          	
   2946          	else
   2947          	{
   2948          
   2949          		//-------------------------------------------------------
   2950          		wBounceCnt++;
   2951          		if (wBounceCnt >= 2)
   2952          		{
   2953          			uCKeepFlag = 0;
   2954          			uRetKeepFlag = 0;
   2955          			m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   2956          			wBounceCnt = 0;
   2957          		}
   2958          		m_BMW_CAN.uKeyKeepCnt2 = 0;
   2959          		m_BMW_CAN.bKeyKeepOneTime2 = 0;
   2960          
   2961          	}
   2962          
   2963          
   2964          	switch (m_BMW_CAN.uKeyID2)
   2965          	{
   2966          	case BENZE_KEY_ALL_BOUNCED:
   2967          		uCKeepFlag = 0;
   2968          		uRetKeepFlag = 0;
   2969          		m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   2970          		wBounceCnt = 0;
   2971          		m_BMW_CAN.uKeyKeepCnt2 = 0;
   2972          		m_BMW_CAN.bKeyKeepOneTime2 = 0;
   2973          		break;
   2974          	case BENZE_KEY_STEERING_RIGHT_KEY_MODE_PRESSED:
   2975          		m_BMW_CAN.uKeyKeepCnt2++;
   2976          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   2977          			//bounce
   2978          		{
   2979          			//process first pressed data
   2980          			LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   2981          		}
   2982          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   2983          			//keep
   2984          		{
   2985          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   2986          			//process keep data
   2987          			
   2988          		}
   2989          		break;
   2990          	
   2991          
   2992          	case BENZE_KEY_STEERING_RIGHT_KEY_VOICE_PRESSED:
   2993          		m_BMW_CAN.uKeyKeepCnt2++;
   2994          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   2995          			//bounce
   2996          		{
   2997          			//process first pressed data
   2998          			LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   2999          		}
   3000          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   3001          			//keep
   3002          		{
   3003          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   3004          			//process keep data
   3005          		}
   3006          		break;
   3007          	case BENZE_KEY_STEERING_RIGHT_KEY_BT_PRESSED:
   3008          		m_BMW_CAN.uKeyKeepCnt2++;
   3009          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   3010          			//bounce
   3011          		{
   3012          			//process first pressed data
   3013          			LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   3014          		}
   3015          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   3016          			//keep
   3017          		{
   3018          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   3019          			//process keep data
   3020          		}
   3021          		break;
   3022          	
   3023          	default:
   3024          		m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   3025          		m_BMW_CAN.uKeyKeepCnt2 = 0;
   3026          		m_BMW_CAN.bKeyKeepOneTime2 = 0;
   3027          		break;
   3028          	}
   3029          }
   3030          
   3031          /*
   3032          ********************************************************
   3033          方向盘转角
   3034          ********************************************************
   3035          */
   3036          void BWM_5S_CanBus_FetchSteerAngleInfo(CanRxMsg RxMessage)
   3037          {
   3038          
   3039             {
   3040          	     if (RxMessage.StdId == BWM5S_CAN_STEERINGANGLE_STD_ID && RxMessage.DLC == 8)
   3041          	    {
   3042          	        m_BMW_CAN.benze_Steering_angle =(((RxMessage.Data[1] & 0xFF) << 8) | RxMessage.Data[0]); //方向盘角度信息
   3043          	    }
   3044             }
   3045          }
   3046          /*
   3047          ***********************************************************
   3048          *handle the CMD from CAN BUS
   3049          *
   3050          ***********************************************************
   3051          */
   3052          
   3053          void BWM_5S_CanBus_FetchCmdTask(void)
   3054          {
   3055              BYTE action = 0;
   3056          
   3057              
   3058              if (!m_BMW_CAN.wLoopTimer)
   3059              {
   3060                  switch (LF_CanBus_FetchCmd())
   3061                  {
   3062                  case BENZE_CMD_KNOB_LEFT_PRESSED:
   3063                      action |= JOY_SHIFT_LEFT;
   3064                      //IPC_SendKeyMessage_MouseAction(action);
   3065                    break;
   3066                  case BENZE_CMD_KNOB_RIGHT_PRESSED:
   3067                      action |= JOY_SHIFT_RIGHT;
   3068                     // IPC_SendKeyMessage_MouseAction(action);
   3069                    break;
   3070                  case BENZE_CMD_KNOB_TUNEDEC_PRESSED:
   3071                  
   3072            
   3073                      action |= JOY_SHIFT_UP;
   3074                     // IPC_SendKeyMessage_MouseAction(action);
   3075          			//IPC_SendKeyMessage_ShortCuts(0x01,MSG_ACTION_PRESSED);
   3076                      //IPC_SendKeyMessage_ShortCuts(CMD_KEY_LEFT_UP,MSG_ACTION_PRESSED);
   3077                      break;
   3078                  case BENZE_CMD_KNOB_TUNEINC_PRESSED:
   3079                  
   3080                 
   3081                      action |= JOY_SHIFT_DN;
   3082                     // IPC_SendKeyMessage_MouseAction(action);
   3083          			//IPC_SendKeyMessage_ShortCuts(0x02,MSG_ACTION_PRESSED);
   3084          			//IPC_SendKeyMessage_ShortCuts(CMD_KEY_LEFT_DN,MSG_ACTION_PRESSED);
   3085          
   3086                      break;
   3087                  case BENZE_CMD_KNOB_UP_PRESSED:
   3088                      action |= JOY_SHIFT_UP;
   3089                      //IPC_SendKeyMessage_MouseAction(action);
   3090          			//IPC_SendKeyMessage_ShortCuts(CMD_KEY_LEFT_UP,MSG_ACTION_PRESSED);
   3091                      break;
   3092                      
   3093                  case BENZE_CMD_KNOB_DN_PRESSED:
   3094                      action |= JOY_SHIFT_DN;
   3095                     // IPC_SendKeyMessage_MouseAction(action);
   3096          			//IPC_SendKeyMessage_ShortCuts(CMD_KEY_LEFT_DN,MSG_ACTION_PRESSED);
   3097                      
   3098                      break;
   3099                  
   3100                  case BENZE_CMD_KNOB_ENTER_PRESSED:
   3101          
   3102                    //if(g_stuSYSINFO.uOSDMainMode!=MAIN_OSD_MODE_IN_CAR_AUX)//Miller.Tao20150123
   3103                     // IPC_SendKeyMessage_ENTER(MSG_ACTION_BOUNCE);
   3104          			//IPC_SendKeyMessage_ShortCuts(0x15,MSG_ACTION_PRESSED);
   3105                      
   3106                      break;
   3107                  case BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED:
   3108                  
   3109                      //if(g_stuSYSINFO.sys_main.uMainMode!=SYSTEM_MODE_IN_CAR_MEDIA)//miller.tao20150706
   3110                       //IPC_SendKeyMessage_ShortCuts(0x09,MSG_ACTION_BOUNCE);
   3111          			//IPC_SendKeyMessage_Media(MSG_ACTION_BOUNCE);
   3112                      break;
   3113                  case BENZE_CMD_STEERING_RIGHT_KEY_RET_KEEP:
   3114                      //IPC_SendKeyMessage_Menu(MSG_ACTION_PRESSED);
   3115                      //IPC_SendKeyMessage_Media_Sw(MSG_ACTION_PRESSED);
   3116                      break;
   3117                  case BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED:
   3118                     // IPC_SendKeyMessage_NAVI(MSG_ACTION_PRESSED);
   3119          			//IPC_SendKeyMessage_ShortCuts(0x11,MSG_ACTION_PRESSED);
   3120                      break;
   3121                  
   3122                  case BENZE_CMD_MENU_PRESSED:
   3123                     //if(g_stuSYSINFO.uOSDMainMode==MAIN_OSD_MODE_IN_DISAPP)//solve small screen can not show menu
   3124                     {
   3125                      //IPC_SendKeyMessage_Menu(MSG_ACTION_PRESSED);
   3126          			//IPC_SendKeyMessage_ShortCuts(0x10,MSG_ACTION_PRESSED);
   3127                     }
   3128                     
   3129                      break;
   3130          
   3131                  default:
   3132                      break;
   3133                  }
   3134                  m_BMW_CAN.wLoopTimer = 10;
   3135              }
   3136          }
   3137          
   3138          //工作信息
   3139          void BWM_5S_CanBus_work_data_analytic(CanRxMsg RxMessage)
   3140          {
   3141              static u8 uPreMediaStatus, uPrePreMediaStatus;
   3142              static u8 uPreAirStatus, uPrePreAirStatus;
   3143              uPreMediaStatus = uPreMediaStatus;
   3144              uPrePreMediaStatus = uPrePreMediaStatus;
   3145              uPreAirStatus = uPreAirStatus;
   3146              uPrePreAirStatus = uPrePreAirStatus;
   3147              if (RxMessage.StdId == BWM5S_CAN_POWER_STD_ID && RxMessage.DLC == 8) //ACC INFO
   3148              {
   3149                      #if 0 //Miller.Tao20141014
   3150          			if(RxMessage.Data[1]&0x01)
   3151                      {
   3152                         //off
   3153                         
   3154                         #if 0 //Miller.tao
   3155          			   m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
   3156          			   m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_ON;
   3157          			   m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3158          			   g_stuSYSINFO.wPowerOnByCanTimer=2000;
   3159          			   #else
   3160          			   
   3161                         #endif
   3162          			}
   3163          			else 
   3164          			#endif
   3165          			{
   3166          			    //on
   3167          			    #if 0 //Miller.tao
   3168                         m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
   3169                          m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;
   3170                          m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3171                          g_stuSYSINFO.wPowerOnByCanTimer=2000;//2000
   3172          				#else
   3173          				
   3174          				#endif
   3175          			}
   3176                      
   3177          
   3178              }
   3179          
   3180          	if (RxMessage.StdId == BWM5S_CAN_POWER2_STD_ID && RxMessage.DLC == 8) //ACC INFO
   3181              {
   3182                      #if 0 //Miller.Tao20141014
   3183          			if(RxMessage.Data[1]&0x01)
   3184                      {
   3185                         //off
   3186                         
   3187                         #if 0 //Miller.tao
   3188          			   m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
   3189          			   m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_ON;
   3190          			   m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3191          			   g_stuSYSINFO.wPowerOnByCanTimer=2000;
   3192          			   #else
   3193          			   
   3194                         #endif
   3195          			}
   3196          			else 
   3197          			#endif
   3198          			{
   3199          			    //on
   3200          			    #if 0 //Miller.tao,总开关
   3201                          
   3202                          m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;//车上电
   3203                          //m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3204                          g_stuSYSINFO.wPowerOnByCanTimerAux=2000;
   3205          				#else
   3206          				
   3207          				#endif
   3208          			}
   3209                      
   3210          
   3211              }
   3212          
   3213          #if 0
   3214          	if(RxMessage.StdId == BWM5S_CAN_POWER3_STD_ID && RxMessage.DLC == 2)
   3215          	{
   3216                 if(RxMessage.Data[0]&0x04)
   3217                 	{
   3218                     if(m_BMW_CAN.benze_Pwr_acc_Aux == SYSTEM_POWER_ON)//acc on
   3219                     {
   3220                         //m_BMW_CAN.AccPwr = SYSTEM_POWER_OFF;
   3221          			   m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_OFF;
   3222          		   }
   3223          		   else if(m_BMW_CAN.benze_Pwr_acc_Aux == SYSTEM_POWER_OFF)
   3224          		   {
   3225                         //m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
   3226          			    m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_ON;
   3227          		   }
   3228          		   gSYSOpenMode = 1;
   3229          	    }
   3230          #endif
   3231          	// if(RxMessage.StdId == BWM5S_CAN_POWER4_STD_ID && RxMessage.DLC == 8)
   3232          	 if((RxMessage.StdId == BWM5S_CAN_POWER4_STD_ID)&&( RxMessage.DLC == 6))
   3233          	 {
   3234                  #if 1 //millertao20150317
   3235          		if(RxMessage.Data[0]==0x0C)
   3236          			;//m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3237          		//else if(RxMessage.Data[2]==0x01)
   3238          		//	m_BMW_CAN.AudioPwr =SYSTEM_POWER_OFF;
   3239          
   3240          		#endif
   3241          
   3242          	    #if 0 //millertao20150317
   3243          		if(RxMessage.Data[0]==0x27)
   3244          			m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3245          		else if(RxMessage.Data[0]==0x08)
   3246          			m_BMW_CAN.AudioPwr =SYSTEM_POWER_OFF;
   3247          
   3248          		#endif
   3249          	#if 0
   3250          		 m_BMW_CAN.AudioPwr=SYSTEM_POWER_ON;
   3251          			if(m_BMW_CAN.benze_Pwr_acc_Aux == SYSTEM_POWER_ON)//acc on
   3252          			{
   3253          				//m_BMW_CAN.AccPwr = SYSTEM_POWER_OFF;
   3254          				m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_OFF;
   3255          			}
   3256          			else if(m_BMW_CAN.benze_Pwr_acc_Aux == SYSTEM_POWER_OFF)
   3257          			{
   3258          				//m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
   3259          				 m_BMW_CAN.benze_Pwr_acc_Aux = SYSTEM_POWER_ON;
   3260          			}
   3261          			
   3262          		 m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;//车上电
   3263          		 m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3264          	#endif
   3265          	}
   3266          	// else
   3267          	 if((RxMessage.StdId == BWM5S_CAN_POWER3_STD_ID) && (RxMessage.DLC == 2))
   3268          	 {
   3269                   if(RxMessage.Data[0]==0x04)
   3270          	    {
   3271          			 //if(m_BMW_CAN.AudioPwr == SYSTEM_POWER_ON)
   3272          			 //	m_BMW_CAN.AudioPwr = SYSTEM_POWER_OFF;
   3273          			// else
   3274          			 //	m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3275          			 	
   3276                   }
   3277          	 }
   3278          
   3279               if (RxMessage.StdId == BMW5S_CAN_CarDoor_STD_ID && RxMessage.DLC == 8) //radar INFO
   3280              {
   3281                      #if 0
   3282                      m_RADAR.uRear_Left    =(RxMessage.Data[4]>>4)&0x0F;
   3283                      m_RADAR.uRear_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
   3284                      m_RADAR.uRear_MidRight=(RxMessage.Data[2]>>4)&0x0F;
   3285                      m_RADAR.uRear_Right   =(RxMessage.Data[1]>>4)&0x0F;
   3286          			#else
   3287          			m_CarDoorInfo.uFront_Left    =(RxMessage.Data[2]&0x01);
   3288                      m_CarDoorInfo.uFront_Right =((RxMessage.Data[2])&0x10)>>4;
   3289                      m_CarDoorInfo.uRear_Left=(RxMessage.Data[2]&0x04)>>2;
   3290                      m_CarDoorInfo.uRear_Right   =(RxMessage.Data[2]&0x40)>>6;
   3291          			m_CarDoorInfo.rear =(RxMessage.Data[4]);
   3292          			m_CarDoorInfo.SendFlag = 1;
   3293                      #endif
   3294                      
   3295          
   3296              }
   3297          
   3298          	 if (RxMessage.StdId == BMW5S_CAN_CarSpeed_STD_ID && RxMessage.DLC == 7) //radar INFO
   3299          	 {
   3300          
   3301                   m_CarSpeedInfo.Hi_Speed = (RxMessage.Data[3]&0x0F);
   3302          		 m_CarSpeedInfo.Lo_Speed = RxMessage.Data[2];
   3303          		 m_CarSpeedInfo.SendFlag = 1;
   3304          	 }
   3305          
   3306          
   3307          	if (RxMessage.StdId == BMW5S_CAN_CarMiles_STD_ID && RxMessage.DLC == 8) //radar INFO
   3308          	 {
   3309                     m_CarMilesInfo.Mile1Byte = RxMessage.Data[0];
   3310          		   m_CarMilesInfo.Mile2Byte = RxMessage.Data[1];
   3311          		   m_CarMilesInfo.Mile3Byte = 0;
   3312          		   m_CarMilesInfo.Mile4Byte = 0;
   3313          		   m_CarMilesInfo.SendFlag = 1;
   3314          		   
   3315          	 }
   3316          	
   3317              if (RxMessage.StdId == BWM5S_CAN_RADAR_VAL_STD_ID && RxMessage.DLC == 6) //radar INFO
   3318              {
   3319                      #if 0
   3320                      m_RADAR.uRear_Left    =(RxMessage.Data[4]>>4)&0x0F;
   3321                      m_RADAR.uRear_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
   3322                      m_RADAR.uRear_MidRight=(RxMessage.Data[2]>>4)&0x0F;
   3323                      m_RADAR.uRear_Right   =(RxMessage.Data[1]>>4)&0x0F;
   3324          			#else
   3325          			m_RADAR.uRear_Left    =(RxMessage.Data[4]>>4)&0x0F;
   3326                      m_RADAR.uRear_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
   3327                      m_RADAR.uRear_MidRight=(RxMessage.Data[2]>>4)&0x0F;
   3328                      m_RADAR.uRear_Right   =(RxMessage.Data[1]>>4)&0x0F;
   3329                      #endif
   3330                      
   3331          
   3332              }
   3333          
   3334             if (RxMessage.StdId == BWM5S_CAN_RADAR_VAL_Front_STD_ID && RxMessage.DLC == 6) //radar INFO
   3335              {
   3336                      #if 0
   3337                      m_RADAR.uRear_Left    =(RxMessage.Data[4]>>4)&0x0F;
   3338                      m_RADAR.uRear_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
   3339                      m_RADAR.uRear_MidRight=(RxMessage.Data[2]>>4)&0x0F;
   3340                      m_RADAR.uRear_Right   =(RxMessage.Data[1]>>4)&0x0F;
   3341          			#else
   3342          			m_RADAR.uFront_Left    =(RxMessage.Data[4]>>4)&0x0F;
   3343                      m_RADAR.uFront_MidLeft =(RxMessage.Data[3]>>4)&0x0F;
   3344                      m_RADAR.uFront_MidRight=(RxMessage.Data[2]>>4)&0x0F;
   3345                      m_RADAR.uFront_Right   =(RxMessage.Data[1]>>4)&0x0F;
   3346                      #endif
   3347                      
   3348          
   3349              }
   3350          
   3351          	#if 1//Miller.Tao2014-09-10
   3352              if (RxMessage.StdId == BWM5S_CAN_RADAR_DISP_STD_ID && RxMessage.DLC == 2)
   3353              {
   3354                  //ID:001
   3355                  //DCL:
   3356                  m_BMW_CAN.RxMessage.Data[0]=RxMessage.Data[0];
   3357                  m_BMW_CAN.RxMessage.Data[1]=RxMessage.Data[1];
   3358                  m_BMW_CAN.RxMessage.Data[2]=RxMessage.Data[2];
   3359                  m_BMW_CAN.RxMessage.Data[3]=RxMessage.Data[3];
   3360                  m_BMW_CAN.RxMessage.Data[4]=RxMessage.Data[4];
   3361                  m_BMW_CAN.RxMessage.Data[5]=RxMessage.Data[5];
   3362                  m_BMW_CAN.RxMessage.Data[6]=RxMessage.Data[6];
   3363                  m_BMW_CAN.RxMessage.Data[7]=RxMessage.Data[7];
   3364                  
   3365                  if (RxMessage.Data[0] & 0x02)
   3366                  {
   3367                      #if !COMPILE_BACK_BY_STALL
   3368                      //g_stuBACKCNTR.u8CurState = CAM_OFF;
   3369                      //g_stuPARKCNTR.u8CurState = PARK_OFF;
   3370                      //POWER_RearVideoOff();
   3371                      #endif
   3372                      m_RADAR.fDisp = 0;
   3373          
   3374                  }
   3375                  else
   3376                  {
   3377                    #if !COMPILE_BACK_BY_STALL
   3378                      //g_stuBACKCNTR.u8CurState = CAM_ON;
   3379                     // g_stuPARKCNTR.u8CurState = PARK_OFF;
   3380                     // POWER_RearVideoOn();
   3381                    #endif
   3382                      m_RADAR.fDisp = 1;
   3383          
   3384                  }
   3385          
   3386          
   3387          
   3388              }
   3389              #endif
   3390          #if !COMPILE_SYS_TIMER_BY_GPS
   3391              if (RxMessage.StdId == BMW5S_CAN_TIMER_STD_ID)
   3392              {
   3393                  //ID:39F
   3394                  //DCL:
   3395                  m_BMW_CAN.Hour_data = RxMessage.Data[0]; //hour
   3396                  m_BMW_CAN.Minute_data = RxMessage.Data[1]; //时间数据
   3397                  m_BMW_CAN.Sec_data = RxMessage.Data[2]; //时间数据
   3398          
   3399              }
   3400          #endif
   3401          
   3402              if (RxMessage.StdId == BMW5S_CAN_CarPhone_STD_ID&& RxMessage.DLC == 8)
   3403              {
   3404          
   3405          		  
   3406          }
   3407          
   3408          
   3409          
   3410          
   3411          }
   3412          void BMW_5S_Power_On(CanRxMsg RxMessage)
   3413          {
   3414          	if (RxMessage.StdId == BWM5S_CAN_POWER_STD_ID && RxMessage.DLC == 8)
   3415          	{
   3416          		m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;
   3417          		//m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3418          		//m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
   3419          
   3420          	}
   3421          	else if (RxMessage.StdId == BWM5S_CAN_POWER2_STD_ID && RxMessage.DLC == 8) //ACC INFO
   3422          	
   3423          	{
   3424          		m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;
   3425          		//m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   3426          		m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
   3427          		
   3428          	}
   3429          }
   3430          #endif
   3431          
   3432          #if LF_CAN_TYPE == Benci_newC
   3433          void Benci_newC_CanBus_Config(void)
   3434          	{
   3435          	
   3436          		CAN_InitTypeDef CAN_InitStructure;
   3437          		CAN_FilterInitTypeDef CAN_FilterInitStructure;
   3438          		/* CAN register init */
   3439          		// CAN_DeInit();
   3440          		/* CAN1 and CAN2 register init */
   3441          		CAN_DeInit(CAN1);
   3442          		CAN_DeInit(CAN2);
   3443          	
   3444          	
   3445          		/* Struct init*/
   3446          		CAN_StructInit(&CAN_InitStructure);
   3447          	
   3448          		
   3449          		/*************************************************************
   3450          		
   3451          		主机CAN配置
   3452          		
   3453          		*************************************************************/
   3454          	
   3455          	
   3456          		/* CAN cell init */
   3457          		CAN_InitStructure.CAN_TTCM = DISABLE; //禁止时间触发通信模式
   3458          		CAN_InitStructure.CAN_ABOM = DISABLE;
   3459          		CAN_InitStructure.CAN_AWUM = DISABLE;
   3460          		CAN_InitStructure.CAN_NART = DISABLE;
   3461          		//CAN报文只被发送1次，不管发送的结果如何（成功、出错或仲裁丢失）
   3462          		CAN_InitStructure.CAN_RFLM = DISABLE;
   3463          		CAN_InitStructure.CAN_TXFP = DISABLE;
   3464          		CAN_InitStructure.CAN_Mode = CAN_Mode_Silent;
   3465          	
   3466          		CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
   3467          		CAN_InitStructure.CAN_BS1 = CAN_BS1_15tq; //1--16
   3468          		CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq; //1--8
   3469          		CAN_InitStructure.CAN_Prescaler = 4;
   3470          		////(pclk1/((1+8+7)*16)) = 32Mhz/16/16 = 125Kbits
   3471          		//CAN_Init(&CAN_InitStructure);
   3472          	
   3473          		/*Initializes the CAN1	and CAN2 */
   3474          		CAN_Init(CAN1, &CAN_InitStructure);
   3475          	
   3476          	
   3477          		/* CAN cell init */
   3478          		CAN_InitStructure.CAN_TTCM = DISABLE; //禁止时间触发通信模式
   3479          		CAN_InitStructure.CAN_ABOM = DISABLE;
   3480          		CAN_InitStructure.CAN_AWUM = DISABLE;
   3481          		CAN_InitStructure.CAN_NART = DISABLE;
   3482          		//CAN报文只被发送1次，不管发送的结果如何（成功、出错或仲裁丢失）
   3483          		CAN_InitStructure.CAN_RFLM = DISABLE;
   3484          		CAN_InitStructure.CAN_TXFP = DISABLE;
   3485          		CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
   3486          	
   3487          		CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
   3488          		CAN_InitStructure.CAN_BS1 = CAN_BS1_15tq; //1--16
   3489          		CAN_InitStructure.CAN_BS2 = CAN_BS2_2tq; //1--8
   3490          		CAN_InitStructure.CAN_Prescaler = 8;
   3491          		////(pclk1/((1+8+7)*16)) = 32Mhz/16/16 = 125Kbits
   3492          		CAN_Init(CAN2, &CAN_InitStructure);
   3493          
   3494          
   3495          #if 1
   3496          		CAN_FilterInitStructure.CAN_FilterNumber = 0; //选择过滤器7
   3497          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
   3498          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3499          		CAN_FilterInitStructure.CAN_FilterIdHigh =0xffff<< 5;
                 		                                          ^
Warning[Pe069]: integer conversion resulted in truncation
   3500          		CAN_FilterInitStructure.CAN_FilterIdLow =CAN_ID_STD; // 0xffff;//
   3501          	
   3502          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3503          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3504          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3505          		
   3506          
   3507          #if 0
   3508          		
   3509          		CAN_FilterInitStructure.CAN_FilterNumber = 14; //选择过滤器7
   3510          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
   3511          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3512          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_POWER_ON_STD_ID << 5;
   3513          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3514          	
   3515          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3516          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3517          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3518          		
   3519          		CAN_FilterInitStructure.CAN_FilterNumber = 16; //选择过滤器7
   3520          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
   3521          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3522          		CAN_FilterInitStructure.CAN_FilterIdHigh = 0 << 5;
   3523          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3524          	
   3525          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3526          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3527          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数		
   3528          		#endif
   3529          #else		
   3530          		CAN_FilterInitStructure.CAN_FilterNumber = 1; //选择过滤器7
   3531          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3532          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3533          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_back_STD_ID << 5;
   3534          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3535          	
   3536          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3537          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3538          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3539          	
   3540          		
   3541          		CAN_FilterInitStructure.CAN_FilterNumber = 2; //选择过滤器7
   3542          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3543          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3544          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_RADA_STD_ID << 5;
   3545          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3546          	
   3547          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3548          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3549          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3550          		
   3551          		CAN_FilterInitStructure.CAN_FilterNumber = 3; //选择过滤器7
   3552          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3553          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3554          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_DOOR_F_L_STD_ID << 5;
   3555          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3556          	
   3557          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3558          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3559          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3560          		
   3561          		CAN_FilterInitStructure.CAN_FilterNumber = 4; //选择过滤器7
   3562          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3563          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3564          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_DOOR_F_R_STD_ID << 5;
   3565          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3566          	
   3567          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3568          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3569          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3570          		
   3571          		CAN_FilterInitStructure.CAN_FilterNumber = 5; //选择过滤器7
   3572          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3573          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3574          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_DOOR_REAR_LR_STD_ID << 5;
   3575          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3576          	
   3577          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3578          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3579          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3580          		
   3581          		CAN_FilterInitStructure.CAN_FilterNumber = 6; //选择过滤器7
   3582          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3583          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3584          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_STEERINGANGLE_STD_ID << 5;
   3585          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3586          	
   3587          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3588          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3589          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3590          		
   3591          		CAN_FilterInitStructure.CAN_FilterNumber = 7; //选择过滤器7
   3592          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3593          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3594          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_air_wind_STD_ID << 5;
   3595          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3596          	
   3597          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3598          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3599          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3600          #if 0
   3601          	
   3602          		CAN_FilterInitStructure.CAN_FilterNumber = 8; //选择过滤器7
   3603          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3604          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3605          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_car_touch1_STD_ID << 5;
   3606          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3607          	
   3608          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3609          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3610          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3611          		
   3612          		CAN_FilterInitStructure.CAN_FilterNumber = 9; //选择过滤器7
   3613          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3614          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3615          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_STALLS_STD_ID << 5;
   3616          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3617          	
   3618          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3619          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3620          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3621          		
   3622          		CAN_FilterInitStructure.CAN_FilterNumber = 10; //选择过滤器7
   3623          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3624          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3625          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_MUTE_STD_ID << 5;
   3626          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3627          	
   3628          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3629          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3630          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3631          		
   3632          		CAN_FilterInitStructure.CAN_FilterNumber = 11; //选择过滤器7
   3633          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3634          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3635          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_POWER_STD_ID << 5;
   3636          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3637          	
   3638          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3639          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3640          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3641          		
   3642          		CAN_FilterInitStructure.CAN_FilterNumber = 12; //选择过滤器7
   3643          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3644          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3645          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_MEDIA_SYSTEM_STD_ID << 5;
   3646          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3647          	
   3648          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3649          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3650          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3651          	#endif
   3652          		/*************************************************************
   3653          		
   3654          		原车屏板CAN配置
   3655          		
   3656          		*************************************************************/
   3657          		CAN_FilterInitStructure.CAN_FilterNumber = 14; //选择过滤器7
   3658          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3659          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3660          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_POWER_ON_STD_ID << 5;
   3661          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3662          	
   3663          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3664          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3665          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3666          	
   3667          		CAN_FilterInitStructure.CAN_FilterNumber = 15; //选择过滤器7
   3668          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3669          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3670          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_mid_control_KEY_STD_ID << 5;
   3671          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3672          	
   3673          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3674          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3675          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3676          		
   3677          		CAN_FilterInitStructure.CAN_FilterNumber = 16; //选择过滤器7
   3678          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3679          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3680          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_mid_control_turn_KEY1_STD_ID << 5;
   3681          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3682          	
   3683          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3684          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3685          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3686          	
   3687          		CAN_FilterInitStructure.CAN_FilterNumber = 17; //选择过滤器7
   3688          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3689          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3690          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_mid_control_turn_KEY2_STD_ID << 5;
   3691          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3692          	
   3693          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3694          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3695          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3696          	
   3697          	
   3698          		CAN_FilterInitStructure.CAN_FilterNumber = 18; //选择过滤器7
   3699          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3700          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3701          		CAN_FilterInitStructure.CAN_FilterIdHigh = BENZE_CAN_POWER_STD_ID << 5;
   3702          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3703          	
   3704          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3705          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3706          		CAN_FilterInit(&CAN_FilterInitStructure);
   3707          
   3708          
   3709          		CAN_FilterInitStructure.CAN_FilterNumber = 19; //选择过滤器7
   3710          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3711          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3712          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_light_mode_STD_ID << 5;
   3713          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3714          	
   3715          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3716          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3717          		CAN_FilterInit(&CAN_FilterInitStructure);	
   3718          
   3719          		
   3720          		CAN_FilterInitStructure.CAN_FilterNumber = 20; //选择过滤器7
   3721          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3722          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3723          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_car_touch1_STD_ID << 5;
   3724          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3725          	
   3726          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3727          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3728          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3729          #if 1
   3730          		CAN_FilterInitStructure.CAN_FilterNumber = 21; //选择过滤器7
   3731          		CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdList;
   3732          		CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
   3733          		CAN_FilterInitStructure.CAN_FilterIdHigh = Benci_newC_CAN_car_TFT_ONOFF_STD_ID << 5;
   3734          		CAN_FilterInitStructure.CAN_FilterIdLow = CAN_ID_STD; //
   3735          	
   3736          		CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0; //选择FIFO0
   3737          		CAN_FilterInitStructure.CAN_FilterActivation = ENABLE; //使能过滤器
   3738          		CAN_FilterInit(&CAN_FilterInitStructure); //进入初始化函数
   3739          
   3740          #endif
   3741          		
   3742          #endif
   3743          		CAN_SlaveStartBank(0);//Miller.Tao
   3744          		//-------------------------------------------------------------
   3745          		/* CAN FIFO0 message pending interrupt enable */
   3746          		CAN_ITConfig(CAN1, CAN_IT_FMP0| CAN_IT_FF0, ENABLE);
   3747          		/* CAN FIFO0 message pending interrupt enable */
   3748          		CAN_ITConfig(CAN2, CAN_IT_FMP0| CAN_IT_FF0, ENABLE);
   3749          	}
   3750          
   3751          
   3752          /*
   3753          *********************************************************
   3754          *fun:void BWM_X1_Can_FetchStallsInfo(CanRxMsg RxMessage)
   3755          *description:处理档位信息
   3756          *
   3757          *
   3758          *Author:Miller.Tao,2014-09-10
   3759          *
   3760          *********************************************************
   3761          */
   3762          
   3763          void Benci_newC_Can_FetchStallsInfo(CanRxMsg RxMessage)
   3764          {
   3765          		if (!((RxMessage.StdId == Benci_newC_CAN_back_STD_ID||RxMessage.StdId ==Benci_newC_CAN_back1_STD_ID) && RxMessage.DLC == 8))
   3766          		{
   3767          			return ;
   3768          		}
   3769          		m_RADAR.fDisp_on_p=0;
   3770          		
   3771          		if(RxMessage.StdId == Benci_newC_CAN_back_STD_ID)
   3772          			{
   3773          		if (RxMessage.Data[2]  == 0x52)
   3774          			{//back
   3775          	// #if COMPILE_BACK_BY_STALL
   3776          			 
   3777          			 //if(Sys.FS_select.cam_type_onoff_id!=3)
   3778          				 {
   3779          			// g_stuBACKCNTR.u8CurState = CAM_ON;
   3780          			// g_stuPARKCNTR.u8CurState = PARK_ON;
   3781          			 
   3782          			Sys.u8can_back_status=CAM_ON_from_can;
   3783          			 //POWER_RearVideoOn();
   3784          			 //m_RADAR.fDisp_statu=0;
   3785          				 }
   3786          			 /*
   3787          				   if(g_stuSYSINFO.uBootFinished)
   3788          				  {
   3789          			
   3790          					   McuSetNaviMuteOn();
   3791          				  }
   3792          				  */
   3793          			 
   3794          			 Sys.wRearOnByCanTimer=2000;
   3795          	 // #endif
   3796          	
   3797          			}
   3798          			else //if(RxMessage.Data[2]  == 0x50)
   3799          			{
   3800          	// #if COMPILE_BACK_BY_STALL
   3801          				// if(RxMessage.Data[2]  == 0x50)
   3802          				 //	m_RADAR.fDisp_on_p=1;
   3803          				// if(Sys.FS_select.cam_type_onoff_id!=3)
   3804          					 {
   3805          				// g_stuBACKCNTR.u8CurState = CAM_OFF;
   3806          				// Sys.u8CurState = PARK_OFF;
   3807          				 Sys.u8back_exit_auto=0;
   3808          				 Sys.u8can_back_status=CAM_off_id;
   3809          				// POWER_RearVideoOff();
   3810          					 }
   3811          				 /*
   3812          					  if(g_stuSYSINFO.uBootFinished)
   3813          					 {
   3814          						  McuSetRearOutAudioMuteOff();
   3815          					 }
   3816          					  */
   3817          	// #endif
   3818          			}
   3819          			}
   3820          		else if((RxMessage.StdId == Benci_newC_CAN_back1_STD_ID)&&(Sys.FS_select.car_type_onoff_id==1))
   3821          			{
   3822          				if (RxMessage.Data[0]  == 0x90||RxMessage.Data[0]  == 0x9b)
   3823          				{//back
   3824          				 
   3825          				Sys.u8can_back_status=CAM_ON_from_can;
   3826          				 
   3827          				 Sys.wRearOnByCanTimer=2000;
   3828          		
   3829          				}
   3830          				else //if(RxMessage.Data[2]  == 0x50)
   3831          				{
   3832          					 Sys.u8back_exit_auto=0;
   3833          					 Sys.u8can_back_status=CAM_off_id;
   3834          				}
   3835          			}
   3836          
   3837          }
   3838          
   3839          
   3840          void Benci_newC_CanBus_mid_control_key_fun(CanRxMsg RxMessage)
   3841          {
   3842          #if 0
   3843          	static BYTE turn_key_count=0x88;
   3844              if (!((RxMessage.StdId ==Benci_newC_CAN_mid_control_turn_KEY2_STD_ID)&& RxMessage.DLC == 8))
   3845              {
   3846                  return ;
   3847              }
   3848          	 return ;
   3849          
   3850              //initial
   3851              if(RxMessage.StdId == Benci_newC_CAN_mid_control_turn_KEY1_STD_ID)
   3852              	{
   3853              if(RxMessage.Data[3]<turn_key_count)
   3854              	{
   3855              	LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEDEC_PRESSED);
   3856              	}
   3857              	}
   3858          	else
   3859          		if(RxMessage.StdId == Benci_newC_CAN_mid_control_turn_KEY2_STD_ID)
   3860          			{
   3861          		if(RxMessage.Data[3]>turn_key_count)
   3862          			{
   3863          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEINC_PRESSED);
   3864          			}
   3865          			}
   3866          #endif		
   3867          
   3868          }
   3869          
   3870          void Benci_newC_CanBus_mid_control_key2_fun(CanRxMsg RxMessage)
   3871          {
   3872          	static vu8 uCKeepFlag = 0;
   3873          	static vu8 uRetKeepFlag = 0;
   3874          	static vu16 wBounceCnt = 0;
   3875          	BYTE i;
                 	     ^
Warning[Pe177]: variable "i" was declared but never referenced
   3876          
   3877              if (!(RxMessage.StdId == Benci_newC_CAN_mid_control_KEY_STD_ID && RxMessage.DLC == 8))
   3878              {
   3879                  return ;
   3880              }
   3881          
   3882          	
   3883              if (RxMessage.Data[0] ==0x80)
   3884                  //back
   3885              {
   3886              
   3887          		m_BMW_CAN.uKeyID2 = BENZE_KEY_KnobAround_KEY_BACK_KEEP;
   3888              }
   3889          	 else   if (RxMessage.Data[0] ==0x10)
   3890                  //back
   3891              {
   3892              
   3893          		m_BMW_CAN.uKeyID2 = BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED;
   3894              }
   3895          	  else	 if (RxMessage.Data[0] ==0x04||RxMessage.Data[0] ==0x20||RxMessage.Data[0] ==0x02||RxMessage.Data[0] ==0x40)
   3896          		 //back
   3897          	 {
   3898          	 
   3899          		 m_BMW_CAN.uKeyID2 = BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED;
   3900          	 }
   3901          
   3902          	 
   3903              else if (RxMessage.Data[3] ==0xa6)
   3904                  //*
   3905              {
   3906                 ;// LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEDEC_PRESSED);
   3907              }
   3908              else if (RxMessage.Data[2] ==0x01)
   3909                  //enter
   3910              {
   3911          		m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_ENTER_PRESSED;
   3912              }
   3913              else if (RxMessage.Data[2] ==0x80)
   3914                  //enter
   3915              {
   3916          		m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_LEFT_PRESSED;
   3917              }
   3918              else if (RxMessage.Data[2] ==0x08)
   3919                  //enter
   3920              {
   3921          		m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_RIGHT_PRESSED;
   3922              }
   3923              else if (RxMessage.Data[2] ==0x02)
   3924                  //enter
   3925              {
   3926          		m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_UP_PRESSED;
   3927              }
   3928              else if (RxMessage.Data[2] ==0x20)
   3929                  //enter
   3930              {
   3931          		m_BMW_CAN.uKeyID2 = BENZE_CMD_KNOB_DN_PRESSED;
   3932              }		
   3933          	else
   3934          	{
   3935          
   3936          		//-------------------------------------------------------
   3937          		wBounceCnt++;
   3938          		//if (wBounceCnt >= 2)
   3939          		{
   3940          			uCKeepFlag = 0;
   3941          			uRetKeepFlag = 0;
   3942          			m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   3943          			wBounceCnt = 0;
   3944          		}
   3945          		m_BMW_CAN.uKeyKeepCnt2 = 0;
   3946          		m_BMW_CAN.bKeyKeepOneTime2 = 0;
   3947          
   3948          	}
   3949          
   3950          
   3951          	switch (m_BMW_CAN.uKeyID2)
   3952          	{
   3953          	case BENZE_KEY_ALL_BOUNCED:
   3954          		uCKeepFlag = 0;
   3955          		uRetKeepFlag = 0;
   3956          		m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   3957          		wBounceCnt = 0;
   3958          		m_BMW_CAN.uKeyKeepCnt2 = 0;
   3959          		m_BMW_CAN.bKeyKeepOneTime2 = 0;
   3960          		break;
   3961          	case BENZE_KEY_KnobAround_KEY_BACK_KEEP:
   3962          		m_BMW_CAN.uKeyKeepCnt2++;
   3963          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   3964          			//bounce
   3965          		{
   3966          			//process first pressed data
   3967          			LF_CanBus_SendControlCmd(BENZE_KEY_KnobAround_KEY_BACK_KEEP);
   3968          		}
   3969          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   3970          			//keep
   3971          		{
   3972          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   3973          			//process keep data
   3974          			
   3975          		}
   3976          		break;
   3977          	
   3978          
   3979          	case BENZE_CMD_KNOB_ENTER_PRESSED:
   3980          		m_BMW_CAN.uKeyKeepCnt2++;
   3981          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   3982          			//bounce
   3983          		{
   3984          			//process first pressed data
   3985          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_ENTER_PRESSED);
   3986          			
   3987          			if(Sys.Main_Source==SRC_CAM)
   3988          			CAN_turner.flag=1;
   3989          		}
   3990          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   3991          			//keep
   3992          		{
   3993          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   3994          			//process keep data
   3995          		}
   3996          		break;
   3997          	case BENZE_CMD_KNOB_LEFT_PRESSED:
   3998          		m_BMW_CAN.uKeyKeepCnt2++;
   3999          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   4000          			//bounce
   4001          		{
   4002          			//process first pressed data
   4003          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_LEFT_PRESSED);
   4004          			
   4005          			if(Sys.Main_Source==SRC_CAM)
   4006          			CAN_turner.count--;
   4007          		}
   4008          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   4009          			//keep
   4010          		{
   4011          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   4012          			//process keep data
   4013          		}
   4014          		break;
   4015          	case BENZE_CMD_KNOB_RIGHT_PRESSED:
   4016          		m_BMW_CAN.uKeyKeepCnt2++;
   4017          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   4018          			//bounce
   4019          		{
   4020          			//process first pressed data
   4021          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_RIGHT_PRESSED);
   4022          			
   4023          			if(Sys.Main_Source==SRC_CAM)
   4024          				CAN_turner.count++;
   4025          		}
   4026          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   4027          			//keep
   4028          		{
   4029          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   4030          			//process keep data
   4031          		}
   4032          		break;
   4033          	case BENZE_CMD_KNOB_UP_PRESSED:
   4034          		m_BMW_CAN.uKeyKeepCnt2++;
   4035          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   4036          			//bounce
   4037          		{
   4038          			//process first pressed data
   4039          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_UP_PRESSED);
   4040          			
   4041          			
   4042          			if(Sys.Main_Source==SRC_CAM)
   4043          				CAN_turner.count2--;
   4044          		}
   4045          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   4046          			//keep
   4047          		{
   4048          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   4049          			//process keep data
   4050          		}
   4051          		break;
   4052          	case BENZE_CMD_KNOB_DN_PRESSED:
   4053          		m_BMW_CAN.uKeyKeepCnt2++;
   4054          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   4055          			//bounce
   4056          		{
   4057          			//process first pressed data
   4058          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_DN_PRESSED);
   4059          			
   4060          			if(Sys.Main_Source==SRC_CAM)
   4061          				CAN_turner.count2++;
   4062          		}
   4063          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   4064          			//keep
   4065          		{
   4066          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   4067          			//process keep data
   4068          		}
   4069          		break;
   4070          	case BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED:
   4071          		m_BMW_CAN.uKeyKeepCnt2++;
   4072          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   4073          			//bounce
   4074          		{
   4075          			//process first pressed data
   4076          			LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED);
   4077          		}
   4078          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   4079          			//keep
   4080          		{
   4081          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   4082          			//process keep data
   4083          		}
   4084          		break;	
   4085          	case BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED:
   4086          		m_BMW_CAN.uKeyKeepCnt2++;
   4087          		if (m_BMW_CAN.uKeyKeepCnt2 == 1)
   4088          			//bounce
   4089          		{
   4090          			//process first pressed data
   4091          			LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   4092          		}
   4093          		else if (m_BMW_CAN.uKeyKeepCnt2 >= 10)
   4094          			//keep
   4095          		{
   4096          			m_BMW_CAN.uKeyKeepCnt2 = 2;
   4097          			//process keep data
   4098          		}
   4099          		break;			
   4100          		
   4101          	default:
   4102          		m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   4103          		m_BMW_CAN.uKeyKeepCnt2 = 0;
   4104          		m_BMW_CAN.bKeyKeepOneTime2 = 0;
   4105          		break;
   4106          	}
   4107          }
   4108          
   4109          /*
   4110          ******************************************************
   4111          方向盘按键
   4112          ******************************************************
   4113          */
   4114          	
   4115          
   4116          void Benci_newC_CanBus_FetchSteerKeyInfo_Type1(CanRxMsg RxMessage)
   4117          
   4118          {
   4119          #if 0
   4120              if (!(RxMessage.StdId == Benci_newC_CAN_STEER_KEY_L_STD_TYPE_ID && RxMessage.DLC == 8))
   4121              {
   4122                  return ;
   4123              }
   4124          	return ;
   4125          
   4126              //initial
   4127              
   4128          
   4129              if (RxMessage.Data[5] ==0x02)
   4130                  //back
   4131              {
   4132                  LF_CanBus_SendControlCmd(BENZE_KEY_KnobAround_KEY_BACK_KEEP);
   4133              }
   4134              else if (RxMessage.Data[5] ==0x80)
   4135                  //enter
   4136              {
   4137                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_ENTER_PRESSED);
   4138              }
   4139              else if (RxMessage.Data[4] ==0x10)
   4140                  //yuying
   4141              {
   4142                  //LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_TUNEDEC_PRESSED);
   4143              }
   4144              else if (RxMessage.Data[4] ==0x08)
   4145                  //enter
   4146              {
   4147                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_LEFT_PRESSED);
   4148              }
   4149              else if (RxMessage.Data[4] ==0x04)
   4150                  //enter
   4151              {
   4152                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_RIGHT_PRESSED);
   4153              }
   4154              else if (RxMessage.Data[4] ==0x01)
   4155                  //enter
   4156              {
   4157                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_UP_PRESSED);
   4158              }
   4159              else if (RxMessage.Data[4] ==0x02)
   4160                  //enter
   4161              {
   4162                  LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_DN_PRESSED);
   4163              }	
   4164          	#endif
   4165          }
   4166          
   4167          
   4168          void Benci_newC_CanBus_FetchSteerKeyInfo_Type2(CanRxMsg RxMessage)
   4169          {
   4170          	static vu8 uCKeepFlag = 0;
   4171          	static vu8 uRetKeepFlag = 0;
   4172          	static vu16 wBounceCnt = 0;
   4173          	BYTE i;
                 	     ^
Warning[Pe177]: variable "i" was declared but never referenced
   4174          
   4175              if (!(RxMessage.StdId == Benci_newC_CAN_steer_key_STD_TYPE_ID && RxMessage.DLC == 8))
   4176              {
   4177                  return ;
   4178              }
   4179          
   4180          	
   4181           if (RxMessage.Data[4] ==0x01&&(Sys.FS_select.NAV_key_type==1))//语音开
   4182              {
   4183          		m_BMW_CAN.uKeyID3 = BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED;
   4184              }
   4185           else if((RxMessage.Data[2] ==0x40)&&(Sys.FS_select.NAV_key_type==0)) //语音关
   4186           	{
   4187           	m_BMW_CAN.uKeyID3 = BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED;
   4188           	}
   4189          	else
   4190          	{
   4191          
   4192          		//-------------------------------------------------------
   4193          		wBounceCnt++;
   4194          		//if (wBounceCnt >= 2)
   4195          		{
   4196          			uCKeepFlag = 0;
   4197          			uRetKeepFlag = 0;
   4198          			m_BMW_CAN.uKeyID3 = BENZE_KEY_ALL_BOUNCED;
   4199          			wBounceCnt = 0;
   4200          		}
   4201          		m_BMW_CAN.uKeyKeepCnt3 = 0;
   4202          		m_BMW_CAN.bKeyKeepOneTime3 = 0;
   4203          
   4204          	}
   4205          
   4206          
   4207          	switch (m_BMW_CAN.uKeyID3)
   4208          	{
   4209          	case BENZE_KEY_ALL_BOUNCED:
   4210          		uCKeepFlag = 0;
   4211          		uRetKeepFlag = 0;
   4212          		m_BMW_CAN.uKeyID3 = BENZE_KEY_ALL_BOUNCED;
   4213          		wBounceCnt = 0;
   4214          		m_BMW_CAN.uKeyKeepCnt3 = 0;
   4215          		m_BMW_CAN.bKeyKeepOneTime3 = 0;
   4216          		break;
   4217          	case BENZE_KEY_KnobAround_KEY_BACK_KEEP:
   4218          		m_BMW_CAN.uKeyKeepCnt3++;
   4219          		if (m_BMW_CAN.uKeyKeepCnt3 == 1)
   4220          			//bounce
   4221          		{
   4222          			//process first pressed data
   4223          			LF_CanBus_SendControlCmd(BENZE_KEY_KnobAround_KEY_BACK_KEEP);
   4224          		}
   4225          		else if (m_BMW_CAN.uKeyKeepCnt3 >= 10)
   4226          			//keep
   4227          		{
   4228          			m_BMW_CAN.uKeyKeepCnt3 = 2;
   4229          			//process keep data
   4230          			
   4231          		}
   4232          		break;
   4233          	
   4234          
   4235          	case BENZE_CMD_KNOB_ENTER_PRESSED:
   4236          		m_BMW_CAN.uKeyKeepCnt3++;
   4237          		if (m_BMW_CAN.uKeyKeepCnt3 == 1)
   4238          			//bounce
   4239          		{
   4240          			//process first pressed data
   4241          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_ENTER_PRESSED);
   4242          			
   4243          			if(Sys.Main_Source==SRC_CAM)
   4244          			CAN_turner.flag=1;
   4245          		}
   4246          		else if (m_BMW_CAN.uKeyKeepCnt3 >= 10)
   4247          			//keep
   4248          		{
   4249          			m_BMW_CAN.uKeyKeepCnt3 = 2;
   4250          			//process keep data
   4251          		}
   4252          		break;
   4253          	case BENZE_CMD_KNOB_LEFT_PRESSED:
   4254          		m_BMW_CAN.uKeyKeepCnt3++;
   4255          		if (m_BMW_CAN.uKeyKeepCnt3 == 1)
   4256          			//bounce
   4257          		{
   4258          			//process first pressed data
   4259          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_LEFT_PRESSED);
   4260          			
   4261          			if(Sys.Main_Source==SRC_CAM)
   4262          			CAN_turner.count--;
   4263          		}
   4264          		else if (m_BMW_CAN.uKeyKeepCnt3 >= 10)
   4265          			//keep
   4266          		{
   4267          			m_BMW_CAN.uKeyKeepCnt3 = 2;
   4268          			//process keep data
   4269          		}
   4270          		break;
   4271          	case BENZE_CMD_KNOB_RIGHT_PRESSED:
   4272          		m_BMW_CAN.uKeyKeepCnt3++;
   4273          		if (m_BMW_CAN.uKeyKeepCnt3 == 1)
   4274          			//bounce
   4275          		{
   4276          			//process first pressed data
   4277          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_RIGHT_PRESSED);
   4278          			
   4279          			if(Sys.Main_Source==SRC_CAM)
   4280          				CAN_turner.count++;
   4281          		}
   4282          		else if (m_BMW_CAN.uKeyKeepCnt3 >= 10)
   4283          			//keep
   4284          		{
   4285          			m_BMW_CAN.uKeyKeepCnt3 = 2;
   4286          			//process keep data
   4287          		}
   4288          		break;
   4289          	case BENZE_CMD_KNOB_UP_PRESSED:
   4290          		m_BMW_CAN.uKeyKeepCnt3++;
   4291          		if (m_BMW_CAN.uKeyKeepCnt3 == 1)
   4292          			//bounce
   4293          		{
   4294          			//process first pressed data
   4295          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_UP_PRESSED);
   4296          			
   4297          			
   4298          		}
   4299          		else if (m_BMW_CAN.uKeyKeepCnt3 >= 10)
   4300          			//keep
   4301          		{
   4302          			m_BMW_CAN.uKeyKeepCnt3 = 2;
   4303          			//process keep data
   4304          		}
   4305          		break;
   4306          	case BENZE_CMD_KNOB_DN_PRESSED:
   4307          		m_BMW_CAN.uKeyKeepCnt3++;
   4308          		if (m_BMW_CAN.uKeyKeepCnt3 == 1)
   4309          			//bounce
   4310          		{
   4311          			//process first pressed data
   4312          			LF_CanBus_SendControlCmd(BENZE_CMD_KNOB_DN_PRESSED);
   4313          			
   4314          		}
   4315          		else if (m_BMW_CAN.uKeyKeepCnt3 >= 10)
   4316          			//keep
   4317          		{
   4318          			m_BMW_CAN.uKeyKeepCnt3 = 2;
   4319          			//process keep data
   4320          		}
   4321          		break;
   4322          	case BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED:
   4323          		m_BMW_CAN.uKeyKeepCnt3++;
   4324          		if (m_BMW_CAN.uKeyKeepCnt3 == 1)
   4325          			//bounce
   4326          		{
   4327          			//process first pressed data
   4328          			if((Sys.Main_Source==SRC_CarMedia)&&(Sys.FS_select.NAV_key_type==1))
   4329          			LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED);
   4330          			else if(Sys.Main_Source!=SRC_CarMedia&&Sys.FS_select.NAV_key_type==0)
   4331          				LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   4332          			//else //if()
   4333          			//LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   4334          		}
   4335          		else if (m_BMW_CAN.uKeyKeepCnt3 >= 10)
   4336          			//keep
   4337          		{
   4338          			m_BMW_CAN.uKeyKeepCnt3 = 2;
   4339          			if((Sys.Main_Source==SRC_CarMedia)&&(Sys.FS_select.NAV_key_type==0))
   4340          			LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED);
   4341          			//process keep data
   4342          		}
   4343          		break;	
   4344          	case BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED:
   4345          		m_BMW_CAN.uKeyKeepCnt3++;
   4346          		if (m_BMW_CAN.uKeyKeepCnt3 == 1)
   4347          			//bounce
   4348          		{
   4349          			//process first pressed data
   4350          			LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   4351          		}
   4352          		else if (m_BMW_CAN.uKeyKeepCnt3 >= 10)
   4353          			//keep
   4354          		{
   4355          			m_BMW_CAN.uKeyKeepCnt3 = 2;
   4356          			//process keep data
   4357          		}
   4358          		break;			
   4359          		
   4360          	default:
   4361          		m_BMW_CAN.uKeyID3 = BENZE_KEY_ALL_BOUNCED;
   4362          		m_BMW_CAN.uKeyKeepCnt3 = 0;
   4363          		m_BMW_CAN.bKeyKeepOneTime3 = 0;
   4364          		break;
   4365          	}
   4366          }
   4367          
   4368          
   4369          
   4370          /*
   4371          ********************************************************
   4372          方向盘转角
   4373          ********************************************************
   4374          */
   4375          void Benci_newC_CanBus_FetchSteerAngleInfo(CanRxMsg RxMessage)
   4376          {
   4377          
   4378          	     if (RxMessage.StdId == Benci_newC_CAN_STEERINGANGLE_STD_ID && RxMessage.DLC == 8)
   4379          	    {
   4380          	        m_BMW_CAN.benze_Steering_angle[0] =((RxMessage.Data[3]<< 8) | RxMessage.Data[4]); //方向盘角度信息
   4381          	    }
   4382          }
   4383          /*
   4384          ***********************************************************
   4385          *handle the CMD from CAN BUS
   4386          *
   4387          ***********************************************************
   4388          */
   4389          
   4390          void Benci_newC_CanBus_FetchCmdTask(void)
   4391          {
   4392              BYTE action = 0;
                          ^
Warning[Pe177]: variable "action" was declared but never referenced
   4393          
   4394              
   4395              if (!m_BMW_CAN.wLoopTimer)
   4396              {
   4397                  switch (LF_CanBus_FetchCmd())
   4398                  {
   4399                  case BENZE_CMD_KNOB_LEFT_PRESSED:
   4400          			Can_key_cmd=key_left;
   4401                    break;
   4402                  case BENZE_CMD_KNOB_RIGHT_PRESSED:
   4403          			Can_key_cmd=key_right;
   4404                    break;
   4405                  case BENZE_CMD_KNOB_TUNEDEC_PRESSED:
   4406          			Can_key_cmd=key_up;
   4407                      break;
   4408                  case BENZE_CMD_KNOB_TUNEINC_PRESSED:
   4409          			Can_key_cmd=key_down;
   4410                      break;
   4411                  case BENZE_CMD_KNOB_UP_PRESSED:
   4412          			Can_key_cmd=key_up;
   4413                      break;
   4414                  case BENZE_CMD_KNOB_DN_PRESSED:
   4415          			Can_key_cmd=key_down;
   4416                      break;
   4417                  case BENZE_CMD_KNOB_ENTER_PRESSED:
   4418          			Can_key_cmd=key_enter;
   4419                      break;
   4420                  case BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED:
   4421          			Can_key_cmd=key_media;
   4422                      break;
   4423                  case BENZE_CMD_STEERING_RIGHT_KEY_RET_KEEP:
   4424                      //IPC_SendKeyMessage_Menu(MSG_ACTION_PRESSED);
   4425                      //IPC_SendKeyMessage_Media_Sw(MSG_ACTION_PRESSED);
   4426                      break;
   4427                  case BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED:
   4428          			Can_key_cmd=key_NAVI;
   4429                      break;
   4430                  
   4431                  case BENZE_CMD_MENU_PRESSED:
   4432                     //if(g_stuSYSINFO.uOSDMainMode==MAIN_OSD_MODE_IN_DISAPP)//solve small screen can not show menu
   4433                     {
   4434                      //IPC_SendKeyMessage_Menu(MSG_ACTION_PRESSED);
   4435          			//IPC_SendKeyMessage_ShortCuts(0x10,MSG_ACTION_PRESSED);
   4436                     }
   4437                     
   4438                      break;
   4439          
   4440                  default:
   4441                      break;
   4442                  }
   4443                  m_BMW_CAN.wLoopTimer = 10;
   4444              }
   4445          }
   4446          
   4447          //工作信息
   4448          void Benci_newC_CanBus_work_data_analytic(CanRxMsg RxMessage)
   4449          {
   4450              static u8 uPreMediaStatus, uPrePreMediaStatus;
   4451              static u8 uPreAirStatus, uPrePreAirStatus;
   4452              uPreMediaStatus = uPreMediaStatus;
   4453              uPrePreMediaStatus = uPrePreMediaStatus;
   4454              uPreAirStatus = uPreAirStatus;
   4455              uPrePreAirStatus = uPrePreAirStatus;
   4456          	
   4457          	if (RxMessage.StdId == Benci_newC_CAN_POWER_ON_STD_ID && RxMessage.DLC == 4)
   4458          	{
   4459          		m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;
   4460          		Sys.wPowerOnByCanTimer=2000;
   4461          		//m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   4462          		//m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
   4463          
   4464          	}
   4465          	
   4466          	if (RxMessage.StdId == Benci_newC_CAN_POWER_ON_STD_ID && RxMessage.DLC == 4) 
   4467          	{
   4468          		if((RxMessage.Data[0]&0x0f)==0x0f)
   4469          			{
   4470          			m_BMW_CAN.AccPwr = SYSTEM_POWER_ON;
   4471          			m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_ON;
   4472          			m_BMW_CAN.AudioPwr = SYSTEM_POWER_ON;
   4473          			Sys.wPowerOnByCanTimer2=2000;
   4474          			Sys.wPowerOnByCanTimer=2000;
   4475          			}
   4476          			else if((RxMessage.Data[0]&0x0f)==0x0d)
   4477          			m_BMW_CAN.AudioPwr =SYSTEM_POWER_OFF;
   4478                          
   4479          			Sys_CAN_light.sys_light_value=((RxMessage.Data[0]&0xf0)>>4);
   4480          		
   4481          	}
   4482          
   4483          	if (RxMessage.StdId == Benci_newC_CAN_light_mode_STD_ID && RxMessage.DLC == 4) 
   4484          	{
   4485          			Sys_CAN_light.sun_mode=RxMessage.Data[2];
   4486          			Sys_CAN_light.button_light_value=RxMessage.Data[3];
   4487          	}
   4488          
   4489          	
   4490          
   4491               if (RxMessage.StdId == Benci_newC_CAN_DOOR_F_L_STD_ID && RxMessage.DLC == 8) //radar INFO
   4492              {
   4493              	if(m_CarDoorInfo_last.uFront_Left   !=(RxMessage.Data[0]&0x0f))
   4494              		{
   4495              		m_CarDoorInfo_last.uFront_Left=(RxMessage.Data[0]&0x0f);
   4496          			if((RxMessage.Data[0]&0x0f)==0x02)
   4497          				m_CarDoorInfo.uFront_Left=1;
   4498          			else
   4499          				m_CarDoorInfo.uFront_Left=0;
   4500          			m_CarDoorInfo.SendFlag = 1;
   4501              		}
   4502              }
   4503          
   4504               if (RxMessage.StdId == Benci_newC_CAN_DOOR_F_R_STD_ID && RxMessage.DLC == 8) //radar INFO
   4505              {
   4506              	if(m_CarDoorInfo_last.uFront_Right   !=(RxMessage.Data[0]&0x0f))
   4507              		{
   4508              		m_CarDoorInfo_last.uFront_Right=(RxMessage.Data[0]&0x0f);
   4509          			if((RxMessage.Data[0]&0x0f)==0x02)
   4510          				m_CarDoorInfo.uFront_Right=1;
   4511          			else
   4512          				m_CarDoorInfo.uFront_Right=0;
   4513          			m_CarDoorInfo.SendFlag = 1;
   4514              		}
   4515              }
   4516          	 
   4517          	  if (RxMessage.StdId == Benci_newC_CAN_DOOR_R_L_STD_ID && RxMessage.DLC == 8) //radar INFO
   4518          	 {
   4519          		 if(m_CarDoorInfo_last.uRear_Left	 !=(RxMessage.Data[0]&0x0f))
   4520          			 {
   4521          			 m_CarDoorInfo_last.uRear_Left=(RxMessage.Data[0]&0x0f);
   4522          			 if((RxMessage.Data[0]&0x0f)==0x0e)
   4523          				 m_CarDoorInfo.uRear_Left=1;
   4524          			 else
   4525          				 m_CarDoorInfo.uRear_Left=0;
   4526          			 m_CarDoorInfo.SendFlag = 1;
   4527          			 }
   4528          	 }
   4529          	 
   4530          	  if (RxMessage.StdId == Benci_newC_CAN_DOOR_R_R_STD_ID && RxMessage.DLC == 8) //radar INFO
   4531          	 {
   4532          		 if(m_CarDoorInfo_last.uRear_Right   !=(RxMessage.Data[0]&0x0f))
   4533          			 {
   4534          			 m_CarDoorInfo_last.uRear_Right=(RxMessage.Data[0]&0x0f);
   4535          			 if((RxMessage.Data[0]&0x0f)==0x0e)
   4536          				 m_CarDoorInfo.uRear_Right=1;
   4537          			 else
   4538          				 m_CarDoorInfo.uRear_Right=0;
   4539          			 m_CarDoorInfo.SendFlag = 1;
   4540          			 }
   4541          	 }
   4542          
   4543          	  if (RxMessage.StdId == Benci_newC_CAN_DOOR_REAR_Lid_STD_ID && RxMessage.DLC == 8) //radar INFO
   4544          	 {
   4545          		 if(m_CarDoorInfo_last.rear   !=(RxMessage.Data[0]))
   4546          			 {
   4547          			 m_CarDoorInfo_last.rear=(RxMessage.Data[0]);
   4548          			 if((RxMessage.Data[0])==0x20)
   4549          				 m_CarDoorInfo.rear=1;
   4550          			 else
   4551          				 m_CarDoorInfo.rear=0;
   4552          			 m_CarDoorInfo.SendFlag = 1;
   4553          			 }
   4554          	 }
   4555          	   if (RxMessage.StdId == Benci_newC_CAN_DOOR_font_Lid_STD_ID && RxMessage.DLC == 4) //radar INFO
   4556          	  {
   4557          		  if(m_CarDoorInfo_last.front   !=(RxMessage.Data[0]))
   4558          			  {
   4559          			  m_CarDoorInfo_last.front=(RxMessage.Data[0]);
   4560          			  if((RxMessage.Data[0])==0x60)
   4561          				  m_CarDoorInfo.front=1;
   4562          			  else
   4563          				  m_CarDoorInfo.front=0;
   4564          			  m_CarDoorInfo.SendFlag = 1;
   4565          			  }
   4566          	  }
   4567          
   4568          	 
   4569          
   4570          	 #if 0
   4571          	if (RxMessage.StdId == Benci_newC_CAN_air_wind_STD_ID && RxMessage.DLC == 8) 
   4572          		{
   4573          		if(m_BMW_CAN.benze_air_auto!=RxMessage.Data[2]&0xff)
   4574          			{
   4575          		m_BMW_CAN.benze_air_auto=RxMessage.Data[2]&0xff;
   4576          		m_BMW_CAN.benze_air_Disp=1;
   4577          			}
   4578          		if(m_BMW_CAN.benze_air_wind_speed!=RxMessage.Data[7]&0xff)
   4579          			{
   4580          		m_BMW_CAN.benze_air_wind_speed=RxMessage.Data[7]&0xff;
   4581          		m_BMW_CAN.benze_air_Disp=1;
   4582          			}
   4583          		if(m_BMW_CAN.benze_air_wind_mode!=RxMessage.Data[6])
   4584          			{
   4585          		m_BMW_CAN.benze_air_wind_mode=RxMessage.Data[6];
   4586          		m_BMW_CAN.benze_air_Disp=1;
   4587          			}
   4588          		}
   4589          	#endif
   4590          	
   4591          	if (RxMessage.StdId == Benci_newC_CAN_air_temp_STD_ID && RxMessage.DLC == 8) 
   4592          		{
   4593          
   4594          			if(m_BMW_CAN.benze_air_auto!=RxMessage.Data[2]&0xff)
   4595          			{
   4596          		m_BMW_CAN.benze_air_auto=RxMessage.Data[2]&0xff;
   4597          		m_BMW_CAN.benze_air_Disp=1;
   4598          			}
   4599          		if(m_BMW_CAN.benze_air_wind_speed!=RxMessage.Data[7]&0xff)
   4600          			{
   4601          		m_BMW_CAN.benze_air_wind_speed=RxMessage.Data[7]&0xff;
   4602          		m_BMW_CAN.benze_air_Disp=1;
   4603          			}
   4604          		if(m_BMW_CAN.benze_air_wind_mode!=RxMessage.Data[6])
   4605          			{
   4606          		m_BMW_CAN.benze_air_wind_mode=RxMessage.Data[6];
   4607          		m_BMW_CAN.benze_air_Disp=1;
   4608          			}
   4609          		
   4610          		if(m_BMW_CAN.benze_air_ac!=RxMessage.Data[1]&0xff)
   4611          			{
   4612          		m_BMW_CAN.benze_air_ac=RxMessage.Data[1]&0xff;
   4613          		m_BMW_CAN.benze_air_Disp=1;
   4614          			}
   4615          		if(m_BMW_CAN.benze_air_left_temperature!=RxMessage.Data[4])
   4616          			{
   4617          		m_BMW_CAN.benze_air_left_temperature=RxMessage.Data[4];
   4618          		m_BMW_CAN.benze_air_Disp=1;
   4619          			}
   4620          		if(m_BMW_CAN.benze_air_right_temperature!=RxMessage.Data[5])
   4621          			{
   4622          		m_BMW_CAN.benze_air_right_temperature=RxMessage.Data[5];
   4623          		m_BMW_CAN.benze_air_Disp=1;
   4624          			}
   4625          		}
   4626          
   4627          	
   4628          	
   4629              if (RxMessage.StdId == Benci_newC_CAN_RADA_STD_ID && RxMessage.DLC == 8) //radar INFO
   4630              {
   4631              	//if(RxMessage.Data[0]==0x80)
   4632               		
   4633          		//else if(RxMessage.Data[0]==0x00)
   4634          		//	m_RADAR.fDisp=0;
   4635          		if(RxMessage.Data[0]==0||RxMessage.Data[0]==0x99)
   4636          			m_RADAR.power_on_statu=0;
   4637          		else
   4638          			m_RADAR.power_on_statu=1;
   4639          		if(m_RADAR_last_buff[0]!=RxMessage.Data[0])
   4640          			{
   4641          			m_RADAR.fDisp=1;
   4642          			m_RADAR_last_buff[0]=RxMessage.Data[0];
   4643          			}
   4644          		if(m_RADAR_last_buff[1]!=RxMessage.Data[3])
   4645          			{
   4646          			m_RADAR.fDisp=1;
   4647          			m_RADAR_last_buff[1]=RxMessage.Data[3];
   4648          			}
   4649          		
   4650          			m_RADAR.uRear_Left    =(RxMessage.Data[3]>>0)&0x0F;
   4651                      m_RADAR.uRear_MidLeft =(RxMessage.Data[3]>>0)&0x0F;
   4652                      m_RADAR.uRear_MidRight=(RxMessage.Data[3]>>4)&0x0F;
   4653                      m_RADAR.uRear_Right   =(RxMessage.Data[3]>>4)&0x0F;
   4654          			
   4655          			m_RADAR.uFront_Left    =(RxMessage.Data[0]>>0)&0x0F;
   4656                      m_RADAR.uFront_MidLeft =(RxMessage.Data[0]>>0)&0x0F;
   4657                      m_RADAR.uFront_MidRight=(RxMessage.Data[0]>>4)&0x0F;
   4658                      m_RADAR.uFront_Right   =(RxMessage.Data[0]>>4)&0x0F;
   4659              }
   4660          
   4661          if (RxMessage.StdId == Benci_newC_CAN_media_statu_STD_TYPE_ID && RxMessage.DLC == 8) //radar INFO
   4662          {
   4663          	if(Sys.Car_Main_Source!=RxMessage.Data[2])
   4664          		{
   4665          		if(Sys.Car_Main_Source==0x01&&RxMessage.Data[2]==0x05)
   4666          			;
   4667          		else
   4668          			{
   4669          	 Sys.Car_Main_Source=RxMessage.Data[2];
   4670          	 Sys.Car_updata_flag=1;
   4671          			}
   4672          		}
   4673          }
   4674          
   4675          //Benci_newC_CAN_mid_control_KEY_STD_ID
   4676          //Benci_newC_CAN_car_touch1_STD_ID
   4677          if (RxMessage.StdId == 0x1ef && RxMessage.DLC == 8) //radar INFO
   4678          {
   4679          static BYTE can_touch_buff[8];
                             ^
Warning[Pe550]: variable "can_touch_buff" was set but never used
   4680          for(int i=0;i<8;i++)
   4681          	 can_touch_buff[i]=RxMessage.Data[i];
   4682          }
   4683          
   4684          if (RxMessage.StdId == Benci_newC_CAN_car_TFT_ONOFF_STD_ID && RxMessage.DLC == 5) //radar INFO
   4685          {
   4686          	 Sys_CAN_light.car_tft_onoff=RxMessage.Data[2];
   4687          }
   4688          
   4689          
   4690          
   4691          
   4692          if (RxMessage.StdId == Benci_newC_CAN_font_rec_TYPE_ID && RxMessage.DLC == 8) //radar INFO
   4693          {
   4694          	if(m_BMW_CAN.Car_font_rec_flag!=RxMessage.Data[1])
   4695          	 	m_BMW_CAN.Car_font_rec_flag=RxMessage.Data[1];
   4696          
   4697          		if(Sys.Main_Source==SRC_NAVI&&m_BMW_CAN.Car_font_rec_flag)
   4698          			{
   4699          	 	LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_CarMedia_PRESSED);
   4700          		m_BMW_CAN.Car_font_rec_source=1;
   4701          			}
   4702          		else if(Sys.Main_Source==SRC_CarMedia&&m_BMW_CAN.Car_font_rec_source&&m_BMW_CAN.Car_font_rec_flag==0)
   4703          			{
   4704          			LF_CanBus_SendControlCmd(BENZE_CMD_STEERING_RIGHT_KEY_NAVI_PRESSED);
   4705          			m_BMW_CAN.Car_font_rec_source=0;
   4706          			}
   4707          		else if(m_BMW_CAN.Car_font_rec_flag==0)
   4708          			m_BMW_CAN.Car_font_rec_source=0;
   4709          }
   4710          
   4711          
   4712          
   4713          
   4714          }
   4715          void Benci_newC_Power_On(CanRxMsg RxMessage)
   4716          {
   4717          }
   4718          #endif
   4719          
   4720          
   4721          #if 1 //Miller.Tao,2014-09-09
   4722          /*define unity API for All CAN function*/
   4723          
   4724          /*
   4725          ========================
   4726          initial can varibale
   4727          ========================
   4728          */
   4729          void LF_CanBus_InitVar(void)
   4730          {
   4731              m_BMW_CAN.benze_Steering_angle[0] = 0;
   4732          
   4733          	m_RADAR.uRear_Left    =0;
   4734              m_RADAR.uRear_MidLeft =0;
   4735              m_RADAR.uRear_MidRight=0;
   4736              m_RADAR.uRear_Right   =0;
   4737          
   4738          	m_BMW_CAN.uKeyID2 = BENZE_KEY_ALL_BOUNCED;
   4739          	m_RADAR.fDisp=0;
   4740          
   4741          	can_door_last_statu=0x50;
   4742          	door_index=0;
   4743          	m_CarDoorInfo.show_id=0;
   4744             
   4745          }
   4746          
   4747          void LF_CanBus_SendControlCmd(BYTE cmd)
   4748          {
   4749              m_BMW_CAN.uCanSendCmdIndex++;
   4750              if (m_BMW_CAN.uCanSendCmdIndex >= BENZE_CAN_CNTR_BUF_MAX)
   4751              {
   4752                  m_BMW_CAN.uCanSendCmdIndex = 0;
   4753              }
   4754              m_BMW_CAN.uCanSendCmdBuf[m_BMW_CAN.uCanSendCmdIndex] = cmd;
   4755          }
   4756          
   4757           BYTE LF_CanBus_FetchCmd(void)
   4758          {
   4759              BYTE temp;
   4760              if (m_BMW_CAN.uCanFetchCmdIndex != m_BMW_CAN.uCanSendCmdIndex)
   4761              {
   4762          
   4763                  m_BMW_CAN.uCanFetchCmdIndex++;
   4764                  if (m_BMW_CAN.uCanFetchCmdIndex >= BENZE_CAN_CNTR_BUF_MAX)
   4765                  {
   4766                      m_BMW_CAN.uCanFetchCmdIndex = 0;
   4767                  }
   4768                  temp = m_BMW_CAN.uCanFetchCmdIndex;
   4769          
   4770                  return m_BMW_CAN.uCanSendCmdBuf[temp];
   4771          
   4772          
   4773              }
   4774              else
   4775              {
   4776                  return BENZE_CMD_NULL;
   4777              }
   4778          }
   4779          //define a function to config can module
   4780          void LF_CanBus_Config(void)
   4781          {
   4782              #if LF_CAN_TYPE == BWMX1CAN
   4783             // BWM_X1_CanBus_Config();
   4784          	#endif
   4785          
   4786          	#if LF_CAN_TYPE == AudiQ3CAN
   4787              //Audi_Q3_CanBus_Config();
   4788          	#endif
   4789          
   4790          	#if LF_CAN_TYPE == BWM5SCAN
   4791                  BWM_5S_CanBus_Config();
   4792          	#endif 
   4793          
   4794          	#if LF_CAN_TYPE == Benci_newC
   4795                  Benci_newC_CanBus_Config();
   4796          	#endif 
   4797          }
   4798          
   4799          //工作信息
   4800          void LF_CanBus_work_data_analytic(CanRxMsg RxMessage)
   4801          {
   4802             #if LF_CAN_TYPE == BWMX1CAN
   4803             //工作信息
   4804             //BWM_X1_CanBus_work_data_analytic(RxMessage);
   4805             #endif
   4806          
   4807             #if LF_CAN_TYPE == AudiQ3CAN
   4808             //工作信息
   4809             //Audi_Q3_CanBus_work_data_analytic(RxMessage);
   4810             #endif
   4811              #if LF_CAN_TYPE == BWM5SCAN
   4812             //工作信息
   4813             BWM_5S_CanBus_work_data_analytic(RxMessage);
   4814             #endif
   4815          
   4816             #if LF_CAN_TYPE == Benci_newC
   4817             //工作信息
   4818             Benci_newC_CanBus_work_data_analytic(RxMessage);
   4819             #endif
   4820          }
   4821          
   4822          //方控按键处理
   4823          void LF_CanBus_SteerKey_Task(CanRxMsg RxMessage)
   4824          {
   4825             #if LF_CAN_TYPE == BWMX1CAN
   4826             //BWM_X1_CanBus_FetchSteerKeyInfo_Type1(RxMessage);
   4827             #endif
   4828             #if LF_CAN_TYPE == AudiQ3CAN
   4829            // Audi_Q3_CanBus_FetchSteerKeyInfo_Type1(RxMessage);
   4830             #endif
   4831             #if LF_CAN_TYPE == BWM5SCAN
   4832             BWM_5S_CanBus_FetchSteerKeyInfo_Type1(RxMessage);
   4833             BWM_5S_CanBus_FetchSteerKeyInfo_Type2(RxMessage);
   4834             BWM_5S_CanBus_FetchSteerKeyInfo_Type3(RxMessage);
   4835             BWM_5S_CanBus_FetchSteerKeyInfo_Type4(RxMessage);
   4836            // BWM_5S_CanBus_FetchSteerKeyInfo_Type5(RxMessage);
   4837             #endif
   4838          
   4839             #if LF_CAN_TYPE == Benci_newC
   4840             //工作信息
   4841             Benci_newC_CanBus_FetchSteerKeyInfo_Type1(RxMessage);
   4842             #endif
   4843          }
   4844          //档位处理
   4845          void LF_CANBus_Stalls_Task(CanRxMsg RxMessage)
   4846          {
   4847             #if LF_CAN_TYPE == BWMX1CAN
   4848             //BWM_X1_Can_FetchStallsInfo(RxMessage);
   4849             #endif
   4850             #if LF_CAN_TYPE == AudiQ3CAN
   4851             //Audi_Q3_Can_FetchStallsInfo(RxMessage);
   4852             #endif
   4853          
   4854             #if LF_CAN_TYPE == BWM5SCAN
   4855             BWM_5S_Can_FetchStallsInfo(RxMessage);
   4856             #endif
   4857          
   4858                #if LF_CAN_TYPE == Benci_newC
   4859             Benci_newC_Can_FetchStallsInfo(RxMessage);
   4860             #endif
   4861          }
   4862          //圆形手柄和按键处理
   4863          void LF_CANBus_Knob_Task(CanRxMsg RxMessage)
   4864          {
   4865             #if LF_CAN_TYPE == BWMX1CAN
   4866             
   4867             #endif 
   4868          }
   4869          //对应,AudiCan_FetchCmd
   4870          void LF_CanBus_FetchCmdTask(void)
   4871          {
   4872               #if LF_CAN_TYPE == BWMX1CAN
   4873              // BWM_X1_CanBus_FetchCmdTask();
   4874          	 #endif
   4875          
   4876          	  #if LF_CAN_TYPE == AudiQ3CAN
   4877              // Audi_Q3_CanBus_FetchCmdTask();
   4878          	 #endif
   4879          
   4880          	 #if LF_CAN_TYPE == BWM5SCAN
   4881               BWM_5S_CanBus_FetchCmdTask();
   4882          	 #endif	 
   4883          
   4884          	 	 #if LF_CAN_TYPE == Benci_newC
   4885               Benci_newC_CanBus_FetchCmdTask();
   4886          	 #endif	 
   4887          }
   4888          
   4889          void LF_CanBus_PowerOn(CanRxMsg RxMessage)
   4890          {
   4891          	#if LF_CAN_TYPE == BWM5SCAN
   4892          	
   4893          	BMW_5S_Power_On(RxMessage);
   4894          
   4895          	#endif	 
   4896          	 #if LF_CAN_TYPE == AudiQ3CAN
   4897          	// Audi_Q3_Power_On(RxMessage);
   4898          
   4899          	 #endif
   4900          
   4901          	 	#if LF_CAN_TYPE == Benci_newC
   4902          	
   4903          	Benci_newC_Power_On(RxMessage);
   4904          
   4905          	#endif
   4906          }
   4907          //MCU 往CAN BUS上发送数据
   4908          void LF_CanBus_Contrl_Task(void)
   4909          {
   4910          
   4911          }
   4912          //////////////the 2 following functions is for CAN1,CAN2 ISR ///////////////////////
   4913          /*==========================================
   4914          *Func:CAN1_USER_HANDLER
   4915          *description:handle user's application code of CAN1,a unity interface
   4916          *Author:Miller.Tao
   4917          *date:20140818
   4918          =============================================*/
   4919          void CAN1_USER_HANDLER(CanRxMsg RxMessage)
   4920          {
   4921          	  #if LF_CAN_TYPE == AudiQ3CAN
   4922          
   4923          	  
   4924          	  #endif
   4925          
   4926          	
   4927          }
   4928          
   4929          
   4930          /*==========================================
   4931          *Func:CAN2_USER_HANDLER
   4932          *description:handle user's application code of CAN2,a unity interface
   4933          *Author:Miller.Tao
   4934          *date:20140818
   4935          =============================================*/
   4936          
   4937          void CAN2_USER_HANDLER(CanRxMsg RxMessage)
   4938          {
   4939               #if LF_CAN_TYPE == BWMX1CAN
   4940               LF_CANBus_Stalls_Task(RxMessage); 
   4941          	 LF_CanBus_SteerKey_Task(RxMessage);
   4942          	 LF_CanBus_work_data_analytic(RxMessage);
   4943          	 //BWM_X1_CanBus_FetchSteerAngleInfo(RxMessage);
   4944          	 #endif
   4945          
   4946          
   4947          	  #if LF_CAN_TYPE == AudiQ3CAN
   4948               LF_CANBus_Stalls_Task(RxMessage); 
   4949          	 LF_CanBus_SteerKey_Task(RxMessage);
   4950          	 LF_CanBus_work_data_analytic(RxMessage);
   4951          	 //Audi_Q3_CanBus_FetchSteerAngleInfo(RxMessage);
   4952          	 #endif
   4953          	 
   4954          	 #if LF_CAN_TYPE == BWM5SCAN
   4955               LF_CANBus_Stalls_Task(RxMessage); 
   4956          	 LF_CanBus_SteerKey_Task(RxMessage);
   4957          	 LF_CanBus_work_data_analytic(RxMessage);
   4958          	 BWM_5S_CanBus_FetchSteerAngleInfo(RxMessage);
   4959          	 #endif
   4960          
   4961          	 	 #if LF_CAN_TYPE == Benci_newC
   4962               LF_CANBus_Stalls_Task(RxMessage); 
   4963          	 LF_CanBus_SteerKey_Task(RxMessage);
   4964          	 LF_CanBus_work_data_analytic(RxMessage);
   4965          	 Benci_newC_CanBus_FetchSteerAngleInfo(RxMessage);
   4966          	 Benci_newC_CanBus_mid_control_key_fun(RxMessage);
   4967          	 Benci_newC_CanBus_mid_control_key2_fun(RxMessage);
   4968          	 Benci_newC_CanBus_FetchSteerKeyInfo_Type2(RxMessage);
   4969          	 #endif
   4970          }
   4971          
   4972          #endif
   4973          
   4974          
   4975          /**************************************************************************/
   4976          /*                                                                        */
   4977          /**************************************************************************/
   4978          #undef _BENZE_BUS_C_

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  AudiCanBus_FetchCmdTask
        0  AudiCanBus_SendControlCmd
        0  AudiCan_FetchCmd
       16  AudiCan_FetchStallsInfo
       16  AudiCan_FetchStallsInfo_Q3
       16  Audi_CanBus_InputSource_data_analytic
       16  Audi_CanBus_work_data_analytic
       24  BMW_AuxContrl_Task
             24 -> Can_Tx
       32  BMW_KnobContrl
             32 -> Can_Tx
       24  BMW_OptionKey_Task
             24 -> Can_Tx
       32  Benci_newC_CanBus_Config
             32 -> CAN_DeInit
             32 -> CAN_FilterInit
             32 -> CAN_ITConfig
             32 -> CAN_Init
             32 -> CAN_SlaveStartBank
             32 -> CAN_StructInit
        8  Benci_newC_CanBus_FetchCmdTask
              8 -> LF_CanBus_FetchCmd
       16  Benci_newC_CanBus_FetchSteerAngleInfo
       16  Benci_newC_CanBus_FetchSteerKeyInfo_Type1
       24  Benci_newC_CanBus_FetchSteerKeyInfo_Type2
             24 -> LF_CanBus_SendControlCmd
       24  Benci_newC_CanBus_mid_control_key2_fun
             24 -> LF_CanBus_SendControlCmd
       16  Benci_newC_CanBus_mid_control_key_fun
       24  Benci_newC_CanBus_work_data_analytic
             24 -> LF_CanBus_SendControlCmd
       16  Benci_newC_Can_FetchStallsInfo
       16  Benci_newC_Power_On
       16  CAN1_USER_HANDLER
       40  CAN2_USER_HANDLER
             24 -> Benci_newC_CanBus_FetchSteerAngleInfo
             24 -> Benci_newC_CanBus_FetchSteerKeyInfo_Type2
             24 -> Benci_newC_CanBus_mid_control_key2_fun
             24 -> Benci_newC_CanBus_mid_control_key_fun
             24 -> LF_CANBus_Stalls_Task
             24 -> LF_CanBus_SteerKey_Task
             24 -> LF_CanBus_work_data_analytic
             40 -> __aeabi_memcpy4
       24  Can_FetchSteerKeyInfo_Type1
             24 -> AudiCanBus_SendControlCmd
       24  Can_FetchSteerKeyInfo_Type2
             24 -> AudiCanBus_SendControlCmd
       24  Can_FetchSteerKeyInfo_Type3
             24 -> AudiCanBus_SendControlCmd
       24  Can_FetchSteerKeyInfo_Type4
             24 -> AudiCanBus_SendControlCmd
       16  Can_Tx
             16 -> CAN_Transmit
       36  LF_BENCI_KEY_SEND_FUN
             24 -> LF_BENCI_SEND_FUN
             36 -> __aeabi_memcpy4
       24  LF_BENCI_SEND_FUN
             24 -> Can_Tx
       16  LF_CANBus_Knob_Task
       40  LF_CANBus_Stalls_Task
             24 -> Benci_newC_Can_FetchStallsInfo
             40 -> __aeabi_memcpy4
        8  LF_CanBus_Config
              8 -> Benci_newC_CanBus_Config
        0  LF_CanBus_Contrl_Task
        0  LF_CanBus_FetchCmd
        8  LF_CanBus_FetchCmdTask
              8 -> Benci_newC_CanBus_FetchCmdTask
        0  LF_CanBus_InitVar
       40  LF_CanBus_PowerOn
             24 -> Benci_newC_Power_On
             40 -> __aeabi_memcpy4
        0  LF_CanBus_SendControlCmd
       40  LF_CanBus_SteerKey_Task
             24 -> Benci_newC_CanBus_FetchSteerKeyInfo_Type1
             40 -> __aeabi_memcpy4
       40  LF_CanBus_work_data_analytic
             24 -> Benci_newC_CanBus_work_data_analytic
             40 -> __aeabi_memcpy4
       40  LF_FrontContrl
             40 -> Can_Tx


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable17_10
       4  ??DataTable17_11
       4  ??DataTable17_12
       4  ??DataTable17_2
       4  ??DataTable17_3
       4  ??DataTable17_4
       4  ??DataTable17_5
       4  ??DataTable17_6
       4  ??DataTable17_7
       4  ??DataTable17_8
       4  ??DataTable17_9
       4  ??DataTable20
       4  ??DataTable20_1
       4  ??DataTable21
       4  ??DataTable21_1
       4  ??DataTable21_10
       4  ??DataTable21_11
       4  ??DataTable21_12
       4  ??DataTable21_13
       4  ??DataTable21_14
       4  ??DataTable21_15
       4  ??DataTable21_16
       4  ??DataTable21_2
       4  ??DataTable21_3
       4  ??DataTable21_4
       4  ??DataTable21_5
       4  ??DataTable21_6
       4  ??DataTable21_7
       4  ??DataTable21_8
       4  ??DataTable21_9
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       2  AudiCanBus_FetchCmdTask
      48  AudiCanBus_SendControlCmd
      72  AudiCan_FetchCmd
       6  AudiCan_FetchStallsInfo
       6  AudiCan_FetchStallsInfo_Q3
     324  Audi_CanBus_InputSource_data_analytic
       6  Audi_CanBus_work_data_analytic
     100  BENCI_keyTab
     848  BMW_AuxContrl_Task
     768  BMW_KnobContrl
     686  BMW_OptionKey_Task
     262  Benci_newC_CanBus_Config
     164  Benci_newC_CanBus_FetchCmdTask
      38  Benci_newC_CanBus_FetchSteerAngleInfo
       6  Benci_newC_CanBus_FetchSteerKeyInfo_Type1
     824  Benci_newC_CanBus_FetchSteerKeyInfo_Type2
     926  Benci_newC_CanBus_mid_control_key2_fun
       6  Benci_newC_CanBus_mid_control_key_fun
    1472  Benci_newC_CanBus_work_data_analytic
     172  Benci_newC_Can_FetchStallsInfo
       6  Benci_newC_Power_On
       6  CAN1_USER_HANDLER
     136  CAN2_USER_HANDLER
       4  CAN_turner
     462  Can_FetchSteerKeyInfo_Type1
      76  Can_FetchSteerKeyInfo_Type2
     142  Can_FetchSteerKeyInfo_Type3
    1510  Can_FetchSteerKeyInfo_Type4
      16  Can_Tx
      20  FrontCntrTab
     640  KnobCntrTab
     100  KnobCntrTab2
     148  LF_BENCI_KEY_SEND_FUN
      38  LF_BENCI_SEND_FUN
       6  LF_CANBus_Knob_Task
      28  LF_CANBus_Stalls_Task
       8  LF_CanBus_Config
       2  LF_CanBus_Contrl_Task
      56  LF_CanBus_FetchCmd
       8  LF_CanBus_FetchCmdTask
      62  LF_CanBus_InitVar
      28  LF_CanBus_PowerOn
      36  LF_CanBus_SendControlCmd
      28  LF_CanBus_SteerKey_Task
      28  LF_CanBus_work_data_analytic
     132  LF_FrontContrl
       8  Sys_CAN_light
       1  can_door_last_statu
       8  can_touch_buff
       1  door_index
       4  door_show_buff
       1  m_AUDI_CAN_PowerOn
     116  m_BMW_CAN
      16  m_CarDoorInfo
      16  m_CarDoorInfo_last
       8  m_CarMilesInfo
       4  m_CarSpeedInfo
      12  m_RADAR
       2  m_RADAR_last_buff
       1  uCKeepFlag
       1  uCKeepFlag
       1  uCKeepFlag
       1  uCKeepFlag
       1  uPreAction
       1  uPreAirStatus
       1  uPreMediaStatus
       1  uPrePreAirStatus
       1  uPrePreMediaStatus
       1  uPreVal
       1  uRetKeepFlag
       1  uRetKeepFlag
       1  uRetKeepFlag
       1  uRetKeepFlag
       1  uTxtIndex
      32  uTxtInfoBuf
       2  wBounceCnt
       2  wBounceCnt
       2  wBounceCnt
       2  wBounceCnt

 
   256 bytes in section .bss
   860 bytes in section .rodata
 9 790 bytes in section .text
 
 9 790 bytes of CODE  memory
   860 bytes of CONST memory
   256 bytes of DATA  memory

Errors: none
Warnings: 6
