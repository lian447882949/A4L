###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     10/Jul/2015  15:43:40 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\code\T102\STM32_TZ_T102\Project\TW8836\tw8823_SPI.c   #
#    Command line =  F:\code\T102\STM32_TZ_T102\Project\TW8836\tw8823_SPI.c   #
#                    -D USE_STDPERIPH_DRIVER -D USE_STM32100B_EVAL -D         #
#                    STM32F10X_CL -lc F:\code\T102\STM32_TZ_T102\Project\STM3 #
#                    2F10x_StdPeriph_Template\EWARM\Debug\List\ -lA           #
#                    F:\code\T102\STM32_TZ_T102\Project\STM32F10x_StdPeriph_T #
#                    emplate\EWARM\Debug\List\ -o                             #
#                    F:\code\T102\STM32_TZ_T102\Project\STM32F10x_StdPeriph_T #
#                    emplate\EWARM\Debug\Obj\ --no_cse --no_unroll            #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I F:\code\T102\STM32_TZ_T102\Project\STM32F10x_Std #
#                    Periph_Template\EWARM\ -I F:\code\T102\STM32_TZ_T102\Pro #
#                    ject\STM32F10x_StdPeriph_Template\EWARM\..\ -I           #
#                    F:\code\T102\STM32_TZ_T102\Project\STM32F10x_StdPeriph_T #
#                    emplate\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph_Dri #
#                    ver\inc\ -I F:\code\T102\STM32_TZ_T102\Project\STM32F10x #
#                    _StdPeriph_Template\EWARM\..\..\..\Libraries\STM32F10x_S #
#                    tdPeriph_Driver\src\ -I F:\code\T102\STM32_TZ_T102\Proje #
#                    ct\STM32F10x_StdPeriph_Template\EWARM\..\..\..\Project/C #
#                    ommon\ -I F:\code\T102\STM32_TZ_T102\Project\STM32F10x_S #
#                    tdPeriph_Template\EWARM\..\..\..\Project/TW8836\ -I      #
#                    F:\code\T102\STM32_TZ_T102\Project\STM32F10x_StdPeriph_T #
#                    emplate\EWARM\..\..\..\Libraries\CMSIS\CM3\DeviceSupport #
#                    \ST\STM32F10x\ -Ol -I "C:\Program Files\IAR              #
#                    Systems\Embedded Workbench 6.0\arm\CMSIS\Include\"       #
#    List file    =  F:\code\T102\STM32_TZ_T102\Project\STM32F10x_StdPeriph_T #
#                    emplate\EWARM\Debug\List\tw8823_SPI.lst                  #
#    Object file  =  F:\code\T102\STM32_TZ_T102\Project\STM32F10x_StdPeriph_T #
#                    emplate\EWARM\Debug\Obj\tw8823_SPI.o                     #
#                                                                             #
#                                                                             #
###############################################################################

F:\code\T102\STM32_TZ_T102\Project\TW8836\tw8823_SPI.c
      1          #define _SPI_C_
      2          
      3          
      4          #include "i2c_driver.h"
      5          #include "tw8823_spi.h"
      6          #include "libr.h"
      7          
      8          
      9          //----------------- SPI Mode Definition ---------------------
     10          /*
     11          #if		( SPI_READ_MODE == SPI_READ_SLOW )
     12          
     13          	#define DMAMODE_READ_FIX		0xe4
     14          	#define DMAMODE_READ_INC 		0xc4
     15          	#define DMAMODE_WRITE_FIX		0xe4
     16          	#define DMAMODE_WRITE_INC		0xc4
     17          
     18          	#define SPICMD_READ				0x03
     19          	#define SPICMD_PROGRAM			0x02
     20          
     21          
     22          #elif	( SPI_READ_MODE == SPI_READ_QUADIO )
     23          
     24          	#define DMAMODE_READ_FIX		0xe7
     25          	#define DMAMODE_READ_INC 		0xc7
     26          	#define DMAMODE_WRITE_FIX		0xe7
     27          	#define DMAMODE_WRITE_INC		0xc7
     28          
     29          	#define SPICMD_READ				0xeb
     30          	#define SPICMD_PROGRAM			0x02
     31          
     32          #elif	( SPI_READ_MODE == SPI_READ_DUALIO )
     33          
     34          #endif
     35          */
     36          
     37          BYTE DMAMODE_RW_FIX_REG = 0xe4;
     38          BYTE DMAMODE_RW_INC_REG = 0xc4;
     39          BYTE DMAMODE_RW_XDATA   = 0x84;
     40          
     41          BYTE SPICMD_READ        = 0x03;
     42          BYTE SPICMD_PROGRAM     = 0x02;
     43          
     44          //XDATA 	BYTE SPI_Buffer[128]	_at_	0;
     45          //=============================================================================
     46          //
     47          //=============================================================================
     48          BYTE SPI_SetModeByRegister( void )
     49          {
     50          	BYTE mod;
     51          
     52          	WriteTW88( 0xff, SPI_PAGE );
     53          	mod = ReadTW88( 0x00 ) & 0x07;
     54          
     55          	switch( mod ) {
     56          		case 0:	//--- Slow
     57          			DMAMODE_RW_FIX_REG = 0xe4;
     58          			DMAMODE_RW_INC_REG = 0xc4;
     59          			DMAMODE_RW_XDATA   = 0x84;
     60          			SPICMD_READ        = 0x03;
     61          			SPICMD_PROGRAM     = 0x02;
     62          			break;
     63          
     64          		case 1:	//--- Fast
     65          			DMAMODE_RW_FIX_REG = 0xe5;
     66          			DMAMODE_RW_INC_REG = 0xc5;
     67          			DMAMODE_RW_XDATA   = 0x85;
     68          			SPICMD_READ        = 0x0b;
     69          			SPICMD_PROGRAM     = 0x02;
     70          			break;
     71          
     72          		case 2:	//--- Dual
     73          			DMAMODE_RW_FIX_REG = 0xe5;
     74          			DMAMODE_RW_INC_REG = 0xc5;
     75          			DMAMODE_RW_XDATA   = 0x85;
     76          			SPICMD_READ        = 0x3b;
     77          			SPICMD_PROGRAM     = 0x02;
     78          			break;
     79          
     80          		case 3:	//--- Quad
     81          			DMAMODE_RW_FIX_REG = 0xe5;
     82          			DMAMODE_RW_INC_REG = 0xc5;
     83          			DMAMODE_RW_XDATA   = 0x85;
     84          			SPICMD_READ        = 0x6b;
     85          			SPICMD_PROGRAM     = 0x02;
     86          			break;
     87          
     88          		case 4:	//--- Dual-IO
     89          			DMAMODE_RW_FIX_REG = 0xe5;
     90          			DMAMODE_RW_INC_REG = 0xc5;
     91          			DMAMODE_RW_XDATA   = 0x85;
     92          			SPICMD_READ        = 0xbb;
     93          			SPICMD_PROGRAM     = 0x02;
     94          			break;
     95          
     96          		case 5:	//--- Quad-IO
     97          			DMAMODE_RW_FIX_REG = 0xe7;
     98          			DMAMODE_RW_INC_REG = 0xc7;
     99          			DMAMODE_RW_XDATA   = 0x87;
    100          			SPICMD_READ        = 0xeb;
    101          			SPICMD_PROGRAM     = 0x02;
    102          			break;
    103           	}
    104          	return mod;
    105          }
    106          
    107          void TW8823_SPI_Init(void)
    108          {
    109          //	BYTE dat;
    110          
    111          	WriteTW88( 0xff, SPI_PAGE );
    112          	//Printf("\n\r Enter SPI Turbo1\n");
    113          	WriteTW88( 0x00, SPI_READ_MODE );			// SPI Mode:	0=Slow, 1=fast, 2=dual, 3=quad, 4=dual-io, 5=quad-io
    114          
    115          	WriteTW88( 0x01, 0x06 );					// MCU Clock:	27MHz
    116          	WriteTW88( 0x02, 0x06 );					// SPI Clock:	27MHz
    117          	
    118          	//	Printf("\n\r Enter SPI Turbo1\n");
    119          
    120          
    121          //	dat = ReadTW88( 0x20 ) | 0x2c;				//----- Enable OSD-DMA, Cache
    122          //	WriteTW88( 0x20, dat );
    123          
    124          	SPI_SetModeByRegister();					// Match DMA mode with SPI-read
    125          
    126          }
    127          
    128          
    129          void SPI_TurboInit(void)
    130          {
    131          	unsigned int i = 0;
    132          	Byte dat;
    133          	
    134          	WriteTW88( 0xff, SPI_PAGE );
    135          	//Printf("\n\r Enter SPI Turbo\n");
    136          	while(i < 25000)
    137          	{
    138          		i++;
    139          	}
    140          	WriteTW88( 0x00,SPI_READ_DUAL);//SPI_READ_QUADIO );			// SPI Mode:	0=Slow, 1=fast, 2=dual, 3=quad, 4=dual-io, 5=quad-io
    141          	//Printf("\n\r Enter SPI Turbo1\n");
    142          	WriteTW88( 0x01, 0x00 );					// change PLL divider as 108MHz  skz
    143          	WriteTW88( 0x01, 0x20 );					// change MCU clock : Xtal -> PLL div  skz
    144          	//WriteTW88( 0x01, 0x00 );
    145          	//WriteTW88( 0x01, 0x20 );               //Change MCU clock to 108MHz
    146          	//delay(10);
    147          	Delay_1ms(10);
    148          	WriteTW88( 0x02, 0x02 );			  // change PLL divider as 54MHz
    149          	WriteTW88( 0x02, 0x22 );
    150          	//WriteTW88( 0x02, 0x00 );				  // change PLL divider as 43MHz
    151          	//WriteTW88( 0x02, 0x20 );
    152          	
    153          	// change SPI Clock: Xtal -> PLL div
    154          	//WriteTW88( 0x00, SPI_READ_QUADIO );			// SPI Mode:	0=Slow, 1=fast, 2=dual, 3=quad, 4=dual-io, 5=quad-io
    155          	SPI_SetModeByRegister();					// Match DMA mode with SPI-read
    156          	dat = ReadTW88( 0x20 ) | 0x28;				//----- Enable OSD-DMA, Cache
    157          	WriteTW88( 0x20, dat );
    158          }
    159          
    160          //=============================================================================
    161          //
    162          //=============================================================================
    163          //=============================================================================
    164          //
    165          //=============================================================================
    166          void SPI_QUADInit(void)
    167          {
    168          	BYTE	temp;
    169          	unsigned int i = 0;
    170          	Byte dat;
    171          	
    172          	WriteTW88( 0xff, SPI_PAGE );
    173          
    174          	WriteTW88( 0x03, 0x41 );					// mode, cmd-len 1
    175          	WriteTW88( 0x0a, 0x9f );					// cmd, read Jedec ID
    176          
    177          	WriteTW88( 0x1a, 0 );
    178          	WriteTW88( 0x08, 0 );
    179          	WriteTW88( 0x09, 3 );						// read buffer size 3
    180          	WriteTW88( 0x04, 0x01 );					// start
    181          	while(i < 25000)
    182          	{
    183          		i++;
    184          	}
    185          	temp = ReadTW88(0x10);
    186          	//Printf("\nSPI JEDEC ID: %02bx %02bx %02bx", temp, ReadTW88(0x11), ReadTW88(0x12) );
    187          	if ( temp == 0xC2 ) {						// for MX
    188          		WriteTW88( 0x03, 0x41 );					// mode, cmd-len 1
    189          		WriteTW88( 0x0a, 0x05 );					// cmd, read Status
    190          		WriteTW88( 0x09, 1 );						// read buffer size 1
    191          		WriteTW88( 0x04, 0x01 );					// start
    192          		i = 0;
    193          		while(i < 25000)
    194          		{
    195          			i++;
    196          		}
    197          		temp = ReadTW88( 0x10 );					// read status regisiter value
    198          		if ( temp == 0 ) {
    199          			//Puts("\nEnable MX quad mode" );
    200          			WriteTW88( 0x03, 0x41 );					// mode, cmd-len 1
    201          			WriteTW88( 0x0a, 0x06 );					// cmd, write enable
    202          			WriteTW88( 0x09, 0 );						// read buffer size 1
    203          			WriteTW88( 0x04, 0x03 );					// start
    204          
    205          			//Puts("\nWrite ENABLED" );
    206          
    207          			WriteTW88( 0x03, 0x41 );					// mode, cmd-len 1
    208          			WriteTW88( 0x0a, 0x05 );					// cmd, read Status
    209          			WriteTW88( 0x09, 1 );						// read buffer size 1
    210          			WriteTW88( 0x04, 0x01 );					// start
    211          			i = 0;
    212          			while(i < 25000)
    213          			{
    214          				i++;
    215          			}
    216          			temp = ReadTW88( 0x10 );					// read status regisiter value
    217          			//Printf("\nStatus after Write enable %02bx", temp );
    218          
    219          			WriteTW88( 0x03, 0x42 );					// mode, cmd-len 2
    220          			WriteTW88( 0x0a, 0x01 );					// cmd, write Status
    221          			WriteTW88( 0x0b, 0x40 );					// cmd, en QAUD mode
    222          			WriteTW88( 0x09, 0 );						// read buffer size 1
    223          			WriteTW88( 0x04, 0x07 );					// start + write + busycheck
    224          
    225          			//Puts("\nQUAD ENABLED" );
    226          
    227          			WriteTW88( 0x03, 0x41 );					// mode, cmd-len 1
    228          			WriteTW88( 0x0a, 0x05 );					// cmd, read Status
    229          			WriteTW88( 0x09, 1 );						// read buffer size 1
    230          			WriteTW88( 0x04, 0x01 );					// start
    231          			i = 0;
    232          			while(i < 25000)
    233          			{
    234          				i++;
    235          			}
    236          			temp = ReadTW88( 0x10 );					// read status regisiter value
    237          			//Printf("\nStatus after QUAD enable %02bx", temp );
    238          
    239          			WriteTW88( 0x03, 0x41 );					// mode, cmd-len 1
    240          			WriteTW88( 0x0a, 0x06 );					// cmd, write disable
    241          			WriteTW88( 0x04, 0x01 );					// start
    242          		}
    243          	}
    244          	else if ( temp == 0xEF ) {				// for WB
    245          		WriteTW88( 0x03, 0x41 );					// mode, cmd-len 1
    246          		WriteTW88( 0x0a, 0x05 );					// cmd, read Status
    247          		WriteTW88( 0x09, 2 );						// read buffer size 1
    248          		WriteTW88( 0x04, 0x01 );					// start
    249          		i = 0;
    250          		while(i < 25000)
    251          		{
    252          			i++;
    253          		}
    254          		temp = ReadTW88( 0x11 );					// read status regisiter value
    255          		if ( temp == 0 ) {
    256          			//Puts("\nEnable WB quad mode" );
    257          			WriteTW88( 0x03, 0x41 );					// mode, cmd-len 1
    258          			WriteTW88( 0x0a, 0x06 );					// cmd, write enable
    259          			WriteTW88( 0x04, 0x01 );					// start
    260          
    261          			WriteTW88( 0x03, 0x43 );					// mode, cmd-len 1
    262          			WriteTW88( 0x0a, 0x01 );					// cmd, write Status
    263          			WriteTW88( 0x0b, 0x00 );					// cmd, en QAUD mode
    264          			WriteTW88( 0x0c, 0x02 );					// cmd, en QAUD mode
    265          			WriteTW88( 0x04, 0x01 );					// start
    266          		}
    267          	}
    268          	if ( temp == 0x01 ) {                                          //for Spansion..paul20100729
    269            	WriteTW88( 0x03, 0x41 );                                       // mode, cmd-len 1
    270            	WriteTW88( 0x0a, 0x05 );                                       // cmd, read Status
    271            	WriteTW88( 0x09, 1 );                                          // read buffer size 1
    272            	WriteTW88( 0x04, 0x01 );                                       // start
    273          	i = 0;
    274          	while(i < 25000)
    275          	{
    276          		i++;
    277          	}
    278            	temp = ReadTW88( 0x10 );                                             // read status regisiter value
    279          
    280            	if ( temp == 0 ) {
    281          
    282          
    283          		WriteTW88( 0x03, 0x41 );                                       // mode, cmd-len 1
    284            		WriteTW88( 0x0a, 0x06 );                                       // cmd, write disable
    285          		WriteTW88( 0x08, 0 );                                       // cmd, write disable
    286          		WriteTW88( 0x09, 0 );                                       // cmd, write disable
    287          		WriteTW88( 0x1a, 0 );                                       // cmd, write disable
    288            		WriteTW88( 0x04, 0x03 );                                       // start
    289            		
    290            		WriteTW88( 0x03, 0x43 );                                       // mode, cmd-len 2
    291            		WriteTW88( 0x0a, 0x01 );                                       // cmd, write Status
    292            		WriteTW88( 0x0b, 0x02 );                                       //cmd,write enable   ..paul20100729
    293            		WriteTW88( 0x0c, 0x02 );                                       // cmd, en QUAD mode.. paul20100729
    294            		WriteTW88( 0x09, 0 );                                          // read buffer size 1
    295            		WriteTW88( 0x04, 0x07 );                                       // start + write + busycheck
    296            		
    297            		//Puts("\nQUAD ENABLED" );
    298            		
    299            		WriteTW88( 0x03, 0x41 );                                       // mode, cmd-len 1
    300            		WriteTW88( 0x0a, 0x35 );                                       // cmd, read Status
    301            		WriteTW88( 0x09, 1 );                                          // read buffer size 1
    302            		WriteTW88( 0x04, 0x01 );                                       // start
    303          		i = 0;
    304          		while(i < 25000)
    305          		{
    306          			i++;
    307          		}
    308            		temp = ReadTW88( 0x10 );                                       // read status regisiter value
    309          
    310            		
    311            		WriteTW88( 0x03, 0x41 );                                       // mode, cmd-len 1
    312            		WriteTW88( 0x0a, 0x06 );                                       // cmd, write disable
    313          		i = 0;
    314          		#if 1
    315          		while(i < 25000)
    316          		{
    317          			i++;
    318          		}
    319          		i = 0;
    320          		while(i < 25000)
    321          		{
    322          			i++;
    323          		}
    324          		i = 0;
    325          		while(i < 25000)
    326          		{
    327          			i++;
    328          		}
    329          		i = 0;
    330          		while(i < 25000)
    331          		{
    332          			i++;
    333          		}
    334          		i = 0;
    335          		while(i < 25000)
    336          		{
    337          			i++;
    338          		}
    339          		i = 0;
    340          		while(i < 25000)
    341          		{
    342          			i++;
    343          		}
    344          		i = 0;
    345          		while(i < 25000)
    346          		{
    347          			i++;
    348          		}
    349          		i = 0;
    350          		while(i < 25000)
    351          		{
    352          			i++;
    353          		}
    354          		i = 0;
    355          		while(i < 25000)
    356          		{
    357          			i++;
    358          		}
    359          		i = 0;
    360          		while(i < 25000)
    361          		{
    362          			i++;
    363          		}
    364          		#endif
    365            		WriteTW88( 0x04, 0x01 );                                       // start
    366          		#if 1
    367          		while(i < 25000)
    368          		{
    369          			i++;
    370          		}
    371          		i = 0;
    372          		while(i < 25000)
    373          		{
    374          			i++;
    375          		}
    376          		i = 0;
    377          		while(i < 25000)
    378          		{
    379          			i++;
    380          		}
    381          		#endif
    382            	}
    383          	SPI_SetModeByRegister();					// Match DMA mode with SPI-read
    384          	dat = ReadTW88( 0x20 ) | 0x28;				//----- Enable OSD-DMA, Cache
    385          	WriteTW88( 0x20, dat );
    386          	
    387              }
    388          
    389          }
    390          
    391          void DelayPaReady(void)
    392          {
    393          	unsigned char regvalue = 0,regvalue1 = 0;
    394          	unsigned int countreg = 0;
    395          	
    396          	countreg = 0;
    397          	while(countreg < 1000)
    398          	{
    399          		WriteTW88(0xff,0x01);
    400          		regvalue = ReadTW88(0xff);
    401          		
    402          		WriteTW88(0xff,0x0f);
    403          		regvalue1 = ReadTW88(0xff);
    404          		
    405          		if(regvalue == 0x01 && regvalue1 == 0x0f) break;
    406          		countreg++;
    407          	}
    408          }
    409          //=============================================================================
    410          //		SPI DMA (SPI --> Fixed Register)
    411          //=============================================================================
    412          void SPI_ReadData2Reg( DWORD spiaddr, WORD index, DWORD cnt )
    413          {
    414          	WriteTW88( 0xff, SPI_PAGE );				// Set Page=5
    415          
    416          	WriteTW88( 0x03, DMAMODE_RW_FIX_REG);		// Mode = SPI -> fixed register
    417          	WriteTW88( 0x0a, SPICMD_READ );				// Read Command
    418          	WriteTW88( 0x0b, H2BYTE(spiaddr));				// SPI address
    419          	WriteTW88( 0x0c, HIBYTE(spiaddr) );				// SPI address
    420          	WriteTW88( 0x0d, LOBYTE(spiaddr) );					// SPI address
    421          	WriteTW88( 0x06, HIBYTE(index) );				// Buffer address
    422          	WriteTW88( 0x07, LOBYTE(index));					// Buffer address
    423          	WriteTW88( 0x1a, H2BYTE(cnt));					// Read count
    424          	WriteTW88( 0x08, HIBYTE(cnt));					// Read count
    425          	WriteTW88( 0x09, LOBYTE(cnt));						// Read count
    426          
    427          	WriteTW88( 0x04, 0x01 );					// DMA-Read start
    428          	DelayPaReady();
    429          	//REGVlaF0a = ReadPn(0xf0a);	
    430          }
    431          //=============================================================================
    432          //		SPI DMA (SPI --> Incremental Register)
    433          //=============================================================================
    434          
    435          void SPI_ReadData2RegInc( DWORD spiaddr, WORD index, DWORD cnt )
    436          {
    437          	WriteTW88( 0xff, SPI_PAGE );				// Set Page=5
    438          
    439          	WriteTW88( 0x03, DMAMODE_RW_INC_REG );		// Mode = SPI -> incremental register
    440          	WriteTW88( 0x0a, SPICMD_READ );				// Read Command
    441          	WriteTW88( 0x0b, spiaddr>>16 );				// SPI address
    442          	WriteTW88( 0x0c, spiaddr>>8 );				// SPI address
    443          	WriteTW88( 0x0d, spiaddr );					// SPI address
    444           	WriteTW88( 0x06, index>>8 );				// Buffer address
    445          	WriteTW88( 0x07, index );					// Buffer address
    446          	WriteTW88( 0x1a, cnt>>16 );					// Read count
    447           	WriteTW88( 0x08, cnt>>8 );					// Read count
    448          	WriteTW88( 0x09, cnt );						// Read count
    449          
    450          	WriteTW88( 0x04, 0x01 );					// DMA-Read start
    451          	DelayPaReady();
    452          }
    453          
    454          //=============================================================================
    455          //		SPI DMA (SPI --> Incremental XDATA)
    456          //=============================================================================
    457          void SPI_ReadData2xdata( DWORD spiaddr, BYTE *ptr, DWORD cnt )
    458          {
    459          	WORD xaddr = (WORD)ptr;
    460          
    461          	WriteTW88( 0xff, SPI_PAGE );				// Set Page=5
    462          
    463          	WriteTW88( 0x03, DMAMODE_RW_XDATA );		// Mode = SPI -> incremental xdata
    464          	WriteTW88( 0x0a, SPICMD_READ );				// Read Command
    465          	WriteTW88( 0x0b, spiaddr>>16 );				// SPI address
    466          	WriteTW88( 0x0c, spiaddr>>8 );				// SPI address
    467          	WriteTW88( 0x0d, spiaddr );					// SPI address
    468           	WriteTW88( 0x06, xaddr>>8 );				// Buffer address
    469          	WriteTW88( 0x07, xaddr );					// Buffer address
    470          	WriteTW88( 0x1a, cnt>>16 );					// Read count
    471           	WriteTW88( 0x08, cnt>>8 );					// Read count
    472          	WriteTW88( 0x09, cnt );						// Read count
    473          
    474          	WriteTW88( 0x04, 0x01 );					// DMA-Read start
    475          }
    476          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  DelayPaReady
             16 -> ReadTW88
             16 -> WriteTW88
       16  SPI_QUADInit
             16 -> ReadTW88
             16 -> SPI_SetModeByRegister
             16 -> WriteTW88
       16  SPI_ReadData2Reg
             16 -> DelayPaReady
             16 -> WriteTW88
       16  SPI_ReadData2RegInc
             16 -> DelayPaReady
             16 -> WriteTW88
       16  SPI_ReadData2xdata
             16 -> WriteTW88
        8  SPI_SetModeByRegister
              8 -> ReadTW88
              8 -> WriteTW88
        8  SPI_TurboInit
              8 -> Delay_1ms
              8 -> ReadTW88
              8 -> SPI_SetModeByRegister
              8 -> WriteTW88
        8  TW8823_SPI_Init
              8 -> SPI_SetModeByRegister
              8 -> WriteTW88


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       1  DMAMODE_RW_FIX_REG
       1  DMAMODE_RW_INC_REG
       1  DMAMODE_RW_XDATA
      68  DelayPaReady
       1  SPICMD_PROGRAM
       1  SPICMD_READ
     934  SPI_QUADInit
     130  SPI_ReadData2Reg
     130  SPI_ReadData2RegInc
     126  SPI_ReadData2xdata
     298  SPI_SetModeByRegister
      94  SPI_TurboInit
      40  TW8823_SPI_Init

 
     5 bytes in section .data
 1 840 bytes in section .text
 
 1 840 bytes of CODE memory
     5 bytes of DATA memory

Errors: none
Warnings: none
