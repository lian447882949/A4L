###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Jun/2016  13:18:53 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\Common\touch.c                       #
#    Command line =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\Common\touch.c -D                    #
#                    USE_STDPERIPH_DRIVER -D USE_STM32100B_EVAL -D            #
#                    STM32F10X_CL -lc F:\软件工程\平台正式代码001\Benze_MainB #
#                    oard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph #
#                    _Template\EWARM\Debug\List\ -lA                          #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\ -o F:\软件工程\平台正式代码001\Benze_MainBoar #
#                    d\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Te #
#                    mplate\EWARM\Debug\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I F:\软件工程\平台正式代码001\Benze_MainBoard\ba #
#                    oma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Templa #
#                    te\EWARM\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\ -I F:\软件工程\平台正式代码001\Benze_Mai #
#                    nBoard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeri #
#                    ph_Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph #
#                    _Driver\inc\ -I F:\软件工程\平台正式代码001\Benze_MainBo #
#                    ard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_ #
#                    Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph_Dr #
#                    iver\src\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\..\..\Project/Common\ -I                  #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/TW8836\ -I F:\软件工程\平台正式代码001\B #
#                    enze_MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x #
#                    _StdPeriph_Template\EWARM\..\..\..\Project/CAN\ -I       #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/FM\ -I F:\软件工程\平台正式代码001\Benze #
#                    _MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x_Std #
#                    Periph_Template\EWARM\..\..\..\Project/ARM\ -I           #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\  #
#                    -On -I "C:\Program Files\IAR Systems\Embedded Workbench  #
#                    6.0_2\arm\CMSIS\Include\"                                #
#    List file    =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\touch.lst                                      #
#    Object file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\Obj\touch.o                                         #
#                                                                             #
#                                                                             #
###############################################################################

F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\benci_newC_V45\Project\Common\touch.c
      1          /*
      2          this file is to define the functions using uart port
      3          
      4          by Miller.Tao
      5          date :20150730
      6          
      7          */
      8          #define _TOUCH_C_
      9          #include "includes.h"
     10          
     11          
     12          
     13          #if 1//touch
     14          void touch_i2cSetSCL(BYTE is_hl)
     15          {
     16          if(is_hl)
     17          	GPIO_SetBits(CTOUCH_SCL_PORT,CTOUCH_SCL_PIN);
     18          else
     19          	GPIO_ResetBits(CTOUCH_SCL_PORT,CTOUCH_SCL_PIN);
     20          }
     21          
     22          void touch_i2cSetSDA(BYTE is_hl)
     23          {
     24          	if(is_hl)
     25          		GPIO_SetBits(CTOUCH_SDA_PORT,CTOUCH_SDA_PIN);
     26          	else
     27          		GPIO_ResetBits(CTOUCH_SDA_PORT,CTOUCH_SDA_PIN);
     28          }
     29          
     30          
     31           void touch_i2cSetSCL_Chk(BYTE bSet)
     32          {
     33              WORD ucDummy; // loop dummy
     34              touch_i2cSetSCL(bSet); // set SCL pin
     35              if (bSet == _HIGH)
     36                  // if set pin high
     37              {
     38                  ucDummy = I2C_CHECK_PIN_DUMMY; // initialize dummy
     39                  while ((!touch_i2cSCL_PIN_STATUS()) && (ucDummy--))
     40                      ;
     41                  // check SCL pull high
     42              }
     43          }
     44          
     45          /////////////////////////////////////////
     46          // Set I2C SDA pin high/low
     47          //
     48          // Arguments: bSet - high/low bit
     49          /////////////////////////////////////////
     50           void touch_i2cSetSDA_Chk(BYTE bSet)
     51          {
     52              WORD ucDummy; // loop dummy
     53              touch_i2cSetSDA(bSet); // set SDA pin
     54              if (bSet == _HIGH)
     55                  // if set pin high
     56              {
     57                  ucDummy = I2C_CHECK_PIN_DUMMY; // initialize dummy
     58                  while ((!touch_i2cSDA_PIN_STATUS()) && (ucDummy--))
     59                      ;
     60                  // check SDA pull high
     61              }
     62          }
     63          
     64          //////////////////////////////////////////////////////////////
     65          // Delay 4us
     66          //////////////////////////////////////////////////////////////
     67           void touch_i2c_Delay(void)
     68          {
     69              u32 i = 50;//,k=0;
     70          	//for(;k<10;k++)
     71              while (i--) {}
     72          }
     73          
     74          //////////////////////////////////////////////////////
     75          // I2C start signal.
     76          // <comment>
     77          //  SCL ________
     78          //              \_________
     79          //  SDA _____
     80          //           \____________
     81          //
     82          // Return value: None
     83          //////////////////////////////////////////////////////
     84          bool touch_i2c_Start(void)
     85          {
     86              bool bStatus = TRUE; // success status
     87              touch_i2cSetSDA_Chk(_HIGH);
     88              touch_i2c_Delay();
     89              touch_i2cSetSCL_Chk(_HIGH);
     90              touch_i2c_Delay();
     91              if ((touch_i2cSCL_PIN_STATUS() == _LOW) || (touch_i2cSDA_PIN_STATUS() == _LOW))
     92              {
     93                  bStatus = FALSE;
     94              }
     95              else
     96              {
     97                  touch_i2cSetSDA(_LOW);
     98                  touch_i2c_Delay();
     99                  touch_i2cSetSCL(_LOW);
    100              }
    101              return bStatus;
    102          }
    103          
    104          /////////////////////////////////////////
    105          // I2C stop signal.
    106          // <comment>
    107          //              ____________
    108          //  SCL _______/
    109          //                 _________
    110          //  SDA __________/
    111          /////////////////////////////////////////
    112          void touch_i2c_Stop(void)
    113          {
    114              touch_i2cSetSCL(_LOW);
    115              touch_i2c_Delay();
    116              touch_i2cSetSDA(_LOW);
    117              touch_i2c_Delay();
    118              touch_i2cSetSCL(_HIGH);
    119              touch_i2c_Delay();
    120              touch_i2cSetSDA(_HIGH);
    121              touch_i2c_Delay();
    122          }
    123          
    124          //////////////////////////////////////////////////////////////////////////
    125          // I2C send byte to device.
    126          //
    127          // Arguments: ucVal - send byte
    128          // Return value: I2C acknowledge bit
    129          //               I2C_ACKNOWLEDGE/I2C_NON_ACKNOWLEDGE
    130          //////////////////////////////////////////////////////////////////////////
    131          BYTE touch_i2c_SendByte(BYTE ucVal)
    132          {
    133              BYTE ucMask = 0x80;
    134              BYTE bAck; // acknowledge bit
    135          		//	SET_SDA_OUT();
    136              while (ucMask)
    137              {
    138                  if (ucVal & ucMask)
    139                  {
    140                      touch_i2cSetSDA_Chk(_HIGH);
    141                  }
    142                  else
    143                  {
    144                      touch_i2cSetSDA_Chk(_LOW);
    145                  }
    146                  touch_i2c_Delay();
    147                  touch_i2cSetSCL_Chk(_HIGH); // clock
    148                  touch_i2c_Delay();
    149                  touch_i2cSetSCL(_LOW);
    150                  touch_i2c_Delay();
    151                  ucMask >>= 1; // next
    152              } // while
    153              // recieve acknowledge
    154              touch_i2cSetSDA(_HIGH);
    155              touch_i2c_Delay();
    156              touch_i2cSetSCL(_HIGH);
    157              touch_i2c_Delay();
    158          	//touch_SET_SDA_IN();
    159              if (touch_i2cSDA_PIN_STATUS())
    160              {
    161                  bAck = _HIGH;
    162              }
    163              //no ack
    164              else
    165              {
    166                  bAck = _LOW;
    167              }
    168              // recieve acknowlege
    169              touch_i2cSetSCL(_LOW);
    170          	//touch_SET_SDA_OUT();
    171          		touch_i2c_Delay();
    172              return (bAck);
    173          }
    174          
    175          //////////////////////////////////////////////////////////////////////////
    176          // I2C receive byte from device.
    177          //
    178          // Return value: receive byte
    179          //////////////////////////////////////////////////////////////////////////
    180          BYTE touch_i2c_ReceiveByte(bool bAck)
    181          {
    182              BYTE ucReceive = 0;
    183              BYTE ucMask = 0x80;
    184              while (ucMask)
    185              {
    186          		//touch_SET_SDA_OUT();
    187                  touch_i2cSetSDA(_HIGH);
    188          		  touch_i2c_Delay();
    189                  touch_i2cSetSCL(_HIGH);
    190          		//i2c_Delay();
    191          		//touch_SET_SDA_IN();
    192                  if (touch_i2cSDA_PIN_STATUS())// == _HIGH)
    193                  {
    194                      ucReceive |= ucMask;
    195                  }
    196                  touch_i2cSetSCL(_LOW);
    197                  touch_i2c_Delay();
    198                  ucMask >>= 1;
    199              } // while
    200          
    201              if (bAck)
    202                  // acknowledge
    203              {
    204                  touch_i2cSetSDA_Chk(I2C_ACKNOWLEDGE);
    205              }
    206              else
    207                  // non-acknowledge
    208              {
    209                  touch_i2cSetSDA_Chk(I2C_NON_ACKNOWLEDGE);
    210              }
    211              touch_i2c_Delay();
    212              touch_i2cSetSCL(_HIGH);
    213              touch_i2c_Delay();
    214              touch_i2cSetSCL(_LOW);
    215              return ucReceive;
    216          }
    217          
    218          //////////////////////////////////////////////////////////////////////////
    219          // I2C access start.
    220          //
    221          // Arguments: ucSlaveAdr - slave address
    222          //            trans_t - I2C_TRANS_WRITE/I2C_TRANS_READ
    223          //////////////////////////////////////////////////////////////////////////
    224          bool touch_i2c_AccessStart(BYTE ucSlaveAdr, I2C_Direction trans_t)
    225          {
    226              WORD ucDummy; // loop dummy
    227              if (trans_t == I2C_READ)
    228                  // check i2c read or write
    229              {
    230                  ucSlaveAdr = I2C_DEVICE_ADR_READ(ucSlaveAdr);
    231          		//i2c_Delay();
    232              }
    233              // read
    234              else
    235              {
    236                  ucSlaveAdr = I2C_DEVICE_ADR_WRITE(ucSlaveAdr);
    237          		touch_i2c_Delay();
    238              }
    239              // write
    240              ucDummy = I2C_ACCESS_DUMMY_TIME;
    241              while (ucDummy--)
    242              {
    243                  touch_i2c_Delay();
    244          		//i2c_Delay();
    245                  if (touch_i2c_Start() == FALSE)
    246                  {
    247                      continue;
    248                  }
    249                  if (touch_i2c_SendByte(ucSlaveAdr) == I2C_ACKNOWLEDGE)
    250                      // check acknowledge
    251                  {
    252                      return TRUE;
    253                  }
    254                  //printf("ucSlaveAdr====%x", ucSlaveAdr);
    255                  touch_i2c_Stop();
    256          		touch_i2c_Delay();
    257          		touch_i2c_Delay();
    258                 // SysDelay(2);
    259              }
    260              return FALSE;
    261          }
    262          
    263          /////////////////////////////////////////////////////////////////
    264          // I2C write bytes to device.
    265          //
    266          // Arguments: ucSlaveAdr - slave address
    267          //            ucSubAdr - sub address
    268          //            pBuf - pointer of buffer
    269          //            ucBufLen - length of buffer
    270          /////////////////////////////////////////////////////////////////
    271          void touch_i2cBurstWriteBytes(BYTE ucSlaveAdr, BYTE ucSubAdr1, BYTE ucSubAdr2, BYTE 
    272          *pBuf, BYTE
    273          
    274                                 ucBufLen)
    275          {
    276              WORD ucDummy; // loop dummy
    277              ucDummy = I2C_ACCESS_DUMMY_TIME;
    278              while (ucDummy--)
    279              {
    280                  if (touch_i2c_AccessStart(ucSlaveAdr, I2C_WRITE) == FALSE)
    281                  {
    282                      continue;
    283                  }
    284                  if (touch_i2c_SendByte(ucSubAdr1) == I2C_NON_ACKNOWLEDGE)
    285                      // check non-acknowledge
    286                  {
    287                      continue;
    288                  }
    289          
    290          		if (touch_i2c_SendByte(ucSubAdr2) == I2C_NON_ACKNOWLEDGE)
    291                      // check non-acknowledge
    292                  {
    293                      continue;
    294                  }
    295                  while (ucBufLen--)
    296                      // loop of writting data
    297                  {
    298                      touch_i2c_SendByte(*pBuf); // send byte
    299                      pBuf++; // next byte pointer
    300                  } // while
    301                  break;
    302              } // while
    303              touch_i2c_Stop();
    304          	
    305          }
    306          
    307          /////////////////////////////////////////////////////////////////
    308          // I2C read bytes from device.
    309          //
    310          // Arguments: ucSlaveAdr - slave address
    311          //            ucSubAdr - sub address
    312          //            pBuf - pointer of buffer
    313          //            ucBufLen - length of buffer
    314          /////////////////////////////////////////////////////////////////
    315          void touch_i2cBurstReadBytes(BYTE ucSlaveAdr, BYTE ucSubAdr1, BYTE ucSubAdr2, BYTE *
    316          pBuf, BYTE
    317          
    318                                 ucBufLen)
    319          {
    320              WORD ucDummy; // loop dummy
    321              ucDummy = I2C_ACCESS_DUMMY_TIME;
    322              while (ucDummy--)
    323              {
    324                  if (touch_i2c_AccessStart(ucSlaveAdr, I2C_WRITE) == FALSE)
    325                  {
    326                      continue;
    327                  }
    328          		if (touch_i2c_SendByte(ucSubAdr1) == I2C_NON_ACKNOWLEDGE)
    329                      // check non-acknowledge
    330                  {
    331                      continue;
    332                  }
    333                
    334          		if (touch_i2c_SendByte(ucSubAdr2) == I2C_NON_ACKNOWLEDGE)
    335                      // check non-acknowledge
    336                  {
    337                      continue;
    338                  }
    339                  if (touch_i2c_AccessStart(ucSlaveAdr, I2C_READ) == FALSE)
    340                  {
    341                      continue;
    342                  }
    343                  while (ucBufLen--)
    344                      // loop to burst read
    345                  {
    346                      if (ucBufLen)
    347                      {
    348                          *pBuf = touch_i2c_ReceiveByte(TRUE);
    349                      }
    350                      // receive byte
    351                      else
    352                      {
    353                          *pBuf = touch_i2c_ReceiveByte(FALSE);
    354                      }
    355                      // receive byte
    356                      pBuf++; // next byte pointer
    357                  } // while
    358                  break;
    359              } // while
    360              touch_i2c_Stop();
    361          }
    362          
    363          /////////////////////////////////////////////////////////////////
    364          // I2C read current bytes from device.
    365          //
    366          // Arguments: ucSlaveAdr - slave address
    367          //            pBuf - pointer of buffer
    368          //            ucBufLen - length of buffer
    369          /////////////////////////////////////////////////////////////////
    370          void touch_i2cBurstCurrentBytes(BYTE ucSlaveAdr, BYTE *pBuf, BYTE ucBufLen)
    371          {
    372              WORD ucDummy; // loop dummy
    373              ucDummy = I2C_ACCESS_DUMMY_TIME;
    374              while (ucDummy--)
    375              {
    376                  if (touch_i2c_AccessStart(ucSlaveAdr, I2C_READ) == FALSE)
    377                  {
    378                      continue;
    379                  }
    380                  while (ucBufLen--)
    381                      // loop to burst read
    382                  {
    383                      if (ucBufLen)
    384                      {
    385                          *pBuf = touch_i2c_ReceiveByte(TRUE);
    386                      }
    387                      // receive byte
    388                      else
    389                      {
    390                          *pBuf = touch_i2c_ReceiveByte(FALSE);
    391                      }
    392                      // receive byte
    393                      pBuf++; // next byte pointer
    394                  } // while
    395                  break;
    396              } // while
    397              touch_i2c_Stop();
    398          }
    399          
    400          
    401          /////////////////////////////////////////////////////////////////
    402          // I2C write bytes to device.
    403          //
    404          // Arguments: ucSlaveAdr - slave address
    405          //            ucSubAdr - sub address
    406          //            pBuf - pointer of buffer
    407          //            ucBufLen - length of buffer
    408          /////////////////////////////////////////////////////////////////
    409          void touch_i2cBurst_1addr_WriteBytes(BYTE ucSlaveAdr, BYTE ucSubAdr, BYTE *pBuf, BYTE
    410                                 ucBufLen)
    411          {
    412              WORD ucDummy; // loop dummy
    413              ucDummy = I2C_ACCESS_DUMMY_TIME;
    414              while (ucDummy--)
    415              {
    416                  if (touch_i2c_AccessStart(ucSlaveAdr, I2C_WRITE) == FALSE)
    417                  {
    418                      continue;
    419                  }
    420                  if (touch_i2c_SendByte(ucSubAdr) == I2C_NON_ACKNOWLEDGE)
    421                      // check non-acknowledge
    422                  {
    423                      continue;
    424                  }
    425          
    426                  while (ucBufLen--)
    427                      // loop of writting data
    428                  {
    429                      touch_i2c_SendByte(*pBuf); // send byte
    430                      pBuf++; // next byte pointer
    431                  } // while
    432                  break;
    433              } // while
    434              touch_i2c_Stop();
    435          	
    436          	//Delay(10000);
    437          }
    438          
    439          /////////////////////////////////////////////////////////////////
    440          // I2C read bytes from device.
    441          //
    442          // Arguments: ucSlaveAdr - slave address
    443          //            ucSubAdr - sub address
    444          //            pBuf - pointer of buffer
    445          //            ucBufLen - length of buffer
    446          /////////////////////////////////////////////////////////////////
    447          void touch_i2cBurst_1addr_ReadBytes(BYTE ucSlaveAdr, BYTE ucSubAdr, BYTE *pBuf, BYTE
    448                                 ucBufLen)
    449          {
    450              WORD ucDummy; // loop dummy
    451              ucDummy = I2C_ACCESS_DUMMY_TIME;
    452              while (ucDummy--)
    453              {
    454                  if (touch_i2c_AccessStart(ucSlaveAdr, I2C_WRITE) == FALSE)
    455                  {
    456                      continue;
    457                  }
    458          		if (touch_i2c_SendByte(ucSubAdr) == I2C_NON_ACKNOWLEDGE)
    459                      // check non-acknowledge
    460                  {
    461                      continue;
    462                  }
    463                //i2c_Stop();
    464                  if (touch_i2c_AccessStart(ucSlaveAdr, I2C_READ) == FALSE)
    465                  {
    466                      continue;
    467                  }
    468                  while (ucBufLen--)
    469                      // loop to burst read
    470                  {
    471                      if (ucBufLen)
    472                      {
    473                          *pBuf = touch_i2c_ReceiveByte(TRUE);
    474                      }
    475                      // receive byte
    476                      else
    477                      {
    478                          *pBuf = touch_i2c_ReceiveByte(FALSE);
    479                      }
    480                      // receive byte
    481                      pBuf++; // next byte pointer
    482                  } // while
    483                  break;
    484              } // while
    485              touch_i2c_Stop();
    486          }
    487          
    488          #endif
    489          
    490          void check_addr(void)
    491          {
    492          	if (touch_i2c_AccessStart(0xba, I2C_WRITE) == FALSE)
    493          	{
    494          		Delay_1ms(10);
    495          		if (touch_i2c_AccessStart(0x28, I2C_WRITE) == TRUE)
    496          		GT911_adr=0x28;
    497          	}
    498          	else 
    499          		{
    500          				Delay_1ms(10);
    501          	if (touch_i2c_AccessStart(0xba, I2C_WRITE) == TRUE)	
    502          		GT911_adr=0xba;
    503          	}
    504          }
    505          
    506          
    507          void init_touch(void)
    508          {
    509          
    510          		GPIO_SetBits(CTOUCH_SDA_PORT,CTOUCH_SDA_PIN);
    511          		Delay_1ms(10);
    512          		GPIO_SetBits(CTOUCH_SCL_PORT,CTOUCH_SCL_PIN);
    513          		Delay_1ms(10);
    514          	
    515          		GPIO_SetBits(CTOUCH_INT_PORT,CTOUCH_INT_PIN);
    516          		Delay_1ms(10);
    517          		GPIO_ResetBits(CTOUCH_RST_PORT,CTOUCH_RST_PIN);
    518          		Delay_1ms(10);
    519          		GPIO_SetBits(CTOUCH_RST_PORT,CTOUCH_RST_PIN);
    520          	//	Delay(10000);
    521          	//Delay(10000);
    522          	//SysDelay(10000);
    523          	Delay_1ms(10);
    524          		{
    525          		GPIO_InitTypeDef GPIO_InitStructure;
    526          		GPIO_InitStructure.GPIO_Pin = CTOUCH_INT_PIN;
    527          		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    528          		GPIO_Init(CTOUCH_INT_PORT,&GPIO_InitStructure);
    529          	}
    530          	Delay_1ms(10);
    531          	check_addr();
    532          
    533          
    534          #if 0
    535          	GPIO_ResetBits(CTOUCH_RST_PORT,CTOUCH_RST_PIN);
    536          	Delay_1ms(10);
    537          
    538          	GPIO_SetBits(CTOUCH_RST_PORT,CTOUCH_RST_PIN);
    539          	Delay_1ms(10);
    540          
    541          	GPIO_ResetBits(CTOUCH_RST_PORT,CTOUCH_RST_PIN);
    542          	Delay_1ms(10);
    543          
    544          	GPIO_SetBits(CTOUCH_SCL_PORT,CTOUCH_SCL_PIN);
    545          	Delay_1ms(10);
    546          	GPIO_SetBits(CTOUCH_INT_PORT,CTOUCH_INT_PIN);
    547          	Delay_1ms(10);
    548          	GPIO_SetBits(CTOUCH_RST_PORT,CTOUCH_RST_PIN);
    549          	Delay_1ms(10);
    550          	Delay_1ms(10);
    551          		{
    552          		GPIO_InitTypeDef GPIO_InitStructure;
    553          		GPIO_InitStructure.GPIO_Pin = CTOUCH_INT_PIN;
    554          		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    555          		GPIO_Init(CTOUCH_INT_PORT,&GPIO_InitStructure);
    556          	}
    557          	//EXIT_Configuration();
    558              GPIO_SetBits(CTOUCH_SDA_PORT,CTOUCH_SDA_PIN);
    559          	Delay_1ms(10);
    560          	GPIO_SetBits(CTOUCH_SCL_PORT,CTOUCH_SCL_PIN);
    561          	Delay_1ms(10);
    562          	//  i2cBurstWriteBytes(GT911_adr,0x80,0x47, GT911_init, sizeof(GT911_init)/sizeof(GT911_init[0]));
    563          
    564          	  #endif
    565          	  //touch_i2cBurstWriteBytes(GT911_adr,0x80,0x40, touch_I2C_buff, 1);
    566          	  touch_I2C_buff[0]=0;
    567          	  touch_i2cBurstWriteBytes(GT911_adr,0x81,0x4e, &touch_I2C_buff[0], 1);
    568          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  check_addr
              8 -> Delay_1ms
              8 -> touch_i2c_AccessStart
       16  init_touch
             16 -> Delay_1ms
             16 -> GPIO_Init
             16 -> GPIO_ResetBits
             16 -> GPIO_SetBits
             16 -> check_addr
             16 -> touch_i2cBurstWriteBytes
       24  touch_i2cBurstCurrentBytes
             24 -> touch_i2c_AccessStart
             24 -> touch_i2c_ReceiveByte
             24 -> touch_i2c_Stop
       32  touch_i2cBurstReadBytes
             32 -> touch_i2c_AccessStart
             32 -> touch_i2c_ReceiveByte
             32 -> touch_i2c_SendByte
             32 -> touch_i2c_Stop
       32  touch_i2cBurstWriteBytes
             32 -> touch_i2c_AccessStart
             32 -> touch_i2c_SendByte
             32 -> touch_i2c_Stop
       24  touch_i2cBurst_1addr_ReadBytes
             24 -> touch_i2c_AccessStart
             24 -> touch_i2c_ReceiveByte
             24 -> touch_i2c_SendByte
             24 -> touch_i2c_Stop
       24  touch_i2cBurst_1addr_WriteBytes
             24 -> touch_i2c_AccessStart
             24 -> touch_i2c_SendByte
             24 -> touch_i2c_Stop
        8  touch_i2cSetSCL
              8 -> GPIO_ResetBits
              8 -> GPIO_SetBits
       16  touch_i2cSetSCL_Chk
             16 -> GPIO_ReadInputDataBit
             16 -> touch_i2cSetSCL
        8  touch_i2cSetSDA
              8 -> GPIO_ResetBits
              8 -> GPIO_SetBits
       16  touch_i2cSetSDA_Chk
             16 -> GPIO_ReadInputDataBit
             16 -> touch_i2cSetSDA
       16  touch_i2c_AccessStart
             16 -> touch_i2c_Delay
             16 -> touch_i2c_SendByte
             16 -> touch_i2c_Start
             16 -> touch_i2c_Stop
        0  touch_i2c_Delay
       16  touch_i2c_ReceiveByte
             16 -> GPIO_ReadInputDataBit
             16 -> touch_i2cSetSCL
             16 -> touch_i2cSetSDA
             16 -> touch_i2cSetSDA_Chk
             16 -> touch_i2c_Delay
       16  touch_i2c_SendByte
             16 -> GPIO_ReadInputDataBit
             16 -> touch_i2cSetSCL
             16 -> touch_i2cSetSCL_Chk
             16 -> touch_i2cSetSDA
             16 -> touch_i2cSetSDA_Chk
             16 -> touch_i2c_Delay
        8  touch_i2c_Start
              8 -> GPIO_ReadInputDataBit
              8 -> touch_i2cSetSCL
              8 -> touch_i2cSetSCL_Chk
              8 -> touch_i2cSetSDA
              8 -> touch_i2cSetSDA_Chk
              8 -> touch_i2c_Delay
        8  touch_i2c_Stop
              8 -> touch_i2cSetSCL
              8 -> touch_i2cSetSDA
              8 -> touch_i2c_Delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
       4  ??DataTable8_3
       1  GT911_adr
       1  Touch_flag
       1  Touch_on_Click
      66  check_addr
     138  init_touch
      12  touch_I2C_buff
      80  touch_i2cBurstCurrentBytes
     134  touch_i2cBurstReadBytes
     100  touch_i2cBurstWriteBytes
     114  touch_i2cBurst_1addr_ReadBytes
      82  touch_i2cBurst_1addr_WriteBytes
      38  touch_i2cSetSCL
      50  touch_i2cSetSCL_Chk
      38  touch_i2cSetSDA
      50  touch_i2cSetSDA_Chk
      86  touch_i2c_AccessStart
      12  touch_i2c_Delay
     108  touch_i2c_ReceiveByte
     126  touch_i2c_SendByte
      84  touch_i2c_Start
      44  touch_i2c_Stop

 
    15 bytes in section .bss
 1 366 bytes in section .text
 
 1 366 bytes of CODE memory
    15 bytes of DATA memory

Errors: none
Warnings: none
