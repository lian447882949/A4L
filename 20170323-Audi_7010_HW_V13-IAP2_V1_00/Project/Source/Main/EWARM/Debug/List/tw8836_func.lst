###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Jun/2016  13:18:54 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\TW8836\tw8836_func.c                 #
#    Command line =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\TW8836\tw8836_func.c -D              #
#                    USE_STDPERIPH_DRIVER -D USE_STM32100B_EVAL -D            #
#                    STM32F10X_CL -lc F:\软件工程\平台正式代码001\Benze_MainB #
#                    oard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph #
#                    _Template\EWARM\Debug\List\ -lA                          #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\ -o F:\软件工程\平台正式代码001\Benze_MainBoar #
#                    d\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Te #
#                    mplate\EWARM\Debug\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I F:\软件工程\平台正式代码001\Benze_MainBoard\ba #
#                    oma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Templa #
#                    te\EWARM\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\ -I F:\软件工程\平台正式代码001\Benze_Mai #
#                    nBoard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeri #
#                    ph_Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph #
#                    _Driver\inc\ -I F:\软件工程\平台正式代码001\Benze_MainBo #
#                    ard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_ #
#                    Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph_Dr #
#                    iver\src\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\..\..\Project/Common\ -I                  #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/TW8836\ -I F:\软件工程\平台正式代码001\B #
#                    enze_MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x #
#                    _StdPeriph_Template\EWARM\..\..\..\Project/CAN\ -I       #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/FM\ -I F:\软件工程\平台正式代码001\Benze #
#                    _MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x_Std #
#                    Periph_Template\EWARM\..\..\..\Project/ARM\ -I           #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\  #
#                    -On -I "C:\Program Files\IAR Systems\Embedded Workbench  #
#                    6.0_2\arm\CMSIS\Include\"                                #
#    List file    =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\tw8836_func.lst                                #
#    Object file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\Obj\tw8836_func.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\benci_newC_V45\Project\TW8836\tw8836_func.c
      1          #define _REG_C_
      2          
      3          #include "compile.h"
      4          
      5          #include "tw8836_const.h"
      6          
      7          #include "i2c_driver.h"
      8          #include "tw8836_func.h"
      9          
     10          #include "pannel.h"
     11          #include "main.h"
     12          
     13          
     14          #include "libr.h"
     15          #include "port.h"
     16          #include"com.h"
     17          #include "includes.h"
     18          
     19          //=============================================================================
     20          //初始化端口状态
     21          //=============================================================================
     22          #if 0
     23          void	InitGPIO()
     24          {
     25          	WriteTW88(0xFF,0);			
     26          	WriteTW88(0x40 +0,0x03);		//Enable
     27          	WriteTW88(0x50 + 0,0x07);	//OUT
     28          	WriteTW88(0x90 + 0,0x07);		//PU	
     29          
     30          	WriteTW88(0x40 +8,0x30);		//Enable
     31          	WriteTW88(0x50 + 8,0x30);	//OUT
     32          	WriteTW88(0x90 + 8,0x30);		//PU	
     33          	
     34          }
     35          void	Write_GPIO(WORD pins,BYTE val)
     36          {
     37           	BYTE port,index;
     38          	BYTE reg,reg_val;
     39          
     40          	port = (BYTE)(pins >> 8);
     41          	index = (BYTE)(pins%256);
     42          
     43          	if(port > 0){
     44          	 	//GPIO
     45          		WriteTW88(0xFF,0);
     46          		reg = 0x70 + port - 1;
     47          		reg_val = ReadTW88(reg);
     48          		if(val)
     49          			reg_val |= index;
     50          		else
     51          			reg_val &= (~index);
     52          
     53          		WriteTW88(reg,reg_val);
     54          	}
     55          
     56          }
     57          BYTE	Read_GPIO(WORD pins)
     58          {
     59           	BYTE port,index;
     60          	BYTE reg,reg_val = 0;
     61          
     62          	port = (BYTE)(pins >> 8);
     63          	index = (BYTE)(pins%256);
     64          
     65          	if(port > 0){
     66          	 	//GPIO
     67          		WriteTW88(0xFF,0);
     68          		reg = 0x60 + port - 1;
     69          		reg_val = ReadTW88(reg);
     70          
     71          		reg_val	&= index;
     72          	}
     73          	if(reg_val)
     74          		return 1;
     75          	else
     76          		return 0;
     77          }
     78          #endif
     79          //=============================================================================
     80          //初始化屏
     81          //=============================================================================
     82          void	InitPanel()
     83          {
     84          
     85          }
     86          
     87          
     88          
     89           void Init_TW8836_Variables(void)
     90           {
     91          	CVBS_Status=NTSC;
     92          	CSYNC_Status=HAS_CSYNC;
     93          	MainIsCvbs_ID=1;
     94          
     95          	main_signal_Status=HAS_SIGNAL;
     96          	pip1_signal_Status=HAS_SIGNAL;
     97          	pip2_signal_Status=HAS_SIGNAL;	
     98          	main_signal_last_Status=HAS_SIGNAL;
     99          	pip1_signal_last_Status=HAS_SIGNAL;
    100          	pip2_signal_last_Status=HAS_SIGNAL;	
    101          
    102          	has_signal_Count=0;
    103          	no_signal_Count=0;
    104          
    105          	Mouse_buff_init();
    106          	
    107           }
    108          void TW8836_Reset(void)
    109          {
    110          	GPIO_ResetBits(GPIOB, P_TW8836_RST);
    111          	Delay_1ms(100);
    112          	GPIO_SetBits(GPIOB, P_TW8836_RST);
    113          }
    114          void TW8836_init(void)
    115          {
    116          	BYTE i;
                 	     ^
Warning[Pe177]: variable "i" was declared but never referenced
    117          	WORD Delay_count=0;
                 	     ^
Warning[Pe177]: variable "Delay_count" was declared but never referenced
    118          
    119          	Init_TW8836_Variables();
    120          	TW8836_Reset();
    121          
    122          
    123          	//Delay_1ms(10000);
    124          
    125          	//Delay_1ms(10000);
    126          	//Delay_1ms(10000);
    127          	//Delay_1ms(10000);
    128          	
    129          #if 0//miller.tao20150711
    130          	while(ReadTW88_Page( 0x00 ) !=0x36)//0x4C
    131          	{
    132          		Delay_count++;
    133          		if(Delay_count>100)
    134          		{
    135          			//WavePlayer_Warning(warn_open_type);	//test		
    136          			//WavePlayer_Warning(warn_open_type);			
    137          			//WavePlayer_Warning(warn_open_type);		
    138          			break;
    139          		}
    140          		Delay_1ms(10);
    141          	}
    142          	if(Delay_count>100)
    143          	{				
    144          		Delay_1ms(500);
    145          		Delay_count=0;
    146          		while(ReadTW88_Page( 0x00 ) !=0x36)//0x4C
    147          		{
    148          			Delay_count++;
    149          			if(Delay_count>100)
    150          			{
    151          				//WavePlayer_Warning(warn_open_type);	//test		
    152          				//WavePlayer_Warning(warn_open_type);			
    153          				//WavePlayer_Warning(warn_open_type);		
    154          				break;
    155          			}
    156          			Delay_1ms(10);
    157          		}	
    158          	}
    159          
    160          	#endif
    161                  #if 0 //miller.tao20150729
    162          		while(1)//0x4C
    163          	{
    164          		Delay_count++;
    165          		if(Delay_count>2000)
    166          		{
    167          			//WavePlayer_Warning(warn_open_type);	//test		
    168          			//WavePlayer_Warning(warn_open_type);			
    169          			//WavePlayer_Warning(warn_open_type);		
    170          			break;
    171          		}
    172          		Delay_1ms(5);
    173          	}
    174          	#endif
    175          	IWDG_ReloadCounter();//清狗
    176          	
    177          
    178          
    179          		
    180          	//CLR_BACKLIGHT;
    181          	//InitGPIO();
    182          	//InitPanel();
    183          	//背光
    184          	//PanelBlack(0);
    185          	//if(System_BackOpenSys==1)//倒车开机会先显示LOGO再转镜头；
    186          	//	System_BackOpenSys=0;
    187          	//else
    188          		if(System_openlogo_init_ok == 1)
    189          		{//等待ARM LOGO初始化完成
    190          		if(Canbus_power_on_id==0)
    191          			//BackLight(1);
    192          			System_openlogo_init_ok=0;
    193          		}
    194                  
    195                  
    196                  
    197                  
    198                  
    199          	//WritePannelData_Func(Pannel_TW8836_SWRST);	//
    200          	WritePannelData_Func(Pannel_init_tw8836);////Pannel_ARM_type
    201          }
    202          /*
    203          this function is to change tw8836 's registers when the system is in A33,car,cvbs;
    204          writed by miller.tao
    205          date:20150730
    206          
    207          */
    208          void TW8836_Src(BYTE src)
    209          {
    210              //TW8836_WaitVBlank(1);
    211          
    212                 switch(src)
    213                 	{
    214                          case SRC_NAVI:
    215                                  WritePannelData_Func(Pannel_DTV_type);
    216          		        break;
    217          		case SRC_CAM:
    218          			if(Sys.FS_select.cam_type_onoff_id==0)
    219          				WritePannelData_Func(Pannel_CarMedia_type);
    220          			else if(Sys.FS_select.cam_type_onoff_id==1)
    221          				{
    222                                 WritePannelData_Func(Pannel_CVBS_type);
    223          					   if(Sys_CAN_light.sun_mode==0x02)
    224          					   	back_decoder_light_set(0xD5-(0x08*Sys.light_value)+0x20);
    225          					   else
    226          					    back_decoder_light_set(0xD5-(0x10*Sys.light_value));
    227          				}
    228          			else if(Sys.FS_select.cam_type_onoff_id==2)
    229          				{
    230          				WritePannelData_Func(Pannel_CVBS_type);
    231          									TW8836_WritePage(0x01);
    232          	TW8836_Write(0x0a, 0x0a);
    233          					TW8836_WritePage(0x02);
    234          	TW8836_Write(0x04, 0x0e);
    235          	TW8836_Write(0x03, 0x36);
    236          				}
    237          		        break;
    238          	        case SRC_CarMedia:
    239                                 WritePannelData_Func(Pannel_CarMedia_type);
    240          		        break;
    241          		default :
    242          			break;
    243          
    244          
    245          	 }
    246          }
    247          
    248          void	BackLight(BYTE on)
    249          {
    250          	//背光
    251          	if(on){
    252          //		WriteTW88(0xff, 0x09);
    253          //		WriteTW88( 0xF5, 0x02);		
    254          //		Delay_1ms(200);
    255          //		WriteTW88( 0xF5, 0x03);		
    256          //		Delay_1ms(200);
    257          
    258          		//SET_BACKLIGHT;
    259          		//GPIO_SetBits(GPIOB, P_TFT_PWR);
    260                          GPIO_SetBits(GPIOB, P_TFT_PWR);
    261          
    262          /*		WriteTW88(0xff, 0x00);
    263          		WriteTW88( 0x40, ReadTW88(0x40)|0x01 );
    264          		WriteTW88( 0x50, ReadTW88(0x40)|0x01 );
    265          		WriteTW88( 0x60, ReadTW88(0x40)|0x01 );
    266          		WriteTW88( 0x70, ReadTW88(0x40)|0x01 );	 */
    267          
    268          //		WriteTW88(0xff, 0x09);
    269          //		WriteTW88( 0xF5, 0x07);
    270          //		Delay_1ms(20);
    271          	}else{
    272          		//CLR_BACKLIGHT;
    273          /*		WriteTW88(0xff, 0x00);
    274          		WriteTW88( 0x40, ReadTW88(0x40)&0xFE );
    275          		WriteTW88( 0x50, ReadTW88(0x40)&0xFE );
    276          		WriteTW88( 0x60, ReadTW88(0x40)&0xFE );
    277          		WriteTW88( 0x70, ReadTW88(0x40)&0xFE );	*/
    278          
    279          //		WriteTW88(0xff, 0x09);
    280          //		WriteTW88( 0xF5, 0x00);
    281          		//GPIO_ResetBits(GPIOB, P_TFT_PWR);
    282          		GPIO_ResetBits(GPIOB, P_TFT_PWR);
    283          	}
    284          }
    285          
    286          //FREERUN
    287          void	PanelMute(BYTE on)
    288          {
    289          	BYTE page;
    290          	page = ReadTW88(0xFF);
    291          	if(on){
    292          		//WriteTW88(0xff, 0x01);
    293          		//WriteTW88(0x06, 0x0F);
    294          		WriteTW88(0xff, 0x04);
    295          		WriteTW88(0x8A, 0x04);//ReadTW88(0x8A)|0x0C);
    296          		WriteTW88(0x70, 0x20);//ReadTW88(0x70)|0x20);
    297          	}else{
    298          		//WriteTW88(0xff, 0x01);
    299          		//WriteTW88(0x06, 0x00);
    300          
    301          		WriteTW88(0xff, 0x04);
    302          		//WriteTW88(0x8A, ReadTW88(0x8A)&0xf3);
    303          		//delay(200);
    304          		//WriteTW88(0x70, ReadTW88(0x70)&0xdd);
    305          		WriteTW88(0x8A, 0x00);
    306          		WriteTW88(0x70, 0x00);
    307          	}
    308          
    309          	WriteTW88(0xFF,page);
    310          }
    311          void	PanelBlack(BYTE on)
    312          {
    313          	if(on)
    314          	{
    315          		WriteTW88(0xff, 0x04);
    316          		WriteTW88(0x70, ReadTW88(0x70)|0x20);
    317          	}
    318          	else
    319          	{
    320          		WriteTW88(0xff, 0x04);
    321          		WriteTW88(0x70, ReadTW88(0x70)&0xDF);
    322          	}
    323          }
    324          
    325          
    326          
    327          
    328          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  BackLight
              8 -> GPIO_ResetBits
              8 -> GPIO_SetBits
        0  InitPanel
        8  Init_TW8836_Variables
              8 -> Mouse_buff_init
        8  PanelBlack
              8 -> ReadTW88
              8 -> WriteTW88
       16  PanelMute
             16 -> ReadTW88
             16 -> WriteTW88
        8  TW8836_Reset
              8 -> Delay_1ms
              8 -> GPIO_ResetBits
              8 -> GPIO_SetBits
        8  TW8836_Src
              8 -> TW8836_Write
              8 -> TW8836_WritePage
              8 -> WritePannelData_Func
              8 -> back_decoder_light_set
        8  TW8836_init
              8 -> IWDG_ReloadCounter
              8 -> Init_TW8836_Variables
              8 -> TW8836_Reset
              8 -> WritePannelData_Func


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      34  BackLight
       2  InitPanel
      74  Init_TW8836_Variables
      64  PanelBlack
      80  PanelMute
      26  TW8836_Reset
     166  TW8836_Src
      46  TW8836_init

 
 556 bytes in section .text
 
 556 bytes of CODE memory

Errors: none
Warnings: 2
