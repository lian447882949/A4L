###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Jun/2016  13:18:52 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\Common\system_function.c             #
#    Command line =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\Common\system_function.c -D          #
#                    USE_STDPERIPH_DRIVER -D USE_STM32100B_EVAL -D            #
#                    STM32F10X_CL -lc F:\软件工程\平台正式代码001\Benze_MainB #
#                    oard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph #
#                    _Template\EWARM\Debug\List\ -lA                          #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\ -o F:\软件工程\平台正式代码001\Benze_MainBoar #
#                    d\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Te #
#                    mplate\EWARM\Debug\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I F:\软件工程\平台正式代码001\Benze_MainBoard\ba #
#                    oma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Templa #
#                    te\EWARM\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\ -I F:\软件工程\平台正式代码001\Benze_Mai #
#                    nBoard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeri #
#                    ph_Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph #
#                    _Driver\inc\ -I F:\软件工程\平台正式代码001\Benze_MainBo #
#                    ard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_ #
#                    Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph_Dr #
#                    iver\src\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\..\..\Project/Common\ -I                  #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/TW8836\ -I F:\软件工程\平台正式代码001\B #
#                    enze_MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x #
#                    _StdPeriph_Template\EWARM\..\..\..\Project/CAN\ -I       #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/FM\ -I F:\软件工程\平台正式代码001\Benze #
#                    _MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x_Std #
#                    Periph_Template\EWARM\..\..\..\Project/ARM\ -I           #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\  #
#                    -On -I "C:\Program Files\IAR Systems\Embedded Workbench  #
#                    6.0_2\arm\CMSIS\Include\"                                #
#    List file    =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\system_function.lst                            #
#    Object file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\Obj\system_function.o                               #
#                                                                             #
#                                                                             #
###############################################################################

F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\benci_newC_V45\Project\Common\system_function.c
      1          #define	_SYSTEM_FUNCTION_C_
      2          
      3          #include "compile.h"
      4          #include "includes.h"
      5          #include "stm32f10x_conf.h"
      6          #include "system_config.h"
      7          #include "libr.h"
      8          #include "system_function.h"
      9          
     10          #include "main.h"
     11          
     12          #include "port.h"
     13          
     14          #include "com.h"
     15          
     16          
     17          
     18          
     19          
     20          #include "i2c_driver.h"
     21          
     22          
     23          
     24          
     25          
     26          //#include "keycolor.h"
     27          
     28          
     29          
     30          BYTE const  screenlight_table[SCREEN_LIGHT_MAX]=
     31          {
     32          //LIGHT          0      1    2   3       4     5    6      7     8        9  
     33                             0x0f,0x1f,0x3f,0x5f,0x7f,0x9f,0xbf,0xcf,0xbf,0xef ,  0xff,
     34          };
     35          
     36          void Mute_Process(void)
     37          {}
     38          void audio_mute_function(void)
     39          {}
     40          
     41          BYTE AudioGPS_vol_separate_check(void)//==1 GPS发声
     42          {
     43          	/*if((Sys.Main_Source==SRC_Bluetooth)&&(BT_call_status!=BT_CALLEND))
     44          		return 0;
     45          	if((Sys.Main_Source==SRC_audioplay)||(Sys.Main_Source==SRC_videoplay)||\
     46          	(Sys.Main_Source==SRC_App))
     47          	     return 0;
     48          	else if((Sys.Main_Source==SRC_NAVI)&&(Sys.voice_navi==1)&&\
     49          		((Sys.gps_voice_Source==SRC_videoplay)||(Sys.gps_voice_Source==SRC_audioplay)||(Sys.gps_voice_Source==SRC_App)))
     50          	    return 0;
     51                 else if((audio_gps_voice_id==1)&&(Sys.voice_navi==1))
     52          		return 1;
     53          	else*/
     54          		return 0;	
     55          }
     56          void  Volume_menubar(void)
     57          {}
     58          
     59          void  Volume_Adjust(void)
     60          {}
     61          
     62          //*******************************************
     63          // * 函数名称：AccOffCheck
     64          // * 内容简介：ACC 是否关闭检测 P_Acc=0( ACC ON)
     65          // *				  :   检测时间为2S
     66          // * 函数变量：无
     67          // *				  :
     68          // *	返回值	  :    BIT =0( ACC ON)
     69          //*******************************************
     70          BYTE AccOffCheck(void)
     71          {//只要有一次ACC ON就调出
     72          	Byte Cnt=200;
     73          
     74          	if(ACC_Detect()==FALSE)
     75          	{
     76          			do{
     77          				Delay_1ms(10);
     78          				Cnt--;
     79          				}
     80          			while((ACC_Detect()==FALSE)&&(Cnt!=0));  //ACC  OFF /Delay 10*50=500ms   出
     81          
     82          			if(Cnt==0)
     83          			{
     84          					return TRUE;
     85          			}
     86          	}
     87          	return FALSE;
     88          }
     89          
     90          //*******************************************
     91          // * 函数名称：AccOnCheck
     92          // * 内容简介：ACC 是否开检测 P_Acc=0( ACC ON)
     93          // * 函数变量：无
     94          // *				  :   检测时间为10ms
     95          // *				  :
     96          // *	返回值	  :     BIT =0( ACC ON)
     97          //*******************************************
     98          BYTE AccOnCheck (void)
     99          {//只要有一次ACC OFF就调出
    100          	WORD Cnt=100;
    101          
    102          	if(ACC_Detect()==TRUE)
    103          	{
    104          			do{
    105          				Delay_1ms(10);
    106          				Cnt--;
    107          			}
    108          			while((ACC_Detect()==TRUE)&&(Cnt!=0));  //ACC  ON /Delay 10*1=10ms   出
    109          
    110          			if(Cnt==0)
    111          				return TRUE;
    112          	}
    113          	return FALSE;
    114          
    115          }
    116          
    117          
    118          /*******************************************
    119           * 函数名称：CanPowerOnCheck
    120           * 内容简介：detect can power on or not 
    121           * 函数变量：无
    122           *				  :   检测时间为10ms
    123           *				  :
    124           *	返回值	  :     ret =0( can Off)
    125                                                    = 1(can on)
    126                                                    =2(sleep/idle)
    127          *******************************************/
    128          BYTE CanPowerOnCheck (void)
    129          {
    130                        BYTE  ret =0;
    131          	         if(!Sys.wPowerOnByCanTimer2)
    132                          {
    133                                #if 1 //Miller.Tao20141104
    134                            	if(m_BMW_CAN.AccPwr == SYSTEM_POWER_ON)
    135          		      {
    136          	                       //m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_OFF;
    137          	                       m_BMW_CAN.AudioPwr = SYSTEM_POWER_OFF;
    138          	                       m_BMW_CAN.AccPwr = SYSTEM_POWER_OFF;
    139                               }					
    140                                #endif
    141                            
    142                          }
    143          
    144          				
    145          		if(!Sys.wPowerOnByCanTimer)
    146          		{
    147                                   #if 1 //Miller.Tao20141107
    148          			 if(m_BMW_CAN.benze_Pwr_acc == SYSTEM_POWER_ON)
    149          			{
    150          				   m_BMW_CAN.benze_Pwr_acc = SYSTEM_POWER_OFF;
    151          				   m_BMW_CAN.AudioPwr = SYSTEM_POWER_OFF;//Miller.Tao20150119
    152          				   //m_BMW_CAN.AccPwr = SYSTEM_POWER_OFF;
    153          			}
    154                                   #endif
    155          		  
    156          		}
    157          
    158          
    159          		   if((m_BMW_CAN.benze_Pwr_acc == SYSTEM_POWER_OFF))
    160          			   	ret = 0;
    161          	      else if(m_BMW_CAN.benze_Pwr_acc == SYSTEM_POWER_ON&&m_BMW_CAN.AudioPwr == SYSTEM_POWER_OFF)
    162          		  	       ret =1;
    163          	      else if(m_BMW_CAN.benze_Pwr_acc == SYSTEM_POWER_ON&&m_BMW_CAN.AudioPwr == SYSTEM_POWER_ON)
    164          		  	       ret = 2;
    165          
    166          	      return ret;
    167          
    168          
    169          }
    170          
    171          
    172          //#define BAT_AD_6V 		0x36
    173          #define BAT_AD_7V 		0x48
    174          #define BAT_AD_8_5V 	0x5c
    175          
    176          void BAT_Detect_Int(void)		//	50ms??
    177          {}
    178          
    179          
    180          //*******************************************
    181          // * 函数名称：Initial516AD
    182          // * 内容简介：MCU内部初始化
    183          // * 函数变量：无
    184          // *				  :
    185          // *	返回值	  :    无
    186          //*******************************************
    187          
    188          //82 5V
    189          //----ACC AD=88     ACC VOLT=7V
    190          //----ACC AD=100     ACC VOLT=8V
    191          //----ACC AD=111     ACC VOLT=9V
    192          //----ACC AD=127     ACC VOLT=10V
    193          bool ACC_Detect(void)
    194          {
    195          	if(fSystemReset==1)
    196          	{
    197          		//BackLight(0);
    198          		return FALSE;   
    199          	}
    200          	else
    201          	{
    202          	//if(ADC_GetValue (ACC_ADC1_Channel)>ACC_7V) 
    203          	if(GPIO_ReadInputDataBit(GPIOA, P_ACC_DET)==0)//1
    204          		return TRUE;
    205          	else
    206          		return FALSE;   
    207          	}
    208          }
    209          
    210          bool ITL_Detect(void)
    211          {
    212          //#if(WINCA==CE8920||WINCA==CE8903||WINCA==CE8979||WINCA==CE8904||WINCA==CE8969||WINCA==CE8922||WINCA==CE8977)
    213          	//if(ADC_GetValue (ITL_ADC2_Channel)>5)
    214          //#else
    215          	//if(ADC_GetValue (ADC2_ITL_Channel)>80)
    216          //#endif
    217          		//return TRUE;
    218          	//else
    219          		return FALSE;   
    220          }
    221          bool Back_Detect(void)
    222          {
    223          	//if(GPIO_ReadInputDataBit(GPIOE, P_BACK_ID)==0)
    224          	//{
    225          		//BackDetectID=1;
    226          		//return TRUE;
    227          	//}
    228          	//else
    229          	{
    230          		//BackDetectID=0;
    231          		return FALSE;
    232          	}	
    233          }
    234          
    235          bool Brake_Detect(void)
    236          {
    237          	//if(GPIO_ReadInputDataBit(GPIOE, P_BREAK_ID)==0)
    238          	//{
    239          	//	return TRUE;
    240          	//}
    241          	//else
    242          	{
    243          		return FALSE;
    244          	}
    245          }
    246          //BYTE tv_detect_ad;
    247          //无电视       ==255
    248          //内置电视 ==127
    249          //外置电视 ==170
    250          //内外置都有==101
    251          bool TV_Detect(void)
    252          {
    253          	BYTE tv_detect_ad;
    254          	//if(GPIO_ReadInputDataBit(GPIOE, P_TV_ID)==0)
    255          	tv_detect_ad=0;//ADC_GetValue (ADC1_TVID_Channel);
    256          	//Draw_ASCIIStr();
    257          	//DrawNum(200,100,3,tv_detect_ad);
    258          
    259          	//if(tv_detect_ad>148)//外置电视 ==170
    260          	#ifdef araba_digi_tv  
    261          		//GPIO_WriteBit(GPIOC, P_TV_SEL , Bit_SET);
    262          		return TRUE;
    263          	#else
    264          	if((tv_detect_ad>148) ||(tv_detect_ad<114))
    265          	{//内位置都有时，优先外置  by tiger 0828
    266          		//GPIO_WriteBit(GPIOC, P_TV_SEL , Bit_SET);
    267          		return TRUE;
    268          	}
    269          	else
    270          	{
    271          		//GPIO_WriteBit(GPIOC, P_TV_SEL , Bit_RESET);
    272          		return FALSE;
    273          	}
    274          	#endif
    275          }
    276          void VDISC_IPOD_Detect(void)
    277          {}
    278          
    279          void Ipod_Insert_Detect(void)
    280          {}
    281          
    282          bool BACK_OPEN_System_det(void)
    283          {
    284          	return FALSE;
    285          }
    286          void Back_Func(void)
    287          {}
    288          
    289          void Brake_Func(void)
    290          {}
    291          void screen_black_check(void)
    292          {}
    293          void Clear_Rem_Touch_Value(void)
    294          {}
    295          
    296          void screen_light_detect(void)
    297          {}
    298          
    299          void screen_light_set(void)
    300          {
    301          }
    302          void screen_light_function(BYTE light)
    303          {
    304          	//BYTE val;
    305          
    306          	if(light>SCREEN_LIGHT_MAX-1)
    307          		light=SCREEN_LIGHT_MAX-1;	
    308          
    309          	if(light==SCREEN_LIGHT_MAX-1)
    310          	{
    311          		WriteTW88_Page(0x98c, screenlight_table[light]);		
    312          	}
    313          	else
    314          	{
    315          		WriteTW88_Page(0x98c, screenlight_table[light]);		
    316          	}
    317          }
    318          void key_color_function(BYTE color)
    319          {}
    320          void key_color_set(BYTE color)
    321          {}
    322          BOOL Is_Source_Valide(BYTE source)
    323          {
    324          	if((source<SRC_Radio)||(source>SRC_Cambox))//SRC_Ipod))
    325          		return FALSE;
    326          	else
    327          		return TRUE;
    328          }
    329          
    330          BOOL Is_PIP_Source_Valide(BYTE source)
    331          {
    332          	if((source==SRC_DVD)||\
    333          		(source==SRC_NAVI)||\
    334          		(source==SRC_AUX1)||\
    335          		(source==SRC_AUX2)||\
    336          		(source==SRC_videoplay)||\
    337          		(source==SRC_CAM)||\
    338          		(source==SRC_TV))//
    339          		return TRUE;
    340          	else
    341          		return FALSE;
    342          }
    343          BOOL Is_PIP_Source_CVBS(BYTE source)
    344          {
    345          	if((source==SRC_AUX1)||\
    346          		(source==SRC_AUX2)||\
    347          		(source==SRC_videoplay)||\
    348          		(source==SRC_CAM)||\
    349          		(source==SRC_TV))//
    350          		return TRUE;
    351          	else
    352          		return FALSE;
    353          }
    354          void System_setup_reset_function(void)
    355          {
    356          
    357          }
    358          
    359          void Rem_Change_Source(void)
    360          {}
    361          
    362          
    363          void SRC_Function_Process(void)
    364          {	
    365          	switch(Sys.Main_Source)
    366          	{
    367          		case SRC_Bluetooth://倒车需要出来蓝牙的命令
    368          			BLUETOOTH_Function();
    369          			break;
    370          		default:
    371          			break;
    372          	}
    373          	
    374          
    375          	
    376          	switch(Sys.Main_Source)
    377          	{
    378          		case SRC_DVD:
    379          		case SRC_vdisc:				
    380          			
    381          			break;
    382          		case SRC_Ipod:
    383          			//IPOD_function();
    384          			break;
    385          		case SRC_Radio:
    386          			//Radio_Function();
    387          			break;
    388          		case SRC_TV:
    389          			//TV_Function();
    390          			break;		
    391          		case SRC_NAVI:
    392          			//GPS_Function();	
    393          			break;	
    394          		case SRC_videoplay:
    395          			//Videoplay_function();
    396          			break;
    397          		case SRC_audioplay:
    398          			//Audioplay_function();
    399          			break;
    400          		case SRC_VCR:
    401          			//VCR_function();
    402          			break;
    403          		case SRC_App:
    404          			//APPplay_function();			
    405          			break;	
    406          		case SRC_AUX1:	
    407          		case SRC_AUX2:	
    408          			//DigiTV_Function();
    409          			//AUX_Function();	
    410          			break;		
    411          		case SRC_CAM:	
    412          			//CAM_Function();	
    413          			break;	
    414          		case SRC_Cambox:	
    415          			//Cambox_Function();
    416          			break;
    417          		//default://test
    418          			//Radio_Function();
    419          			//break;			
    420          	}
    421          	/*if(RemValue==Rem_eject)
    422          	{
    423          		UART_Android_Key_Send(SEND_ANDROID_KEY_DVD);
    424          	}*/
    425          	
    426          	Ipod_MUL_Function();
    427          	Audioplay_MUL_Function();
    428          	Videoplay_MUL_Function();
    429          	BLUETOOTH_MUL_Function();
    430          
    431          }
    432          
    433          void Turn_source_power_off(void)
    434          {	
    435          
    436          
    437          }
    438          void SRC_REM_func(void)
    439          {}
    440          void PIP_func_limit(void)
    441          {}
    442          /****************************************************************************************
    443          画中画窗口只能是DTV,CVBS,YUV中的任意一个，不能有2个窗口的类别是一样的。
    444          
    445          主     			WIN1      		   WIN2
    446          BT/AUDIO/IPOD/RADIO		
    447          			NAVI(主窗口切换为CVBS)	   DVD
    448          			NAVI(主窗口切换为DTV)	   CAM/AUX1/AUX2/TV/VIDEO
    449          			DVD(主窗口切换为CVBS)	   NAVI
    450          			DVD(主窗口切换为DTV)	   CAM/AUX1/AUX2/TV/VIDEO
    451                          	CAM/AUX1/AUX2/TV/VIDEO	   DVD/NAVI
    452          NAVI		
    453          			DVD	   		   CAM/AUX1/AUX2/TV/VIDEO			
    454                          	CAM/AUX1/AUX2/TV/VIDEO	   DVD
    455          DVD
    456          			NAVI			   CAM/AUX1/AUX2/TV/VIDEO
    457          			CAM/AUX1/AUX2/TV/VIDEO     NAVI
    458          CAM/AUX1/AUX2/TV/VIDEO
    459          			DVD	   		   NAVI			
    460                          	NAVI	     		   DVD
    461          *****************************************************************************************/
    462          void PIP_Display(BYTE main_source,BYTE source1_id,BYTE source1,BYTE source2_id,BYTE source2)
    463          {}
    464          void PIP_Display_Func(BYTE main_source,BYTE source1_id,BYTE source1,BYTE source2_id,BYTE source2)
    465          {}
    466          
    467          void system_recover_func(void)
    468          {}
    469          
    470          void OSD_Time_Clear(void)
    471          {}
    472          
    473          /*============================
    474          *this is to handle the touch events
    475          *
    476          *By Miller.Tao
    477          *Date :20150914
    478          =============================*/
    479          void Touch_Events_Process(void)
    480          {
    481               
    482          
    483          }
    484          	

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  ACC_Detect
             8 -> GPIO_ReadInputDataBit
        8  AccOffCheck
             8 -> ACC_Detect
             8 -> Delay_1ms
        8  AccOnCheck
             8 -> ACC_Detect
             8 -> Delay_1ms
        0  AudioGPS_vol_separate_check
        0  BACK_OPEN_System_det
        0  BAT_Detect_Int
        0  Back_Detect
        0  Back_Func
        0  Brake_Detect
        0  Brake_Func
        0  CanPowerOnCheck
        0  Clear_Rem_Touch_Value
        0  ITL_Detect
        0  Ipod_Insert_Detect
        0  Is_PIP_Source_CVBS
        0  Is_PIP_Source_Valide
        0  Is_Source_Valide
        0  Mute_Process
        0  OSD_Time_Clear
        4  PIP_Display
        4  PIP_Display_Func
        0  PIP_func_limit
        0  Rem_Change_Source
        8  SRC_Function_Process
             8 -> Audioplay_MUL_Function
             8 -> BLUETOOTH_Function
             8 -> BLUETOOTH_MUL_Function
             8 -> Ipod_MUL_Function
             8 -> Videoplay_MUL_Function
        0  SRC_REM_func
        0  System_setup_reset_function
        0  TV_Detect
        0  Touch_Events_Process
        0  Turn_source_power_off
        0  VDISC_IPOD_Detect
        0  Volume_Adjust
        0  Volume_menubar
        0  audio_mute_function
        0  key_color_function
        0  key_color_set
        0  screen_black_check
        0  screen_light_detect
        8  screen_light_function
             8 -> WriteTW88_Page
        0  screen_light_set
        0  system_recover_func


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
      34  ACC_Detect
      48  AccOffCheck
      48  AccOnCheck
       4  AudioGPS_vol_separate_check
       4  BACK_OPEN_System_det
       2  BAT_Detect_Int
       4  Back_Detect
       2  Back_Func
       1  BatResetMode
       4  Brake_Detect
       2  Brake_Func
     140  CanPowerOnCheck
       2  Clear_Rem_Touch_Value
       4  ITL_Detect
       1  ITL_DetectDelayCntr
       2  Ipod_Insert_Detect
      40  Is_PIP_Source_CVBS
      52  Is_PIP_Source_Valide
      22  Is_Source_Valide
       2  Mute_Process
       2  OSD_Time_Clear
       8  PIP_Display
       8  PIP_Display_Func
       2  PIP_func_limit
       2  Rem_Change_Source
     118  SRC_Function_Process
       2  SRC_REM_func
       2  System_setup_reset_function
      24  TV_Detect
       2  Touch_Events_Process
       2  Turn_source_power_off
       2  VDISC_IPOD_Detect
       2  Volume_Adjust
       2  Volume_menubar
       2  audio_mute_function
       1  fRadioReset
       1  fSystemReset
       2  key_color_function
       2  key_color_set
       2  screen_black_check
       2  screen_light_detect
      52  screen_light_function
       2  screen_light_set
      12  screenlight_table
       2  system_recover_func
       1  tdITLDetectMode
       4  u32Systick

 
   9 bytes in section .bss
  12 bytes in section .rodata
 680 bytes in section .text
 
 680 bytes of CODE  memory
  12 bytes of CONST memory
   9 bytes of DATA  memory

Errors: none
Warnings: none
