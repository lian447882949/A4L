###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     22/Jun/2016  13:18:40 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\TW8836\SPIFlash.c                    #
#    Command line =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\TW8836\SPIFlash.c -D                 #
#                    USE_STDPERIPH_DRIVER -D USE_STM32100B_EVAL -D            #
#                    STM32F10X_CL -lc F:\软件工程\平台正式代码001\Benze_MainB #
#                    oard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph #
#                    _Template\EWARM\Debug\List\ -lA                          #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\ -o F:\软件工程\平台正式代码001\Benze_MainBoar #
#                    d\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Te #
#                    mplate\EWARM\Debug\Obj\ --no_cse --no_unroll             #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files\IAR        #
#                    Systems\Embedded Workbench 6.0_2\arm\INC\c\DLib_Config_F #
#                    ull.h" -I F:\软件工程\平台正式代码001\Benze_MainBoard\ba #
#                    oma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Templa #
#                    te\EWARM\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\ -I F:\软件工程\平台正式代码001\Benze_Mai #
#                    nBoard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeri #
#                    ph_Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph #
#                    _Driver\inc\ -I F:\软件工程\平台正式代码001\Benze_MainBo #
#                    ard\baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_ #
#                    Template\EWARM\..\..\..\Libraries\STM32F10x_StdPeriph_Dr #
#                    iver\src\ -I F:\软件工程\平台正式代码001\Benze_MainBoard #
#                    \baoma_36\benci_newC_V45\Project\STM32F10x_StdPeriph_Tem #
#                    plate\EWARM\..\..\..\Project/Common\ -I                  #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/TW8836\ -I F:\软件工程\平台正式代码001\B #
#                    enze_MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x #
#                    _StdPeriph_Template\EWARM\..\..\..\Project/CAN\ -I       #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Project/FM\ -I F:\软件工程\平台正式代码001\Benze #
#                    _MainBoard\baoma_36\benci_newC_V45\Project\STM32F10x_Std #
#                    Periph_Template\EWARM\..\..\..\Project/ARM\ -I           #
#                    F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\. #
#                    .\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\  #
#                    -On -I "C:\Program Files\IAR Systems\Embedded Workbench  #
#                    6.0_2\arm\CMSIS\Include\"                                #
#    List file    =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\List\SPIFlash.lst                                   #
#    Object file  =  F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\ben #
#                    ci_newC_V45\Project\STM32F10x_StdPeriph_Template\EWARM\D #
#                    ebug\Obj\SPIFlash.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

F:\软件工程\平台正式代码001\Benze_MainBoard\baoma_36\benci_newC_V45\Project\TW8836\SPIFlash.c
      1          #define __SPIFLASH_C__
      2          
      3          
      4          //#include "kernel.h"
      5          #include "SPIFlash.h"
      6          #include "TW8836.h"
      7          
      8          
      9          uint8_t gucSpiFlashVendor    = SPI_FLASH_VENDOR_UNKNOW;
     10          uint8_t gucSpiFlash4ByteMode = 0x00;
     11          
     12          
     13          uint8_t SPICMD_x_READ  = 0x00;
     14          uint8_t SPICMD_x_BYTES = 0x00;
     15          uint8_t SpiFlash4ByteAddr;		//4Byte mode for big SPIFLASH
     16          
     17          
     18          void SpiFlashDmaControl( uint8_t ucDestination, uint8_t ucAccessMode, uint8_t ucCount )
     19          {
     20              uint8_t ucREG4C3 = 0;
     21          
     22              ucREG4C3 = ((ucDestination << 6) & 0xC0) | ((ucAccessMode << 4) & 0x30) | (ucCount & 0x0F);
     23          
     24              TW8836_Write(REG4C3, ucREG4C3);
     25          }
     26          
     27          
     28          uint8_t SpiFlashBusyControl( uint8_t ucCommand )
     29          {
     30              uint8_t temp = 0;
     31          
     32              switch(ucCommand)
     33              {
     34                  case FLASH_CMD_PP       :   temp = 0x02;    break;
     35                  case FLASH_CMD_READ     :
     36                  case FLASH_CMD_FAST_READ:
     37                  case FLASH_CMD_4READ    :
     38                  case FLASH_CMD_WRSR     :   temp = 0x04;    break;
     39                  case FLASH_CMD_SE       :
     40                  case FLASH_CMD_BE       :
     41                  case FLASH_CMD_BE_32K   :
     42                  case FLASH_CMD_CE       :   temp = 0x06;    break;
     43                  default:
     44                      break;
     45              }
     46          
     47              return temp;
     48          }
     49          
     50          
     51          uint8_t SpiFlashReadChipRegister( DMA_RW_CHIP_REGISTER *tDMARWChipRegister )
     52          {
     53              uint8_t  i = 0, ucREG4C4 = 0;
     54          
     55              TW8836_WritePage(TW8836_PAGE4_SPI_MCU);
     56          
     57              SpiFlashDmaControl(DMA_RW_DEST_CHIPREG, DMA_RW_MODE_INCREASE, tDMARWChipRegister->w_size + 0x01);
     58          
     59              /*DMA Page & Index Register*/
     60              TW8836_Write(REG4C6, DMA_RW_BUFFER_REG_PAGE);
     61              TW8836_Write(REG4C7, DMA_RW_BUFFER_REG_INDEX);
     62          
     63              /*DMA Lenght HIGH , MID , LOW Byte Register*/
     64              TW8836_Write(REG4DA, 0x00);
     65              TW8836_Write(REG4C8, 0x00);
     66              TW8836_Write(REG4C9, tDMARWChipRegister->r_size);
     67          
     68              /*DMA Command Buffer Register*/
     69              TW8836_Write(REG4CA, tDMARWChipRegister->command);
     70          
     71              for(i = 0; i < tDMARWChipRegister->w_size; i++)
     72              {
     73                  TW8836_Write(REG4CB + i, tDMARWChipRegister->parameter[i]);
     74              }
     75          
     76              ucREG4C4 |= SpiFlashBusyControl(tDMARWChipRegister->command);
     77          
     78              TW8836_Write(REG4C4, ucREG4C4 | 0x01);   /* Start command execution. Self cleared */
     79          
     80              while(TW8836_Read(REG4C4) & 0x01);
     81          
     82              /*DMA Read/Write Buffer Register*/
     83              for(i = 0; i < tDMARWChipRegister->r_size; i++)
     84              {
     85                  tDMARWChipRegister->buffer[i] = TW8836_Read(REG4D0 + i);
     86              }
     87          
     88              return 0;
     89          }
     90          
     91          
     92          void SpiFlashReadRLE2Header( uint8_t *dest_loc, uint32_t src_loc, uint16_t size )
     93          {
     94              uint16_t i = 0, j = 0, rSize = 0;
     95          
     96              uint8_t *ptr;
     97          
     98              uint8_t ucREG4C1 = 0;
     99          
    100              ptr = (uint8_t *)dest_loc;
    101          
    102              TW8836_WritePage(TW8836_PAGE4_SPI_MCU);
    103          
    104              ucREG4C1 = TW8836_Read(REG4C1);
    105          
    106              /*DMA Start Mode : Immediately*/
    107              TW8836_Write(REG4C1, ucREG4C1 & 0xFE);
    108          
    109              SpiFlashDmaControl(DMA_RW_DEST_CHIPREG, DMA_RW_MODE_INCREASE, 0x05);
    110          
    111              /*DMA Page & Index Register*/
    112              TW8836_Write(REG4C6, DMA_RW_BUFFER_REG_PAGE);
    113              TW8836_Write(REG4C7, DMA_RW_BUFFER_REG_INDEX);
    114          
    115              /*DMA Command Buffer Register*/
    116              TW8836_Write(REG4CA, FLASH_CMD_FAST_READ);      /*SPI Command : Fast Read*/
    117          
    118              for(i = 0; i < size; i+=8)
    119              {
    120                  /*DMA Command Buffer Register*/
    121                  TW8836_Write(REG4CB, (uint8_t)((src_loc + i) >> 0x10));
    122              	TW8836_Write(REG4CC, (uint8_t)((src_loc + i) >> 0x08));
    123              	TW8836_Write(REG4CD, (uint8_t)((src_loc + i) >> 0x00));
    124          
    125                  if(i+0x08 <= size) rSize = 0x08;
    126                  else               rSize = size - i;
    127          
    128                  /*DMA Lenght HIGH , MID , LOW Byte Register*/
    129                  TW8836_Write(REG4DA, 0x00);
    130                  TW8836_Write(REG4C8, 0x00);
    131                  TW8836_Write(REG4C9, rSize);
    132          
    133                  /*SPI Flash Read Mode : Fast*/
    134                  TW8836_Write(REG4C0, (TW8836_Read(REG4C0) & 0xF8) | 0x01);
    135          
    136                  /*Flash Busy Control : Busy Check And DMA Start Read*/
    137                  TW8836_Write(REG4C4, 0x05);
    138          
    139                  /*Wait DMA Execution Finished*/
    140                  while(TW8836_Read(REG4C4) & 0x01);
    141          
    142                  /*SPI Flash Read Mode : QUAD-IO*/
    143                  TW8836_Write(REG4C0, (TW8836_Read(REG4C0) & 0xF8) | 0x03);
    144          
    145                  for(j = 0; j < rSize; j++)
    146                  {
    147                      /*DMA Read/Write Buffer Register*/
    148                      *ptr++ = TW8836_Read(REG4D0 + j);
    149                  }
    150              }
    151          
    152              /*Restore The Register Value*/
    153              TW8836_Write(REG4C1, ucREG4C1);
    154          }
    155          
    156          uint8_t gManufacturerID=0, gMemoryType=0, gMemoryDensity=0;//miller.tao20150829 for test
    157          uint8_t flasherr=0;
    158          void SpiFlashInitQuad( void )
    159          {
    160              uint8_t status = 0, value = 0;
    161          
    162              uint8_t ManufacturerID, MemoryType, MemoryDensity;
    163          
    164              DMA_RW_CHIP_REGISTER tDMARWChipRegister;
    165          
    166              tDMARWChipRegister.command = FLASH_CMD_RDID;
    167              tDMARWChipRegister.r_size  = 0x03;
    168              tDMARWChipRegister.w_size  = 0x00;
    169          
    170              status = SpiFlashReadChipRegister(&tDMARWChipRegister);
    171          
    172              if(status)
    173              {
    174                  //printf("\r\nRead Flash's Identification Fail.");
    175                  flasherr = 1;
    176              }
    177          
    178              ManufacturerID = tDMARWChipRegister.buffer[0];
    179              MemoryType     = tDMARWChipRegister.buffer[1];
    180              MemoryDensity  = tDMARWChipRegister.buffer[2];
    181          
    182              gManufacturerID= ManufacturerID;
    183          	 gMemoryType= MemoryType;
    184          	 gMemoryDensity =MemoryDensity;
    185             // printf("\r\nSPI Flash JEDEC ID : 0x%x, 0x%x, 0x%x", ManufacturerID, MemoryType, MemoryDensity);
    186          
    187              switch(ManufacturerID)
    188              {
    189                  case 0x1C:
    190                      gucSpiFlashVendor = SPI_FLASH_VENDOR_EON;
    191          
    192                      if(MemoryType == 0x70 && MemoryDensity == 0x19)
    193                      {
    194                          gucSpiFlashVendor = SPI_FLASH_VENDOR_EON_256;
    195                      }
    196                      break;
    197                 case 0xC2://millertao add 20150829
    198                          gucSpiFlashVendor = SPI_FLASH_VENDOR_MX;
    199          		break;
    200                  default:
    201                      //printf("\r\nUnknow SPI Flash.");
    202                      break;
    203              }
    204          
    205              /*Read Status Register*/
    206              if(ManufacturerID == 0x1C || ManufacturerID == 0xC2)    /* EON:0x1C , MX:0xC2 */
    207              {
    208                  tDMARWChipRegister.command = FLASH_CMD_RDSR;
    209                  tDMARWChipRegister.r_size  = 0x01;
    210                  tDMARWChipRegister.w_size  = 0x00;
    211          
    212                  status = SpiFlashReadChipRegister(&tDMARWChipRegister);
    213          
    214                  value  = tDMARWChipRegister.buffer[0];
    215              }
    216          
    217              //printf("\r\nSPI Flash Status Register Value : 0x%x", value);
    218          
    219              if(value) return;
    220          
    221          
    222              /* Enable Quad IO Mode */
    223              if(ManufacturerID == 0x1C || ManufacturerID == 0xC2)    /* EON:0x1C , MX:0xC2 */
    224              {
    225                  tDMARWChipRegister.command = FLASH_CMD_WREN;
    226                  tDMARWChipRegister.r_size  = 0x00;
    227                  tDMARWChipRegister.w_size  = 0x00;
    228          
    229                  SpiFlashReadChipRegister(&tDMARWChipRegister);
    230          
    231          
    232                  tDMARWChipRegister.command = FLASH_CMD_WRSR;
    233                  tDMARWChipRegister.r_size  = 0x00;
    234                  tDMARWChipRegister.w_size  = 0x01;
    235                  tDMARWChipRegister.parameter[0] = 0x40;
    236          
    237                  SpiFlashReadChipRegister(&tDMARWChipRegister);
    238          
    239          
    240                  tDMARWChipRegister.command = FLASH_CMD_WRDI;
    241                  tDMARWChipRegister.r_size  = 0x00;
    242                  tDMARWChipRegister.w_size  = 0x00;
    243          
    244                  SpiFlashReadChipRegister(&tDMARWChipRegister);
    245              }
    246          
    247              //printf("\r\nSPI Flash Quad IO Mode Enable.");
    248          }
    249          
    250          
    251          void SpiFlashSetReadMode( uint8_t ucMode )
    252          {
    253              TW8836_WritePage(TW8836_PAGE4_SPI_MCU);
    254          
    255              TW8836_Write(REG4C0, (TW8836_Read(REG4C0) & 0xF8) | ucMode);
    256          
    257          		switch( ucMode ) {
    258          			case 0: //--- Slow
    259          				//max speed is 50MHz.
    260          				//but, normally, 54MHz is working.
    261          				SPICMD_x_READ	= 0x03; 
    262          				SPICMD_x_BYTES	= 4;	//(8+24)/8
    263          				break;
    264          			case 1: //--- Fast
    265          				SPICMD_x_READ	= 0x0b; 
    266          				SPICMD_x_BYTES	= 5;   //(8+24+8)/8. 8 dummy
    267          				break;
    268          			case 2: //--- Dual
    269          				SPICMD_x_READ	= 0x3b;
    270          				SPICMD_x_BYTES	= 5;
    271          				break;
    272          			case 3: //--- Quad
    273          				SPICMD_x_READ	= 0x6b; 
    274          				SPICMD_x_BYTES	= 5;
    275          				break;
    276          			case 4: //--- Dual-IO
    277          				SPICMD_x_READ	= 0xbb; 
    278          				SPICMD_x_BYTES	= 5;	//(8+12*2+4*2)/8. Note:*2 means 2 lines.
    279          				break;
    280          			case 5: //--- Quad-IO
    281          				SPICMD_x_READ	= 0xeb;  
    282          				SPICMD_x_BYTES	= 7;   //(8+6*4+2*4+4*4)/8. Note:*4 means 4 lines.
    283          				break;
    284          			case 6: //--- DEdge. DTR(Double Transfer Rate)
    285          				SPICMD_x_READ	= 0xed;  
    286          				SPICMD_x_BYTES	= 12;	//.
    287          				break;
    288          			default:
    289          				//fast read mode can support Extender/Qual/Quad.
    290          				SPICMD_x_READ	= 0x0b; 
    291          				SPICMD_x_BYTES	= 5;   //(8+24+8)/8. 8 dummy
    292          				break;
    293          			}
    294          
    295          }
    296          
    297          
    298          void SpiFlashSet4ByteMode( uint8_t ucMode )
    299          {
    300              uint8_t ucCommand = 0;
    301              DMA_RW_CHIP_REGISTER tDMARWChipRegister;
    302          
    303              if(ucMode)
    304              {
    305                  if(gucSpiFlash4ByteMode == 0)
    306                  {
    307                      gucSpiFlash4ByteMode = 1;
    308                      ucCommand = FLASH_CMD_EN4B;
    309                  }
    310              }
    311              else
    312              {
    313                  if(gucSpiFlash4ByteMode == 1)
    314                  {
    315                      gucSpiFlash4ByteMode = 0;
    316                      ucCommand = FLASH_CMD_EX4B;
    317                  }
    318              }
    319          
    320              if(ucCommand)
    321              {
    322                  tDMARWChipRegister.command = ucCommand;
    323                  tDMARWChipRegister.r_size  = 0x00;
    324                  tDMARWChipRegister.w_size  = 0x00;
    325                  
    326                  SpiFlashReadChipRegister(&tDMARWChipRegister);
    327              }
    328          }
    329          
    330          
    331          void SpiFlashInit( void )
    332          {
    333              SpiFlashInitQuad();
    334          
    335              if(gucSpiFlashVendor == SPI_FLASH_VENDOR_EON_256)
    336              {
    337                  SpiFlashSet4ByteMode(1);
    338          
    339                  if(gucSpiFlash4ByteMode)
    340                  {
    341                      //printf("\r\nSPI Flash Enter 4-Byte Mode.");
    342                  }
    343              }
    344          
    345              SpiFlashSetReadMode(SPI_READ_MODE);
    346          
    347              //printf("\r\nSPI Flash Init Finished.");
    348          }
    349          
    350          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        0  SpiFlashBusyControl
       24  SpiFlashDmaControl
             24 -> TW8836_Write
        8  SpiFlashInit
              8 -> SpiFlashInitQuad
              8 -> SpiFlashSet4ByteMode
              8 -> SpiFlashSetReadMode
       48  SpiFlashInitQuad
             48 -> SpiFlashReadChipRegister
       16  SpiFlashReadChipRegister
             16 -> SpiFlashBusyControl
             16 -> SpiFlashDmaControl
             16 -> TW8836_Read
             16 -> TW8836_Write
             16 -> TW8836_WritePage
       40  SpiFlashReadRLE2Header
             40 -> SpiFlashDmaControl
             40 -> TW8836_Read
             40 -> TW8836_Write
             40 -> TW8836_WritePage
       32  SpiFlashSet4ByteMode
             32 -> SpiFlashReadChipRegister
        8  SpiFlashSetReadMode
              8 -> TW8836_Read
              8 -> TW8836_Write
              8 -> TW8836_WritePage


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       1  SPICMD_x_BYTES
       1  SPICMD_x_READ
       1  SpiFlash4ByteAddr
      68  SpiFlashBusyControl
      40  SpiFlashDmaControl
      28  SpiFlashInit
     278  SpiFlashInitQuad
     176  SpiFlashReadChipRegister
     302  SpiFlashReadRLE2Header
      84  SpiFlashSet4ByteMode
     170  SpiFlashSetReadMode
       1  flasherr
       1  gManufacturerID
       1  gMemoryDensity
       1  gMemoryType
       1  gucSpiFlash4ByteMode
       1  gucSpiFlashVendor

 
     9 bytes in section .bss
 1 178 bytes in section .text
 
 1 178 bytes of CODE memory
     9 bytes of DATA memory

Errors: none
Warnings: none
